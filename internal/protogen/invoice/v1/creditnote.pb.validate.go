// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: invoice/v1/creditnote.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreditNoteHeader with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreditNoteHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditNoteHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditNoteHeaderMultiError, or nil if none found.
func (m *CreditNoteHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditNoteHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreditNoteHeaderD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderValidationError{
					field:  "CreditNoteHeaderD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderValidationError{
					field:  "CreditNoteHeaderD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreditNoteHeaderD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderValidationError{
				field:  "CreditNoteHeaderD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreditNoteHeaderT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderValidationError{
					field:  "CreditNoteHeaderT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderValidationError{
					field:  "CreditNoteHeaderT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreditNoteHeaderT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderValidationError{
				field:  "CreditNoteHeaderT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreditNoteHeaderMultiError(errors)
	}

	return nil
}

// CreditNoteHeaderMultiError is an error wrapping multiple validation errors
// returned by CreditNoteHeader.ValidateAll() if the designated constraints
// aren't met.
type CreditNoteHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditNoteHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditNoteHeaderMultiError) AllErrors() []error { return m }

// CreditNoteHeaderValidationError is the validation error returned by
// CreditNoteHeader.Validate if the designated constraints aren't met.
type CreditNoteHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditNoteHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditNoteHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditNoteHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditNoteHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditNoteHeaderValidationError) ErrorName() string { return "CreditNoteHeaderValidationError" }

// Error satisfies the builtin error interface
func (e CreditNoteHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditNoteHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditNoteHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditNoteHeaderValidationError{}

// Validate checks the field values on CreditNoteHeaderD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreditNoteHeaderD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditNoteHeaderD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditNoteHeaderDMultiError, or nil if none found.
func (m *CreditNoteHeaderD) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditNoteHeaderD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for CnhId

	// no validation rules for CreditNoteTypeCode

	// no validation rules for Note

	// no validation rules for DocumentCurrencyCode

	// no validation rules for TaxCurrencyCode

	// no validation rules for PricingCurrencyCode

	// no validation rules for PaymentCurrencyCode

	// no validation rules for PaymentAltCurrencyCode

	// no validation rules for AccountingCostCode

	// no validation rules for AccountingCost

	// no validation rules for LineCountNumeric

	// no validation rules for DiscrepancyResponse

	// no validation rules for OrderId

	// no validation rules for BillingId

	// no validation rules for DespatchId

	// no validation rules for ReceiptId

	// no validation rules for ContractId

	// no validation rules for StatementId

	// no validation rules for Signature

	// no validation rules for AccountingSupplierPartyId

	// no validation rules for AccountingCustomerPartyId

	// no validation rules for PayeePartyId

	// no validation rules for BuyerCustomerPartyId

	// no validation rules for SellerSupplierPartyId

	// no validation rules for TaxRepresentativePartyId

	// no validation rules for TaxExSourceCurrencyCode

	// no validation rules for TaxExSourceCurrencyBaseRate

	// no validation rules for TaxExTargetCurrencyCode

	// no validation rules for TaxExTargetCurrencyBaseRate

	// no validation rules for TaxExExchangeMarketId

	// no validation rules for TaxExCalculationRate

	// no validation rules for TaxExMathematicOperatorCode

	// no validation rules for PricingExSourceCurrencyCode

	// no validation rules for PricingExSourceCurrencyBaseRate

	// no validation rules for PricingExTargetCurrencyCode

	// no validation rules for PricingExTargetCurrencyBaseRate

	// no validation rules for PricingExExchangeMarketId

	// no validation rules for PricingExCalculationRate

	// no validation rules for PricingExMathematicOperatorCode

	// no validation rules for PaymentExSourceCurrencyCode

	// no validation rules for PaymentExSourceCurrencyBaseRate

	// no validation rules for PaymentExTargetCurrencyCode

	// no validation rules for PaymentExTargetCurrencyBaseRate

	// no validation rules for PaymentExExchangeMarketId

	// no validation rules for PaymentExCalculationRate

	// no validation rules for PaymentExMathematicOperatorCode

	// no validation rules for PaymentAltExSourceCurrencyCode

	// no validation rules for PaymentAltExSourceCurrencyBaseRate

	// no validation rules for PaymentAltExTargetCurrencyCode

	// no validation rules for PaymentAltExTargetCurrencyBaseRate

	// no validation rules for PaymentAltExExchangeMarketId

	// no validation rules for PaymentAltExCalculationRate

	// no validation rules for PaymentAltExMathematicOperatorCode

	// no validation rules for LineExtensionAmount

	// no validation rules for TaxExclusiveAmount

	// no validation rules for TaxInclusiveAmount

	// no validation rules for AllowanceTotalAmount

	// no validation rules for ChargeTotalAmount

	// no validation rules for WithholdingTaxTotalAmount

	// no validation rules for PrepaidAmount

	// no validation rules for PayableRoundingAmount

	// no validation rules for PayableAmount

	// no validation rules for PayableAlternativeAmount

	if len(errors) > 0 {
		return CreditNoteHeaderDMultiError(errors)
	}

	return nil
}

// CreditNoteHeaderDMultiError is an error wrapping multiple validation errors
// returned by CreditNoteHeaderD.ValidateAll() if the designated constraints
// aren't met.
type CreditNoteHeaderDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditNoteHeaderDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditNoteHeaderDMultiError) AllErrors() []error { return m }

// CreditNoteHeaderDValidationError is the validation error returned by
// CreditNoteHeaderD.Validate if the designated constraints aren't met.
type CreditNoteHeaderDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditNoteHeaderDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditNoteHeaderDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditNoteHeaderDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditNoteHeaderDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditNoteHeaderDValidationError) ErrorName() string {
	return "CreditNoteHeaderDValidationError"
}

// Error satisfies the builtin error interface
func (e CreditNoteHeaderDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditNoteHeaderD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditNoteHeaderDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditNoteHeaderDValidationError{}

// Validate checks the field values on CreditNoteHeaderT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreditNoteHeaderT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditNoteHeaderT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditNoteHeaderTMultiError, or nil if none found.
func (m *CreditNoteHeaderT) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditNoteHeaderT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderTValidationError{
				field:  "IssueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "DueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "DueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderTValidationError{
				field:  "DueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaxPointDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "TaxPointDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "TaxPointDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaxPointDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderTValidationError{
				field:  "TaxPointDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInvoicePeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "InvoicePeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "InvoicePeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvoicePeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderTValidationError{
				field:  "InvoicePeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInvoicePeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "InvoicePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "InvoicePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvoicePeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderTValidationError{
				field:  "InvoicePeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaxExDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "TaxExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "TaxExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaxExDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderTValidationError{
				field:  "TaxExDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPricingExDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "PricingExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "PricingExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPricingExDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderTValidationError{
				field:  "PricingExDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentExDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "PaymentExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "PaymentExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentExDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderTValidationError{
				field:  "PaymentExDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentAltExDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "PaymentAltExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteHeaderTValidationError{
					field:  "PaymentAltExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentAltExDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteHeaderTValidationError{
				field:  "PaymentAltExDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreditNoteHeaderTMultiError(errors)
	}

	return nil
}

// CreditNoteHeaderTMultiError is an error wrapping multiple validation errors
// returned by CreditNoteHeaderT.ValidateAll() if the designated constraints
// aren't met.
type CreditNoteHeaderTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditNoteHeaderTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditNoteHeaderTMultiError) AllErrors() []error { return m }

// CreditNoteHeaderTValidationError is the validation error returned by
// CreditNoteHeaderT.Validate if the designated constraints aren't met.
type CreditNoteHeaderTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditNoteHeaderTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditNoteHeaderTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditNoteHeaderTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditNoteHeaderTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditNoteHeaderTValidationError) ErrorName() string {
	return "CreditNoteHeaderTValidationError"
}

// Error satisfies the builtin error interface
func (e CreditNoteHeaderTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditNoteHeaderT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditNoteHeaderTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditNoteHeaderTValidationError{}

// Validate checks the field values on CreateCreditNoteHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditNoteHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditNoteHeaderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCreditNoteHeaderRequestMultiError, or nil if none found.
func (m *CreateCreditNoteHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditNoteHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CnhId

	// no validation rules for IssueDate

	// no validation rules for DueDate

	// no validation rules for TaxPointDate

	// no validation rules for CreditNoteTypeCode

	// no validation rules for Note

	// no validation rules for DocumentCurrencyCode

	// no validation rules for TaxCurrencyCode

	// no validation rules for PricingCurrencyCode

	// no validation rules for PaymentCurrencyCode

	// no validation rules for PaymentAltCurrencyCode

	// no validation rules for AccountingCostCode

	// no validation rules for AccountingCost

	// no validation rules for LineCountNumeric

	// no validation rules for InvoicePeriodStartDate

	// no validation rules for InvoicePeriodEndDate

	// no validation rules for DiscrepancyResponse

	// no validation rules for OrderId

	// no validation rules for BillingId

	// no validation rules for DespatchId

	// no validation rules for ReceiptId

	// no validation rules for ContractId

	// no validation rules for StatementId

	// no validation rules for Signature

	// no validation rules for AccountingSupplierPartyId

	// no validation rules for AccountingCustomerPartyId

	// no validation rules for PayeePartyId

	// no validation rules for BuyerCustomerPartyId

	// no validation rules for SellerSupplierPartyId

	// no validation rules for TaxRepresentativePartyId

	// no validation rules for TaxExSourceCurrencyCode

	// no validation rules for TaxExSourceCurrencyBaseRate

	// no validation rules for TaxExTargetCurrencyCode

	// no validation rules for TaxExTargetCurrencyBaseRate

	// no validation rules for TaxExExchangeMarketId

	// no validation rules for TaxExCalculationRate

	// no validation rules for TaxExMathematicOperatorCode

	// no validation rules for TaxExDate

	// no validation rules for PricingExSourceCurrencyCode

	// no validation rules for PricingExSourceCurrencyBaseRate

	// no validation rules for PricingExTargetCurrencyCode

	// no validation rules for PricingExTargetCurrencyBaseRate

	// no validation rules for PricingExExchangeMarketId

	// no validation rules for PricingExCalculationRate

	// no validation rules for PricingExMathematicOperatorCode

	// no validation rules for PricingExDate

	// no validation rules for PaymentExSourceCurrencyCode

	// no validation rules for PaymentExSourceCurrencyBaseRate

	// no validation rules for PaymentExTargetCurrencyCode

	// no validation rules for PaymentExTargetCurrencyBaseRate

	// no validation rules for PaymentExExchangeMarketId

	// no validation rules for PaymentExCalculationRate

	// no validation rules for PaymentExMathematicOperatorCode

	// no validation rules for PaymentExDate

	// no validation rules for PaymentAltExSourceCurrencyCode

	// no validation rules for PaymentAltExSourceCurrencyBaseRate

	// no validation rules for PaymentAltExTargetCurrencyCode

	// no validation rules for PaymentAltExTargetCurrencyBaseRate

	// no validation rules for PaymentAltExExchangeMarketId

	// no validation rules for PaymentAltExCalculationRate

	// no validation rules for PaymentAltExMathematicOperatorCode

	// no validation rules for PaymentAltExDate

	// no validation rules for LineExtensionAmount

	// no validation rules for TaxExclusiveAmount

	// no validation rules for TaxInclusiveAmount

	// no validation rules for AllowanceTotalAmount

	// no validation rules for ChargeTotalAmount

	// no validation rules for WithholdingTaxTotalAmount

	// no validation rules for PrepaidAmount

	// no validation rules for PayableRoundingAmount

	// no validation rules for PayableAmount

	// no validation rules for PayableAlternativeAmount

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetCreditNoteLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCreditNoteHeaderRequestValidationError{
						field:  fmt.Sprintf("CreditNoteLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCreditNoteHeaderRequestValidationError{
						field:  fmt.Sprintf("CreditNoteLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCreditNoteHeaderRequestValidationError{
					field:  fmt.Sprintf("CreditNoteLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCreditNoteHeaderRequestMultiError(errors)
	}

	return nil
}

// CreateCreditNoteHeaderRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCreditNoteHeaderRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCreditNoteHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditNoteHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditNoteHeaderRequestMultiError) AllErrors() []error { return m }

// CreateCreditNoteHeaderRequestValidationError is the validation error
// returned by CreateCreditNoteHeaderRequest.Validate if the designated
// constraints aren't met.
type CreateCreditNoteHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditNoteHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditNoteHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditNoteHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditNoteHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditNoteHeaderRequestValidationError) ErrorName() string {
	return "CreateCreditNoteHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditNoteHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditNoteHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditNoteHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditNoteHeaderRequestValidationError{}

// Validate checks the field values on CreateCreditNoteHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditNoteHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditNoteHeaderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCreditNoteHeaderResponseMultiError, or nil if none found.
func (m *CreateCreditNoteHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditNoteHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreditNoteHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCreditNoteHeaderResponseValidationError{
					field:  "CreditNoteHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCreditNoteHeaderResponseValidationError{
					field:  "CreditNoteHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreditNoteHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCreditNoteHeaderResponseValidationError{
				field:  "CreditNoteHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCreditNoteHeaderResponseMultiError(errors)
	}

	return nil
}

// CreateCreditNoteHeaderResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCreditNoteHeaderResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateCreditNoteHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditNoteHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditNoteHeaderResponseMultiError) AllErrors() []error { return m }

// CreateCreditNoteHeaderResponseValidationError is the validation error
// returned by CreateCreditNoteHeaderResponse.Validate if the designated
// constraints aren't met.
type CreateCreditNoteHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditNoteHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditNoteHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditNoteHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditNoteHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditNoteHeaderResponseValidationError) ErrorName() string {
	return "CreateCreditNoteHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditNoteHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditNoteHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditNoteHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditNoteHeaderResponseValidationError{}

// Validate checks the field values on UpdateCreditNoteHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCreditNoteHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCreditNoteHeaderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCreditNoteHeaderRequestMultiError, or nil if none found.
func (m *UpdateCreditNoteHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCreditNoteHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Note

	// no validation rules for TaxCurrencyCode

	// no validation rules for ChargeTotalAmount

	// no validation rules for PrepaidAmount

	// no validation rules for PayableRoundingAmount

	// no validation rules for PayableAmount

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateCreditNoteHeaderRequestMultiError(errors)
	}

	return nil
}

// UpdateCreditNoteHeaderRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCreditNoteHeaderRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateCreditNoteHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCreditNoteHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCreditNoteHeaderRequestMultiError) AllErrors() []error { return m }

// UpdateCreditNoteHeaderRequestValidationError is the validation error
// returned by UpdateCreditNoteHeaderRequest.Validate if the designated
// constraints aren't met.
type UpdateCreditNoteHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCreditNoteHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCreditNoteHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCreditNoteHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCreditNoteHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCreditNoteHeaderRequestValidationError) ErrorName() string {
	return "UpdateCreditNoteHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCreditNoteHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCreditNoteHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCreditNoteHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCreditNoteHeaderRequestValidationError{}

// Validate checks the field values on UpdateCreditNoteHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCreditNoteHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCreditNoteHeaderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCreditNoteHeaderResponseMultiError, or nil if none found.
func (m *UpdateCreditNoteHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCreditNoteHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCreditNoteHeaderResponseMultiError(errors)
	}

	return nil
}

// UpdateCreditNoteHeaderResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCreditNoteHeaderResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateCreditNoteHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCreditNoteHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCreditNoteHeaderResponseMultiError) AllErrors() []error { return m }

// UpdateCreditNoteHeaderResponseValidationError is the validation error
// returned by UpdateCreditNoteHeaderResponse.Validate if the designated
// constraints aren't met.
type UpdateCreditNoteHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCreditNoteHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCreditNoteHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCreditNoteHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCreditNoteHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCreditNoteHeaderResponseValidationError) ErrorName() string {
	return "UpdateCreditNoteHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCreditNoteHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCreditNoteHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCreditNoteHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCreditNoteHeaderResponseValidationError{}

// Validate checks the field values on GetCreditNoteHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditNoteHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditNoteHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditNoteHeaderRequestMultiError, or nil if none found.
func (m *GetCreditNoteHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditNoteHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCreditNoteHeaderRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCreditNoteHeaderRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCreditNoteHeaderRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCreditNoteHeaderRequestMultiError(errors)
	}

	return nil
}

// GetCreditNoteHeaderRequestMultiError is an error wrapping multiple
// validation errors returned by GetCreditNoteHeaderRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCreditNoteHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditNoteHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditNoteHeaderRequestMultiError) AllErrors() []error { return m }

// GetCreditNoteHeaderRequestValidationError is the validation error returned
// by GetCreditNoteHeaderRequest.Validate if the designated constraints aren't met.
type GetCreditNoteHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditNoteHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditNoteHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditNoteHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditNoteHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditNoteHeaderRequestValidationError) ErrorName() string {
	return "GetCreditNoteHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditNoteHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditNoteHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditNoteHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditNoteHeaderRequestValidationError{}

// Validate checks the field values on GetCreditNoteHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditNoteHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditNoteHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditNoteHeaderResponseMultiError, or nil if none found.
func (m *GetCreditNoteHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditNoteHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreditNoteHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCreditNoteHeaderResponseValidationError{
					field:  "CreditNoteHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCreditNoteHeaderResponseValidationError{
					field:  "CreditNoteHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreditNoteHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCreditNoteHeaderResponseValidationError{
				field:  "CreditNoteHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCreditNoteHeaderResponseMultiError(errors)
	}

	return nil
}

// GetCreditNoteHeaderResponseMultiError is an error wrapping multiple
// validation errors returned by GetCreditNoteHeaderResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCreditNoteHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditNoteHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditNoteHeaderResponseMultiError) AllErrors() []error { return m }

// GetCreditNoteHeaderResponseValidationError is the validation error returned
// by GetCreditNoteHeaderResponse.Validate if the designated constraints
// aren't met.
type GetCreditNoteHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditNoteHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditNoteHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditNoteHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditNoteHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditNoteHeaderResponseValidationError) ErrorName() string {
	return "GetCreditNoteHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditNoteHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditNoteHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditNoteHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditNoteHeaderResponseValidationError{}

// Validate checks the field values on GetCreditNoteHeaderByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditNoteHeaderByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditNoteHeaderByPkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCreditNoteHeaderByPkRequestMultiError, or nil if none found.
func (m *GetCreditNoteHeaderByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditNoteHeaderByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCreditNoteHeaderByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCreditNoteHeaderByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCreditNoteHeaderByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCreditNoteHeaderByPkRequestMultiError(errors)
	}

	return nil
}

// GetCreditNoteHeaderByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetCreditNoteHeaderByPkRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCreditNoteHeaderByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditNoteHeaderByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditNoteHeaderByPkRequestMultiError) AllErrors() []error { return m }

// GetCreditNoteHeaderByPkRequestValidationError is the validation error
// returned by GetCreditNoteHeaderByPkRequest.Validate if the designated
// constraints aren't met.
type GetCreditNoteHeaderByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditNoteHeaderByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditNoteHeaderByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditNoteHeaderByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditNoteHeaderByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditNoteHeaderByPkRequestValidationError) ErrorName() string {
	return "GetCreditNoteHeaderByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditNoteHeaderByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditNoteHeaderByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditNoteHeaderByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditNoteHeaderByPkRequestValidationError{}

// Validate checks the field values on GetCreditNoteHeaderByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditNoteHeaderByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditNoteHeaderByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCreditNoteHeaderByPkResponseMultiError, or nil if none found.
func (m *GetCreditNoteHeaderByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditNoteHeaderByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreditNoteHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCreditNoteHeaderByPkResponseValidationError{
					field:  "CreditNoteHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCreditNoteHeaderByPkResponseValidationError{
					field:  "CreditNoteHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreditNoteHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCreditNoteHeaderByPkResponseValidationError{
				field:  "CreditNoteHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCreditNoteHeaderByPkResponseMultiError(errors)
	}

	return nil
}

// GetCreditNoteHeaderByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetCreditNoteHeaderByPkResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCreditNoteHeaderByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditNoteHeaderByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditNoteHeaderByPkResponseMultiError) AllErrors() []error { return m }

// GetCreditNoteHeaderByPkResponseValidationError is the validation error
// returned by GetCreditNoteHeaderByPkResponse.Validate if the designated
// constraints aren't met.
type GetCreditNoteHeaderByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditNoteHeaderByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditNoteHeaderByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditNoteHeaderByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditNoteHeaderByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditNoteHeaderByPkResponseValidationError) ErrorName() string {
	return "GetCreditNoteHeaderByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditNoteHeaderByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditNoteHeaderByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditNoteHeaderByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditNoteHeaderByPkResponseValidationError{}

// Validate checks the field values on GetCreditNoteHeadersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditNoteHeadersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditNoteHeadersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditNoteHeadersRequestMultiError, or nil if none found.
func (m *GetCreditNoteHeadersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditNoteHeadersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetCreditNoteHeadersRequestMultiError(errors)
	}

	return nil
}

// GetCreditNoteHeadersRequestMultiError is an error wrapping multiple
// validation errors returned by GetCreditNoteHeadersRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCreditNoteHeadersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditNoteHeadersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditNoteHeadersRequestMultiError) AllErrors() []error { return m }

// GetCreditNoteHeadersRequestValidationError is the validation error returned
// by GetCreditNoteHeadersRequest.Validate if the designated constraints
// aren't met.
type GetCreditNoteHeadersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditNoteHeadersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditNoteHeadersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditNoteHeadersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditNoteHeadersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditNoteHeadersRequestValidationError) ErrorName() string {
	return "GetCreditNoteHeadersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditNoteHeadersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditNoteHeadersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditNoteHeadersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditNoteHeadersRequestValidationError{}

// Validate checks the field values on GetCreditNoteHeadersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditNoteHeadersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditNoteHeadersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditNoteHeadersResponseMultiError, or nil if none found.
func (m *GetCreditNoteHeadersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditNoteHeadersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreditNoteHeaders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCreditNoteHeadersResponseValidationError{
						field:  fmt.Sprintf("CreditNoteHeaders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCreditNoteHeadersResponseValidationError{
						field:  fmt.Sprintf("CreditNoteHeaders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCreditNoteHeadersResponseValidationError{
					field:  fmt.Sprintf("CreditNoteHeaders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetCreditNoteHeadersResponseMultiError(errors)
	}

	return nil
}

// GetCreditNoteHeadersResponseMultiError is an error wrapping multiple
// validation errors returned by GetCreditNoteHeadersResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCreditNoteHeadersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditNoteHeadersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditNoteHeadersResponseMultiError) AllErrors() []error { return m }

// GetCreditNoteHeadersResponseValidationError is the validation error returned
// by GetCreditNoteHeadersResponse.Validate if the designated constraints
// aren't met.
type GetCreditNoteHeadersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditNoteHeadersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditNoteHeadersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditNoteHeadersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditNoteHeadersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditNoteHeadersResponseValidationError) ErrorName() string {
	return "GetCreditNoteHeadersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditNoteHeadersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditNoteHeadersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditNoteHeadersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditNoteHeadersResponseValidationError{}

// Validate checks the field values on CreditNoteLine with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditNoteLine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditNoteLine with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditNoteLineMultiError,
// or nil if none found.
func (m *CreditNoteLine) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditNoteLine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreditNoteLineD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteLineValidationError{
					field:  "CreditNoteLineD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteLineValidationError{
					field:  "CreditNoteLineD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreditNoteLineD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteLineValidationError{
				field:  "CreditNoteLineD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreditNoteLineT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteLineValidationError{
					field:  "CreditNoteLineT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteLineValidationError{
					field:  "CreditNoteLineT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreditNoteLineT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteLineValidationError{
				field:  "CreditNoteLineT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteLineValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteLineValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteLineValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteLineValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteLineValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteLineValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreditNoteLineMultiError(errors)
	}

	return nil
}

// CreditNoteLineMultiError is an error wrapping multiple validation errors
// returned by CreditNoteLine.ValidateAll() if the designated constraints
// aren't met.
type CreditNoteLineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditNoteLineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditNoteLineMultiError) AllErrors() []error { return m }

// CreditNoteLineValidationError is the validation error returned by
// CreditNoteLine.Validate if the designated constraints aren't met.
type CreditNoteLineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditNoteLineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditNoteLineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditNoteLineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditNoteLineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditNoteLineValidationError) ErrorName() string { return "CreditNoteLineValidationError" }

// Error satisfies the builtin error interface
func (e CreditNoteLineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditNoteLine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditNoteLineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditNoteLineValidationError{}

// Validate checks the field values on CreditNoteLineD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreditNoteLineD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditNoteLineD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditNoteLineDMultiError, or nil if none found.
func (m *CreditNoteLineD) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditNoteLineD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for CnlId

	// no validation rules for Note

	// no validation rules for CreditedQuantity

	// no validation rules for LineExtensionAmount

	// no validation rules for AccountingCostCode

	// no validation rules for AccountingCost

	// no validation rules for PaymentPurposeCode

	// no validation rules for FreeOfChargeIndicator

	// no validation rules for DiscrepancyResponse

	// no validation rules for OrderLineId

	// no validation rules for DespatchLineId

	// no validation rules for ReceiptLineId

	// no validation rules for BillingId

	// no validation rules for OriginatorPartyId

	// no validation rules for ItemId

	// no validation rules for PriceAmount

	// no validation rules for PriceBaseQuantity

	// no validation rules for PriceChangeReason

	// no validation rules for PriceTypeCode

	// no validation rules for PriceType

	// no validation rules for OrderableUnitFactorRate

	// no validation rules for PriceListId

	// no validation rules for CreditNoteHeaderId

	if len(errors) > 0 {
		return CreditNoteLineDMultiError(errors)
	}

	return nil
}

// CreditNoteLineDMultiError is an error wrapping multiple validation errors
// returned by CreditNoteLineD.ValidateAll() if the designated constraints
// aren't met.
type CreditNoteLineDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditNoteLineDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditNoteLineDMultiError) AllErrors() []error { return m }

// CreditNoteLineDValidationError is the validation error returned by
// CreditNoteLineD.Validate if the designated constraints aren't met.
type CreditNoteLineDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditNoteLineDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditNoteLineDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditNoteLineDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditNoteLineDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditNoteLineDValidationError) ErrorName() string { return "CreditNoteLineDValidationError" }

// Error satisfies the builtin error interface
func (e CreditNoteLineDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditNoteLineD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditNoteLineDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditNoteLineDValidationError{}

// Validate checks the field values on CreditNoteLineT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreditNoteLineT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditNoteLineT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditNoteLineTMultiError, or nil if none found.
func (m *CreditNoteLineT) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditNoteLineT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaxPointDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "TaxPointDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "TaxPointDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaxPointDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteLineTValidationError{
				field:  "TaxPointDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInvoicePeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "InvoicePeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "InvoicePeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvoicePeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteLineTValidationError{
				field:  "InvoicePeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInvoicePeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "InvoicePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "InvoicePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvoicePeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteLineTValidationError{
				field:  "InvoicePeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPriceValidityPeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "PriceValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "PriceValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPriceValidityPeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteLineTValidationError{
				field:  "PriceValidityPeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPriceValidityPeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "PriceValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditNoteLineTValidationError{
					field:  "PriceValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPriceValidityPeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditNoteLineTValidationError{
				field:  "PriceValidityPeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreditNoteLineTMultiError(errors)
	}

	return nil
}

// CreditNoteLineTMultiError is an error wrapping multiple validation errors
// returned by CreditNoteLineT.ValidateAll() if the designated constraints
// aren't met.
type CreditNoteLineTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditNoteLineTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditNoteLineTMultiError) AllErrors() []error { return m }

// CreditNoteLineTValidationError is the validation error returned by
// CreditNoteLineT.Validate if the designated constraints aren't met.
type CreditNoteLineTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditNoteLineTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditNoteLineTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditNoteLineTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditNoteLineTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditNoteLineTValidationError) ErrorName() string { return "CreditNoteLineTValidationError" }

// Error satisfies the builtin error interface
func (e CreditNoteLineTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditNoteLineT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditNoteLineTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditNoteLineTValidationError{}

// Validate checks the field values on CreateCreditNoteLineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditNoteLineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditNoteLineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCreditNoteLineRequestMultiError, or nil if none found.
func (m *CreateCreditNoteLineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditNoteLineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CnlId

	// no validation rules for Note

	// no validation rules for CreditedQuantity

	// no validation rules for LineExtensionAmount

	// no validation rules for TaxPointDate

	// no validation rules for AccountingCostCode

	// no validation rules for AccountingCost

	// no validation rules for PaymentPurposeCode

	// no validation rules for FreeOfChargeIndicator

	// no validation rules for InvoicePeriodStartDate

	// no validation rules for InvoicePeriodEndDate

	// no validation rules for DiscrepancyResponse

	// no validation rules for OrderLineId

	// no validation rules for DespatchLineId

	// no validation rules for ReceiptLineId

	// no validation rules for BillingId

	// no validation rules for OriginatorPartyId

	// no validation rules for ItemId

	// no validation rules for PriceAmount

	// no validation rules for PriceBaseQuantity

	// no validation rules for PriceChangeReason

	// no validation rules for PriceTypeCode

	// no validation rules for PriceType

	// no validation rules for OrderableUnitFactorRate

	// no validation rules for PriceValidityPeriodStartDate

	// no validation rules for PriceValidityPeriodEndDate

	// no validation rules for PriceListId

	// no validation rules for CreditNoteHeaderId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateCreditNoteLineRequestMultiError(errors)
	}

	return nil
}

// CreateCreditNoteLineRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCreditNoteLineRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCreditNoteLineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditNoteLineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditNoteLineRequestMultiError) AllErrors() []error { return m }

// CreateCreditNoteLineRequestValidationError is the validation error returned
// by CreateCreditNoteLineRequest.Validate if the designated constraints
// aren't met.
type CreateCreditNoteLineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditNoteLineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditNoteLineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditNoteLineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditNoteLineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditNoteLineRequestValidationError) ErrorName() string {
	return "CreateCreditNoteLineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditNoteLineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditNoteLineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditNoteLineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditNoteLineRequestValidationError{}

// Validate checks the field values on CreateCreditNoteLineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditNoteLineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditNoteLineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCreditNoteLineResponseMultiError, or nil if none found.
func (m *CreateCreditNoteLineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditNoteLineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreditNoteLine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCreditNoteLineResponseValidationError{
					field:  "CreditNoteLine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCreditNoteLineResponseValidationError{
					field:  "CreditNoteLine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreditNoteLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCreditNoteLineResponseValidationError{
				field:  "CreditNoteLine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCreditNoteLineResponseMultiError(errors)
	}

	return nil
}

// CreateCreditNoteLineResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCreditNoteLineResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateCreditNoteLineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditNoteLineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditNoteLineResponseMultiError) AllErrors() []error { return m }

// CreateCreditNoteLineResponseValidationError is the validation error returned
// by CreateCreditNoteLineResponse.Validate if the designated constraints
// aren't met.
type CreateCreditNoteLineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditNoteLineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditNoteLineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditNoteLineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditNoteLineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditNoteLineResponseValidationError) ErrorName() string {
	return "CreateCreditNoteLineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditNoteLineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditNoteLineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditNoteLineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditNoteLineResponseValidationError{}

// Validate checks the field values on GetCreditNoteLinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditNoteLinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditNoteLinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditNoteLinesRequestMultiError, or nil if none found.
func (m *GetCreditNoteLinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditNoteLinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCreditNoteLinesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCreditNoteLinesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCreditNoteLinesRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCreditNoteLinesRequestMultiError(errors)
	}

	return nil
}

// GetCreditNoteLinesRequestMultiError is an error wrapping multiple validation
// errors returned by GetCreditNoteLinesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetCreditNoteLinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditNoteLinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditNoteLinesRequestMultiError) AllErrors() []error { return m }

// GetCreditNoteLinesRequestValidationError is the validation error returned by
// GetCreditNoteLinesRequest.Validate if the designated constraints aren't met.
type GetCreditNoteLinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditNoteLinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditNoteLinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditNoteLinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditNoteLinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditNoteLinesRequestValidationError) ErrorName() string {
	return "GetCreditNoteLinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditNoteLinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditNoteLinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditNoteLinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditNoteLinesRequestValidationError{}

// Validate checks the field values on GetCreditNoteLinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditNoteLinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditNoteLinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditNoteLinesResponseMultiError, or nil if none found.
func (m *GetCreditNoteLinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditNoteLinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreditNoteLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCreditNoteLinesResponseValidationError{
						field:  fmt.Sprintf("CreditNoteLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCreditNoteLinesResponseValidationError{
						field:  fmt.Sprintf("CreditNoteLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCreditNoteLinesResponseValidationError{
					field:  fmt.Sprintf("CreditNoteLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCreditNoteLinesResponseMultiError(errors)
	}

	return nil
}

// GetCreditNoteLinesResponseMultiError is an error wrapping multiple
// validation errors returned by GetCreditNoteLinesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCreditNoteLinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditNoteLinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditNoteLinesResponseMultiError) AllErrors() []error { return m }

// GetCreditNoteLinesResponseValidationError is the validation error returned
// by GetCreditNoteLinesResponse.Validate if the designated constraints aren't met.
type GetCreditNoteLinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditNoteLinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditNoteLinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditNoteLinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditNoteLinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditNoteLinesResponseValidationError) ErrorName() string {
	return "GetCreditNoteLinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditNoteLinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditNoteLinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditNoteLinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditNoteLinesResponseValidationError{}
