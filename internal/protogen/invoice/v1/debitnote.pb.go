// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: invoice/v1/debitnote.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DebitNoteHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitNoteHeaderD *DebitNoteHeaderD `protobuf:"bytes,1,opt,name=debit_note_header_d,json=debitNoteHeaderD,proto3" json:"debit_note_header_d,omitempty"`
	DebitNoteHeaderT *DebitNoteHeaderT `protobuf:"bytes,2,opt,name=debit_note_header_t,json=debitNoteHeaderT,proto3" json:"debit_note_header_t,omitempty"`
	CrUpdUser        *v1.CrUpdUser     `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime        *v1.CrUpdTime     `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DebitNoteHeader) Reset() {
	*x = DebitNoteHeader{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitNoteHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitNoteHeader) ProtoMessage() {}

func (x *DebitNoteHeader) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitNoteHeader.ProtoReflect.Descriptor instead.
func (*DebitNoteHeader) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{0}
}

func (x *DebitNoteHeader) GetDebitNoteHeaderD() *DebitNoteHeaderD {
	if x != nil {
		return x.DebitNoteHeaderD
	}
	return nil
}

func (x *DebitNoteHeader) GetDebitNoteHeaderT() *DebitNoteHeaderT {
	if x != nil {
		return x.DebitNoteHeaderT
	}
	return nil
}

func (x *DebitNoteHeader) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DebitNoteHeader) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DebitNoteHeaderD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                              []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	DnhId                              string  `protobuf:"bytes,4,opt,name=dnh_id,json=dnhId,proto3" json:"dnh_id,omitempty"`
	Note                               string  `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	DocumentCurrencyCode               string  `protobuf:"bytes,6,opt,name=document_currency_code,json=documentCurrencyCode,proto3" json:"document_currency_code,omitempty"`
	TaxCurrencyCode                    string  `protobuf:"bytes,7,opt,name=tax_currency_code,json=taxCurrencyCode,proto3" json:"tax_currency_code,omitempty"`
	PricingCurrencyCode                string  `protobuf:"bytes,8,opt,name=pricing_currency_code,json=pricingCurrencyCode,proto3" json:"pricing_currency_code,omitempty"`
	PaymentCurrencyCode                string  `protobuf:"bytes,9,opt,name=payment_currency_code,json=paymentCurrencyCode,proto3" json:"payment_currency_code,omitempty"`
	PaymentAltCurrencyCode             string  `protobuf:"bytes,10,opt,name=payment_alt_currency_code,json=paymentAltCurrencyCode,proto3" json:"payment_alt_currency_code,omitempty"`
	AccountingCostCode                 string  `protobuf:"bytes,11,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost                     string  `protobuf:"bytes,12,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	LineCountNumeric                   uint32  `protobuf:"varint,13,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	DiscrepancyResponse                string  `protobuf:"bytes,14,opt,name=discrepancy_response,json=discrepancyResponse,proto3" json:"discrepancy_response,omitempty"`
	OrderId                            uint32  `protobuf:"varint,15,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	BillingId                          uint32  `protobuf:"varint,16,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	DespatchId                         uint32  `protobuf:"varint,17,opt,name=despatch_id,json=despatchId,proto3" json:"despatch_id,omitempty"`
	ReceiptId                          uint32  `protobuf:"varint,18,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id,omitempty"`
	StatementId                        uint32  `protobuf:"varint,19,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	ContractId                         uint32  `protobuf:"varint,20,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AccountingSupplierPartyId          uint32  `protobuf:"varint,21,opt,name=accounting_supplier_party_id,json=accountingSupplierPartyId,proto3" json:"accounting_supplier_party_id,omitempty"`
	AccountingCustomerPartyId          uint32  `protobuf:"varint,22,opt,name=accounting_customer_party_id,json=accountingCustomerPartyId,proto3" json:"accounting_customer_party_id,omitempty"`
	PayeePartyId                       uint32  `protobuf:"varint,23,opt,name=payee_party_id,json=payeePartyId,proto3" json:"payee_party_id,omitempty"`
	BuyerCustomerPartyId               uint32  `protobuf:"varint,24,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId              uint32  `protobuf:"varint,25,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	TaxRepresentativePartyId           uint32  `protobuf:"varint,26,opt,name=tax_representative_party_id,json=taxRepresentativePartyId,proto3" json:"tax_representative_party_id,omitempty"`
	TaxExSourceCurrencyCode            string  `protobuf:"bytes,27,opt,name=tax_ex_source_currency_code,json=taxExSourceCurrencyCode,proto3" json:"tax_ex_source_currency_code,omitempty"`
	TaxExSourceCurrencyBaseRate        string  `protobuf:"bytes,28,opt,name=tax_ex_source_currency_base_rate,json=taxExSourceCurrencyBaseRate,proto3" json:"tax_ex_source_currency_base_rate,omitempty"`
	TaxExTargetCurrencyCode            string  `protobuf:"bytes,29,opt,name=tax_ex_target_currency_code,json=taxExTargetCurrencyCode,proto3" json:"tax_ex_target_currency_code,omitempty"`
	TaxExTargetCurrencyBaseRate        string  `protobuf:"bytes,30,opt,name=tax_ex_target_currency_base_rate,json=taxExTargetCurrencyBaseRate,proto3" json:"tax_ex_target_currency_base_rate,omitempty"`
	TaxExExchangeMarketId              uint32  `protobuf:"varint,31,opt,name=tax_ex_exchange_market_id,json=taxExExchangeMarketId,proto3" json:"tax_ex_exchange_market_id,omitempty"`
	TaxExCalculationRate               float64 `protobuf:"fixed64,32,opt,name=tax_ex_calculation_rate,json=taxExCalculationRate,proto3" json:"tax_ex_calculation_rate,omitempty"`
	TaxExMathematicOperatorCode        string  `protobuf:"bytes,33,opt,name=tax_ex_mathematic_operator_code,json=taxExMathematicOperatorCode,proto3" json:"tax_ex_mathematic_operator_code,omitempty"`
	PricingExSourceCurrencyCode        string  `protobuf:"bytes,34,opt,name=pricing_ex_source_currency_code,json=pricingExSourceCurrencyCode,proto3" json:"pricing_ex_source_currency_code,omitempty"`
	PricingExSourceCurrencyBaseRate    string  `protobuf:"bytes,35,opt,name=pricing_ex_source_currency_base_rate,json=pricingExSourceCurrencyBaseRate,proto3" json:"pricing_ex_source_currency_base_rate,omitempty"`
	PricingExTargetCurrencyCode        string  `protobuf:"bytes,36,opt,name=pricing_ex_target_currency_code,json=pricingExTargetCurrencyCode,proto3" json:"pricing_ex_target_currency_code,omitempty"`
	PricingExTargetCurrencyBaseRate    string  `protobuf:"bytes,37,opt,name=pricing_ex_target_currency_base_rate,json=pricingExTargetCurrencyBaseRate,proto3" json:"pricing_ex_target_currency_base_rate,omitempty"`
	PricingExExchangeMarketId          uint32  `protobuf:"varint,38,opt,name=pricing_ex_exchange_market_id,json=pricingExExchangeMarketId,proto3" json:"pricing_ex_exchange_market_id,omitempty"`
	PricingExCalculationRate           float64 `protobuf:"fixed64,39,opt,name=pricing_ex_calculation_rate,json=pricingExCalculationRate,proto3" json:"pricing_ex_calculation_rate,omitempty"`
	PricingExMathematicOperatorCode    string  `protobuf:"bytes,40,opt,name=pricing_ex_mathematic_operator_code,json=pricingExMathematicOperatorCode,proto3" json:"pricing_ex_mathematic_operator_code,omitempty"`
	PaymentExSourceCurrencyCode        string  `protobuf:"bytes,41,opt,name=payment_ex_source_currency_code,json=paymentExSourceCurrencyCode,proto3" json:"payment_ex_source_currency_code,omitempty"`
	PaymentExSourceCurrencyBaseRate    string  `protobuf:"bytes,42,opt,name=payment_ex_source_currency_base_rate,json=paymentExSourceCurrencyBaseRate,proto3" json:"payment_ex_source_currency_base_rate,omitempty"`
	PaymentExTargetCurrencyCode        string  `protobuf:"bytes,43,opt,name=payment_ex_target_currency_code,json=paymentExTargetCurrencyCode,proto3" json:"payment_ex_target_currency_code,omitempty"`
	PaymentExTargetCurrencyBaseRate    string  `protobuf:"bytes,44,opt,name=payment_ex_target_currency_base_rate,json=paymentExTargetCurrencyBaseRate,proto3" json:"payment_ex_target_currency_base_rate,omitempty"`
	PaymentExExchangeMarketId          uint32  `protobuf:"varint,45,opt,name=payment_ex_exchange_market_id,json=paymentExExchangeMarketId,proto3" json:"payment_ex_exchange_market_id,omitempty"`
	PaymentExCalculationRate           float64 `protobuf:"fixed64,46,opt,name=payment_ex_calculation_rate,json=paymentExCalculationRate,proto3" json:"payment_ex_calculation_rate,omitempty"`
	PaymentExMathematicOperatorCode    string  `protobuf:"bytes,47,opt,name=payment_ex_mathematic_operator_code,json=paymentExMathematicOperatorCode,proto3" json:"payment_ex_mathematic_operator_code,omitempty"`
	PaymentAltExSourceCurrencyCode     string  `protobuf:"bytes,48,opt,name=payment_alt_ex_source_currency_code,json=paymentAltExSourceCurrencyCode,proto3" json:"payment_alt_ex_source_currency_code,omitempty"`
	PaymentAltExSourceCurrencyBaseRate string  `protobuf:"bytes,49,opt,name=payment_alt_ex_source_currency_base_rate,json=paymentAltExSourceCurrencyBaseRate,proto3" json:"payment_alt_ex_source_currency_base_rate,omitempty"`
	PaymentAltExTargetCurrencyCode     string  `protobuf:"bytes,50,opt,name=payment_alt_ex_target_currency_code,json=paymentAltExTargetCurrencyCode,proto3" json:"payment_alt_ex_target_currency_code,omitempty"`
	PaymentAltExTargetCurrencyBaseRate string  `protobuf:"bytes,51,opt,name=payment_alt_ex_target_currency_base_rate,json=paymentAltExTargetCurrencyBaseRate,proto3" json:"payment_alt_ex_target_currency_base_rate,omitempty"`
	PaymentAltExExchangeMarketId       uint32  `protobuf:"varint,52,opt,name=payment_alt_ex_exchange_market_id,json=paymentAltExExchangeMarketId,proto3" json:"payment_alt_ex_exchange_market_id,omitempty"`
	PaymentAltExCalculationRate        float64 `protobuf:"fixed64,53,opt,name=payment_alt_ex_calculation_rate,json=paymentAltExCalculationRate,proto3" json:"payment_alt_ex_calculation_rate,omitempty"`
	PaymentAltExMathematicOperatorCode string  `protobuf:"bytes,54,opt,name=payment_alt_ex_mathematic_operator_code,json=paymentAltExMathematicOperatorCode,proto3" json:"payment_alt_ex_mathematic_operator_code,omitempty"`
	LineExtensionAmount                float64 `protobuf:"fixed64,55,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TaxExclusiveAmount                 float64 `protobuf:"fixed64,56,opt,name=tax_exclusive_amount,json=taxExclusiveAmount,proto3" json:"tax_exclusive_amount,omitempty"`
	TaxInclusiveAmount                 float64 `protobuf:"fixed64,57,opt,name=tax_inclusive_amount,json=taxInclusiveAmount,proto3" json:"tax_inclusive_amount,omitempty"`
	AllowanceTotalAmount               float64 `protobuf:"fixed64,58,opt,name=allowance_total_amount,json=allowanceTotalAmount,proto3" json:"allowance_total_amount,omitempty"`
	ChargeTotalAmount                  float64 `protobuf:"fixed64,59,opt,name=charge_total_amount,json=chargeTotalAmount,proto3" json:"charge_total_amount,omitempty"`
	WithholdingTaxTotalAmount          float64 `protobuf:"fixed64,60,opt,name=withholding_tax_total_amount,json=withholdingTaxTotalAmount,proto3" json:"withholding_tax_total_amount,omitempty"`
	PrepaidAmount                      float64 `protobuf:"fixed64,61,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PayableRoundingAmount              float64 `protobuf:"fixed64,62,opt,name=payable_rounding_amount,json=payableRoundingAmount,proto3" json:"payable_rounding_amount,omitempty"`
	PayableAmount                      float64 `protobuf:"fixed64,63,opt,name=payable_amount,json=payableAmount,proto3" json:"payable_amount,omitempty"`
	PayableAlternativeAmount           float64 `protobuf:"fixed64,64,opt,name=payable_alternative_amount,json=payableAlternativeAmount,proto3" json:"payable_alternative_amount,omitempty"`
}

func (x *DebitNoteHeaderD) Reset() {
	*x = DebitNoteHeaderD{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitNoteHeaderD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitNoteHeaderD) ProtoMessage() {}

func (x *DebitNoteHeaderD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitNoteHeaderD.ProtoReflect.Descriptor instead.
func (*DebitNoteHeaderD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{1}
}

func (x *DebitNoteHeaderD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DebitNoteHeaderD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DebitNoteHeaderD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DebitNoteHeaderD) GetDnhId() string {
	if x != nil {
		return x.DnhId
	}
	return ""
}

func (x *DebitNoteHeaderD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *DebitNoteHeaderD) GetDocumentCurrencyCode() string {
	if x != nil {
		return x.DocumentCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetTaxCurrencyCode() string {
	if x != nil {
		return x.TaxCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPricingCurrencyCode() string {
	if x != nil {
		return x.PricingCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentCurrencyCode() string {
	if x != nil {
		return x.PaymentCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentAltCurrencyCode() string {
	if x != nil {
		return x.PaymentAltCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *DebitNoteHeaderD) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *DebitNoteHeaderD) GetDiscrepancyResponse() string {
	if x != nil {
		return x.DiscrepancyResponse
	}
	return ""
}

func (x *DebitNoteHeaderD) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetBillingId() uint32 {
	if x != nil {
		return x.BillingId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetDespatchId() uint32 {
	if x != nil {
		return x.DespatchId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetReceiptId() uint32 {
	if x != nil {
		return x.ReceiptId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetStatementId() uint32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetContractId() uint32 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetAccountingSupplierPartyId() uint32 {
	if x != nil {
		return x.AccountingSupplierPartyId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetAccountingCustomerPartyId() uint32 {
	if x != nil {
		return x.AccountingCustomerPartyId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPayeePartyId() uint32 {
	if x != nil {
		return x.PayeePartyId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetTaxRepresentativePartyId() uint32 {
	if x != nil {
		return x.TaxRepresentativePartyId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetTaxExSourceCurrencyCode() string {
	if x != nil {
		return x.TaxExSourceCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetTaxExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExSourceCurrencyBaseRate
	}
	return ""
}

func (x *DebitNoteHeaderD) GetTaxExTargetCurrencyCode() string {
	if x != nil {
		return x.TaxExTargetCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetTaxExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExTargetCurrencyBaseRate
	}
	return ""
}

func (x *DebitNoteHeaderD) GetTaxExExchangeMarketId() uint32 {
	if x != nil {
		return x.TaxExExchangeMarketId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetTaxExCalculationRate() float64 {
	if x != nil {
		return x.TaxExCalculationRate
	}
	return 0
}

func (x *DebitNoteHeaderD) GetTaxExMathematicOperatorCode() string {
	if x != nil {
		return x.TaxExMathematicOperatorCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPricingExSourceCurrencyCode() string {
	if x != nil {
		return x.PricingExSourceCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPricingExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExSourceCurrencyBaseRate
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPricingExTargetCurrencyCode() string {
	if x != nil {
		return x.PricingExTargetCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPricingExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExTargetCurrencyBaseRate
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPricingExExchangeMarketId() uint32 {
	if x != nil {
		return x.PricingExExchangeMarketId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPricingExCalculationRate() float64 {
	if x != nil {
		return x.PricingExCalculationRate
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPricingExMathematicOperatorCode() string {
	if x != nil {
		return x.PricingExMathematicOperatorCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentExSourceCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExSourceCurrencyBaseRate
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentExTargetCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExTargetCurrencyBaseRate
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentExExchangeMarketId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPaymentExCalculationRate() float64 {
	if x != nil {
		return x.PaymentExCalculationRate
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPaymentExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentExMathematicOperatorCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentAltExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentAltExSourceCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentAltExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentAltExSourceCurrencyBaseRate
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentAltExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentAltExTargetCurrencyCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentAltExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentAltExTargetCurrencyBaseRate
	}
	return ""
}

func (x *DebitNoteHeaderD) GetPaymentAltExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentAltExExchangeMarketId
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPaymentAltExCalculationRate() float64 {
	if x != nil {
		return x.PaymentAltExCalculationRate
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPaymentAltExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentAltExMathematicOperatorCode
	}
	return ""
}

func (x *DebitNoteHeaderD) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *DebitNoteHeaderD) GetTaxExclusiveAmount() float64 {
	if x != nil {
		return x.TaxExclusiveAmount
	}
	return 0
}

func (x *DebitNoteHeaderD) GetTaxInclusiveAmount() float64 {
	if x != nil {
		return x.TaxInclusiveAmount
	}
	return 0
}

func (x *DebitNoteHeaderD) GetAllowanceTotalAmount() float64 {
	if x != nil {
		return x.AllowanceTotalAmount
	}
	return 0
}

func (x *DebitNoteHeaderD) GetChargeTotalAmount() float64 {
	if x != nil {
		return x.ChargeTotalAmount
	}
	return 0
}

func (x *DebitNoteHeaderD) GetWithholdingTaxTotalAmount() float64 {
	if x != nil {
		return x.WithholdingTaxTotalAmount
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPayableRoundingAmount() float64 {
	if x != nil {
		return x.PayableRoundingAmount
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPayableAmount() float64 {
	if x != nil {
		return x.PayableAmount
	}
	return 0
}

func (x *DebitNoteHeaderD) GetPayableAlternativeAmount() float64 {
	if x != nil {
		return x.PayableAlternativeAmount
	}
	return 0
}

type DebitNoteHeaderT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueDate              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	TaxPointDate           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=tax_point_date,json=taxPointDate,proto3" json:"tax_point_date,omitempty"`
	InvoicePeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=invoice_period_start_date,json=invoicePeriodStartDate,proto3" json:"invoice_period_start_date,omitempty"`
	InvoicePeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=invoice_period_end_date,json=invoicePeriodEndDate,proto3" json:"invoice_period_end_date,omitempty"`
	TaxExDate              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=tax_ex_date,json=taxExDate,proto3" json:"tax_ex_date,omitempty"`
	PricingExDate          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=pricing_ex_date,json=pricingExDate,proto3" json:"pricing_ex_date,omitempty"`
	PaymentExDate          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=payment_ex_date,json=paymentExDate,proto3" json:"payment_ex_date,omitempty"`
	PaymentAltExDate       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payment_alt_ex_date,json=paymentAltExDate,proto3" json:"payment_alt_ex_date,omitempty"`
}

func (x *DebitNoteHeaderT) Reset() {
	*x = DebitNoteHeaderT{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitNoteHeaderT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitNoteHeaderT) ProtoMessage() {}

func (x *DebitNoteHeaderT) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitNoteHeaderT.ProtoReflect.Descriptor instead.
func (*DebitNoteHeaderT) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{2}
}

func (x *DebitNoteHeaderT) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *DebitNoteHeaderT) GetTaxPointDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TaxPointDate
	}
	return nil
}

func (x *DebitNoteHeaderT) GetInvoicePeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicePeriodStartDate
	}
	return nil
}

func (x *DebitNoteHeaderT) GetInvoicePeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicePeriodEndDate
	}
	return nil
}

func (x *DebitNoteHeaderT) GetTaxExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TaxExDate
	}
	return nil
}

func (x *DebitNoteHeaderT) GetPricingExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PricingExDate
	}
	return nil
}

func (x *DebitNoteHeaderT) GetPaymentExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentExDate
	}
	return nil
}

func (x *DebitNoteHeaderT) GetPaymentAltExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentAltExDate
	}
	return nil
}

type CreateDebitNoteHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnhId                              string                        `protobuf:"bytes,1,opt,name=dnh_id,json=dnhId,proto3" json:"dnh_id,omitempty"`
	IssueDate                          string                        `protobuf:"bytes,2,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	Note                               string                        `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	TaxPointDate                       string                        `protobuf:"bytes,4,opt,name=tax_point_date,json=taxPointDate,proto3" json:"tax_point_date,omitempty"`
	DocumentCurrencyCode               string                        `protobuf:"bytes,5,opt,name=document_currency_code,json=documentCurrencyCode,proto3" json:"document_currency_code,omitempty"`
	TaxCurrencyCode                    string                        `protobuf:"bytes,6,opt,name=tax_currency_code,json=taxCurrencyCode,proto3" json:"tax_currency_code,omitempty"`
	PricingCurrencyCode                string                        `protobuf:"bytes,7,opt,name=pricing_currency_code,json=pricingCurrencyCode,proto3" json:"pricing_currency_code,omitempty"`
	PaymentCurrencyCode                string                        `protobuf:"bytes,8,opt,name=payment_currency_code,json=paymentCurrencyCode,proto3" json:"payment_currency_code,omitempty"`
	PaymentAltCurrencyCode             string                        `protobuf:"bytes,9,opt,name=payment_alt_currency_code,json=paymentAltCurrencyCode,proto3" json:"payment_alt_currency_code,omitempty"`
	AccountingCostCode                 string                        `protobuf:"bytes,10,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost                     string                        `protobuf:"bytes,11,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	LineCountNumeric                   uint32                        `protobuf:"varint,12,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	InvoicePeriodStartDate             string                        `protobuf:"bytes,13,opt,name=invoice_period_start_date,json=invoicePeriodStartDate,proto3" json:"invoice_period_start_date,omitempty"`
	InvoicePeriodEndDate               string                        `protobuf:"bytes,73,opt,name=invoice_period_end_date,json=invoicePeriodEndDate,proto3" json:"invoice_period_end_date,omitempty"`
	DiscrepancyResponse                string                        `protobuf:"bytes,14,opt,name=discrepancy_response,json=discrepancyResponse,proto3" json:"discrepancy_response,omitempty"`
	OrderId                            uint32                        `protobuf:"varint,15,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	BillingId                          uint32                        `protobuf:"varint,16,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	DespatchId                         uint32                        `protobuf:"varint,17,opt,name=despatch_id,json=despatchId,proto3" json:"despatch_id,omitempty"`
	ReceiptId                          uint32                        `protobuf:"varint,18,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id,omitempty"`
	StatementId                        uint32                        `protobuf:"varint,19,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	ContractId                         uint32                        `protobuf:"varint,20,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AccountingSupplierPartyId          uint32                        `protobuf:"varint,22,opt,name=accounting_supplier_party_id,json=accountingSupplierPartyId,proto3" json:"accounting_supplier_party_id,omitempty"`
	AccountingCustomerPartyId          uint32                        `protobuf:"varint,23,opt,name=accounting_customer_party_id,json=accountingCustomerPartyId,proto3" json:"accounting_customer_party_id,omitempty"`
	PayeePartyId                       uint32                        `protobuf:"varint,24,opt,name=payee_party_id,json=payeePartyId,proto3" json:"payee_party_id,omitempty"`
	BuyerCustomerPartyId               uint32                        `protobuf:"varint,25,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId              uint32                        `protobuf:"varint,26,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	TaxRepresentativePartyId           uint32                        `protobuf:"varint,27,opt,name=tax_representative_party_id,json=taxRepresentativePartyId,proto3" json:"tax_representative_party_id,omitempty"`
	TaxExSourceCurrencyCode            string                        `protobuf:"bytes,28,opt,name=tax_ex_source_currency_code,json=taxExSourceCurrencyCode,proto3" json:"tax_ex_source_currency_code,omitempty"`
	TaxExSourceCurrencyBaseRate        string                        `protobuf:"bytes,29,opt,name=tax_ex_source_currency_base_rate,json=taxExSourceCurrencyBaseRate,proto3" json:"tax_ex_source_currency_base_rate,omitempty"`
	TaxExTargetCurrencyCode            string                        `protobuf:"bytes,30,opt,name=tax_ex_target_currency_code,json=taxExTargetCurrencyCode,proto3" json:"tax_ex_target_currency_code,omitempty"`
	TaxExTargetCurrencyBaseRate        string                        `protobuf:"bytes,31,opt,name=tax_ex_target_currency_base_rate,json=taxExTargetCurrencyBaseRate,proto3" json:"tax_ex_target_currency_base_rate,omitempty"`
	TaxExExchangeMarketId              uint32                        `protobuf:"varint,32,opt,name=tax_ex_exchange_market_id,json=taxExExchangeMarketId,proto3" json:"tax_ex_exchange_market_id,omitempty"`
	TaxExCalculationRate               float64                       `protobuf:"fixed64,33,opt,name=tax_ex_calculation_rate,json=taxExCalculationRate,proto3" json:"tax_ex_calculation_rate,omitempty"`
	TaxExMathematicOperatorCode        string                        `protobuf:"bytes,34,opt,name=tax_ex_mathematic_operator_code,json=taxExMathematicOperatorCode,proto3" json:"tax_ex_mathematic_operator_code,omitempty"`
	TaxExDate                          string                        `protobuf:"bytes,35,opt,name=tax_ex_date,json=taxExDate,proto3" json:"tax_ex_date,omitempty"`
	PricingExSourceCurrencyCode        string                        `protobuf:"bytes,36,opt,name=pricing_ex_source_currency_code,json=pricingExSourceCurrencyCode,proto3" json:"pricing_ex_source_currency_code,omitempty"`
	PricingExSourceCurrencyBaseRate    string                        `protobuf:"bytes,37,opt,name=pricing_ex_source_currency_base_rate,json=pricingExSourceCurrencyBaseRate,proto3" json:"pricing_ex_source_currency_base_rate,omitempty"`
	PricingExTargetCurrencyCode        string                        `protobuf:"bytes,38,opt,name=pricing_ex_target_currency_code,json=pricingExTargetCurrencyCode,proto3" json:"pricing_ex_target_currency_code,omitempty"`
	PricingExTargetCurrencyBaseRate    string                        `protobuf:"bytes,39,opt,name=pricing_ex_target_currency_base_rate,json=pricingExTargetCurrencyBaseRate,proto3" json:"pricing_ex_target_currency_base_rate,omitempty"`
	PricingExExchangeMarketId          uint32                        `protobuf:"varint,40,opt,name=pricing_ex_exchange_market_id,json=pricingExExchangeMarketId,proto3" json:"pricing_ex_exchange_market_id,omitempty"`
	PricingExCalculationRate           float64                       `protobuf:"fixed64,41,opt,name=pricing_ex_calculation_rate,json=pricingExCalculationRate,proto3" json:"pricing_ex_calculation_rate,omitempty"`
	PricingExMathematicOperatorCode    string                        `protobuf:"bytes,42,opt,name=pricing_ex_mathematic_operator_code,json=pricingExMathematicOperatorCode,proto3" json:"pricing_ex_mathematic_operator_code,omitempty"`
	PricingExDate                      string                        `protobuf:"bytes,43,opt,name=pricing_ex_date,json=pricingExDate,proto3" json:"pricing_ex_date,omitempty"`
	PaymentExSourceCurrencyCode        string                        `protobuf:"bytes,44,opt,name=payment_ex_source_currency_code,json=paymentExSourceCurrencyCode,proto3" json:"payment_ex_source_currency_code,omitempty"`
	PaymentExSourceCurrencyBaseRate    string                        `protobuf:"bytes,45,opt,name=payment_ex_source_currency_base_rate,json=paymentExSourceCurrencyBaseRate,proto3" json:"payment_ex_source_currency_base_rate,omitempty"`
	PaymentExTargetCurrencyCode        string                        `protobuf:"bytes,46,opt,name=payment_ex_target_currency_code,json=paymentExTargetCurrencyCode,proto3" json:"payment_ex_target_currency_code,omitempty"`
	PaymentExTargetCurrencyBaseRate    string                        `protobuf:"bytes,47,opt,name=payment_ex_target_currency_base_rate,json=paymentExTargetCurrencyBaseRate,proto3" json:"payment_ex_target_currency_base_rate,omitempty"`
	PaymentExExchangeMarketId          uint32                        `protobuf:"varint,48,opt,name=payment_ex_exchange_market_id,json=paymentExExchangeMarketId,proto3" json:"payment_ex_exchange_market_id,omitempty"`
	PaymentExCalculationRate           float64                       `protobuf:"fixed64,49,opt,name=payment_ex_calculation_rate,json=paymentExCalculationRate,proto3" json:"payment_ex_calculation_rate,omitempty"`
	PaymentExMathematicOperatorCode    string                        `protobuf:"bytes,50,opt,name=payment_ex_mathematic_operator_code,json=paymentExMathematicOperatorCode,proto3" json:"payment_ex_mathematic_operator_code,omitempty"`
	PaymentExDate                      string                        `protobuf:"bytes,51,opt,name=payment_ex_date,json=paymentExDate,proto3" json:"payment_ex_date,omitempty"`
	PaymentAltExSourceCurrencyCode     string                        `protobuf:"bytes,52,opt,name=payment_alt_ex_source_currency_code,json=paymentAltExSourceCurrencyCode,proto3" json:"payment_alt_ex_source_currency_code,omitempty"`
	PaymentAltExSourceCurrencyBaseRate string                        `protobuf:"bytes,53,opt,name=payment_alt_ex_source_currency_base_rate,json=paymentAltExSourceCurrencyBaseRate,proto3" json:"payment_alt_ex_source_currency_base_rate,omitempty"`
	PaymentAltExTargetCurrencyCode     string                        `protobuf:"bytes,54,opt,name=payment_alt_ex_target_currency_code,json=paymentAltExTargetCurrencyCode,proto3" json:"payment_alt_ex_target_currency_code,omitempty"`
	PaymentAltExTargetCurrencyBaseRate string                        `protobuf:"bytes,55,opt,name=payment_alt_ex_target_currency_base_rate,json=paymentAltExTargetCurrencyBaseRate,proto3" json:"payment_alt_ex_target_currency_base_rate,omitempty"`
	PaymentAltExExchangeMarketId       uint32                        `protobuf:"varint,56,opt,name=payment_alt_ex_exchange_market_id,json=paymentAltExExchangeMarketId,proto3" json:"payment_alt_ex_exchange_market_id,omitempty"`
	PaymentAltExCalculationRate        float64                       `protobuf:"fixed64,57,opt,name=payment_alt_ex_calculation_rate,json=paymentAltExCalculationRate,proto3" json:"payment_alt_ex_calculation_rate,omitempty"`
	PaymentAltExMathematicOperatorCode string                        `protobuf:"bytes,58,opt,name=payment_alt_ex_mathematic_operator_code,json=paymentAltExMathematicOperatorCode,proto3" json:"payment_alt_ex_mathematic_operator_code,omitempty"`
	PaymentAltExDate                   string                        `protobuf:"bytes,59,opt,name=payment_alt_ex_date,json=paymentAltExDate,proto3" json:"payment_alt_ex_date,omitempty"`
	LineExtensionAmount                float64                       `protobuf:"fixed64,60,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TaxExclusiveAmount                 float64                       `protobuf:"fixed64,61,opt,name=tax_exclusive_amount,json=taxExclusiveAmount,proto3" json:"tax_exclusive_amount,omitempty"`
	TaxInclusiveAmount                 float64                       `protobuf:"fixed64,62,opt,name=tax_inclusive_amount,json=taxInclusiveAmount,proto3" json:"tax_inclusive_amount,omitempty"`
	AllowanceTotalAmount               float64                       `protobuf:"fixed64,63,opt,name=allowance_total_amount,json=allowanceTotalAmount,proto3" json:"allowance_total_amount,omitempty"`
	ChargeTotalAmount                  float64                       `protobuf:"fixed64,64,opt,name=charge_total_amount,json=chargeTotalAmount,proto3" json:"charge_total_amount,omitempty"`
	WithholdingTaxTotalAmount          float64                       `protobuf:"fixed64,65,opt,name=withholding_tax_total_amount,json=withholdingTaxTotalAmount,proto3" json:"withholding_tax_total_amount,omitempty"`
	PrepaidAmount                      float64                       `protobuf:"fixed64,66,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PayableRoundingAmount              float64                       `protobuf:"fixed64,67,opt,name=payable_rounding_amount,json=payableRoundingAmount,proto3" json:"payable_rounding_amount,omitempty"`
	PayableAmount                      float64                       `protobuf:"fixed64,68,opt,name=payable_amount,json=payableAmount,proto3" json:"payable_amount,omitempty"`
	PayableAlternativeAmount           float64                       `protobuf:"fixed64,69,opt,name=payable_alternative_amount,json=payableAlternativeAmount,proto3" json:"payable_alternative_amount,omitempty"`
	UserId                             string                        `protobuf:"bytes,70,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                          string                        `protobuf:"bytes,71,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                          string                        `protobuf:"bytes,72,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DebitNoteLines                     []*CreateDebitNoteLineRequest `protobuf:"bytes,74,rep,name=debit_note_lines,json=debitNoteLines,proto3" json:"debit_note_lines,omitempty"`
}

func (x *CreateDebitNoteHeaderRequest) Reset() {
	*x = CreateDebitNoteHeaderRequest{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitNoteHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitNoteHeaderRequest) ProtoMessage() {}

func (x *CreateDebitNoteHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitNoteHeaderRequest.ProtoReflect.Descriptor instead.
func (*CreateDebitNoteHeaderRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDebitNoteHeaderRequest) GetDnhId() string {
	if x != nil {
		return x.DnhId
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetTaxPointDate() string {
	if x != nil {
		return x.TaxPointDate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetDocumentCurrencyCode() string {
	if x != nil {
		return x.DocumentCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetTaxCurrencyCode() string {
	if x != nil {
		return x.TaxCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPricingCurrencyCode() string {
	if x != nil {
		return x.PricingCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentCurrencyCode() string {
	if x != nil {
		return x.PaymentCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentAltCurrencyCode() string {
	if x != nil {
		return x.PaymentAltCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetInvoicePeriodStartDate() string {
	if x != nil {
		return x.InvoicePeriodStartDate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetInvoicePeriodEndDate() string {
	if x != nil {
		return x.InvoicePeriodEndDate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetDiscrepancyResponse() string {
	if x != nil {
		return x.DiscrepancyResponse
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetBillingId() uint32 {
	if x != nil {
		return x.BillingId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetDespatchId() uint32 {
	if x != nil {
		return x.DespatchId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetReceiptId() uint32 {
	if x != nil {
		return x.ReceiptId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetStatementId() uint32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetContractId() uint32 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetAccountingSupplierPartyId() uint32 {
	if x != nil {
		return x.AccountingSupplierPartyId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetAccountingCustomerPartyId() uint32 {
	if x != nil {
		return x.AccountingCustomerPartyId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPayeePartyId() uint32 {
	if x != nil {
		return x.PayeePartyId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetTaxRepresentativePartyId() uint32 {
	if x != nil {
		return x.TaxRepresentativePartyId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetTaxExSourceCurrencyCode() string {
	if x != nil {
		return x.TaxExSourceCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetTaxExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetTaxExTargetCurrencyCode() string {
	if x != nil {
		return x.TaxExTargetCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetTaxExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetTaxExExchangeMarketId() uint32 {
	if x != nil {
		return x.TaxExExchangeMarketId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetTaxExCalculationRate() float64 {
	if x != nil {
		return x.TaxExCalculationRate
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetTaxExMathematicOperatorCode() string {
	if x != nil {
		return x.TaxExMathematicOperatorCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetTaxExDate() string {
	if x != nil {
		return x.TaxExDate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPricingExSourceCurrencyCode() string {
	if x != nil {
		return x.PricingExSourceCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPricingExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPricingExTargetCurrencyCode() string {
	if x != nil {
		return x.PricingExTargetCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPricingExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPricingExExchangeMarketId() uint32 {
	if x != nil {
		return x.PricingExExchangeMarketId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPricingExCalculationRate() float64 {
	if x != nil {
		return x.PricingExCalculationRate
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPricingExMathematicOperatorCode() string {
	if x != nil {
		return x.PricingExMathematicOperatorCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPricingExDate() string {
	if x != nil {
		return x.PricingExDate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentExSourceCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentExTargetCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentExExchangeMarketId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentExCalculationRate() float64 {
	if x != nil {
		return x.PaymentExCalculationRate
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentExMathematicOperatorCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentExDate() string {
	if x != nil {
		return x.PaymentExDate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentAltExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentAltExSourceCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentAltExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentAltExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentAltExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentAltExTargetCurrencyCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentAltExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentAltExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentAltExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentAltExExchangeMarketId
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentAltExCalculationRate() float64 {
	if x != nil {
		return x.PaymentAltExCalculationRate
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentAltExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentAltExMathematicOperatorCode
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetPaymentAltExDate() string {
	if x != nil {
		return x.PaymentAltExDate
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetTaxExclusiveAmount() float64 {
	if x != nil {
		return x.TaxExclusiveAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetTaxInclusiveAmount() float64 {
	if x != nil {
		return x.TaxInclusiveAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetAllowanceTotalAmount() float64 {
	if x != nil {
		return x.AllowanceTotalAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetChargeTotalAmount() float64 {
	if x != nil {
		return x.ChargeTotalAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetWithholdingTaxTotalAmount() float64 {
	if x != nil {
		return x.WithholdingTaxTotalAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPayableRoundingAmount() float64 {
	if x != nil {
		return x.PayableRoundingAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPayableAmount() float64 {
	if x != nil {
		return x.PayableAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetPayableAlternativeAmount() float64 {
	if x != nil {
		return x.PayableAlternativeAmount
	}
	return 0
}

func (x *CreateDebitNoteHeaderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateDebitNoteHeaderRequest) GetDebitNoteLines() []*CreateDebitNoteLineRequest {
	if x != nil {
		return x.DebitNoteLines
	}
	return nil
}

type CreateDebitNoteHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitNoteHeader *DebitNoteHeader `protobuf:"bytes,1,opt,name=debit_note_header,json=debitNoteHeader,proto3" json:"debit_note_header,omitempty"`
}

func (x *CreateDebitNoteHeaderResponse) Reset() {
	*x = CreateDebitNoteHeaderResponse{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitNoteHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitNoteHeaderResponse) ProtoMessage() {}

func (x *CreateDebitNoteHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitNoteHeaderResponse.ProtoReflect.Descriptor instead.
func (*CreateDebitNoteHeaderResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDebitNoteHeaderResponse) GetDebitNoteHeader() *DebitNoteHeader {
	if x != nil {
		return x.DebitNoteHeader
	}
	return nil
}

type UpdateDebitNoteHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note                  string  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	DocumentCurrencyCode  string  `protobuf:"bytes,2,opt,name=document_currency_code,json=documentCurrencyCode,proto3" json:"document_currency_code,omitempty"`
	AccountingCost        string  `protobuf:"bytes,3,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	ChargeTotalAmount     float64 `protobuf:"fixed64,4,opt,name=charge_total_amount,json=chargeTotalAmount,proto3" json:"charge_total_amount,omitempty"`
	PrepaidAmount         float64 `protobuf:"fixed64,5,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PayableRoundingAmount float64 `protobuf:"fixed64,6,opt,name=payable_rounding_amount,json=payableRoundingAmount,proto3" json:"payable_rounding_amount,omitempty"`
	PayableAmount         float64 `protobuf:"fixed64,7,opt,name=payable_amount,json=payableAmount,proto3" json:"payable_amount,omitempty"`
	Id                    string  `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	UserId                string  `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string  `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string  `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateDebitNoteHeaderRequest) Reset() {
	*x = UpdateDebitNoteHeaderRequest{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDebitNoteHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDebitNoteHeaderRequest) ProtoMessage() {}

func (x *UpdateDebitNoteHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDebitNoteHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateDebitNoteHeaderRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDebitNoteHeaderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateDebitNoteHeaderRequest) GetDocumentCurrencyCode() string {
	if x != nil {
		return x.DocumentCurrencyCode
	}
	return ""
}

func (x *UpdateDebitNoteHeaderRequest) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *UpdateDebitNoteHeaderRequest) GetChargeTotalAmount() float64 {
	if x != nil {
		return x.ChargeTotalAmount
	}
	return 0
}

func (x *UpdateDebitNoteHeaderRequest) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *UpdateDebitNoteHeaderRequest) GetPayableRoundingAmount() float64 {
	if x != nil {
		return x.PayableRoundingAmount
	}
	return 0
}

func (x *UpdateDebitNoteHeaderRequest) GetPayableAmount() float64 {
	if x != nil {
		return x.PayableAmount
	}
	return 0
}

func (x *UpdateDebitNoteHeaderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDebitNoteHeaderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateDebitNoteHeaderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateDebitNoteHeaderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateDebitNoteHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDebitNoteHeaderResponse) Reset() {
	*x = UpdateDebitNoteHeaderResponse{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDebitNoteHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDebitNoteHeaderResponse) ProtoMessage() {}

func (x *UpdateDebitNoteHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDebitNoteHeaderResponse.ProtoReflect.Descriptor instead.
func (*UpdateDebitNoteHeaderResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{6}
}

type GetDebitNoteHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetDebitNoteHeaderRequest) Reset() {
	*x = GetDebitNoteHeaderRequest{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitNoteHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitNoteHeaderRequest) ProtoMessage() {}

func (x *GetDebitNoteHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitNoteHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetDebitNoteHeaderRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{7}
}

func (x *GetDebitNoteHeaderRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetDebitNoteHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitNoteHeader *DebitNoteHeader `protobuf:"bytes,1,opt,name=debit_note_header,json=debitNoteHeader,proto3" json:"debit_note_header,omitempty"`
}

func (x *GetDebitNoteHeaderResponse) Reset() {
	*x = GetDebitNoteHeaderResponse{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitNoteHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitNoteHeaderResponse) ProtoMessage() {}

func (x *GetDebitNoteHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitNoteHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetDebitNoteHeaderResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{8}
}

func (x *GetDebitNoteHeaderResponse) GetDebitNoteHeader() *DebitNoteHeader {
	if x != nil {
		return x.DebitNoteHeader
	}
	return nil
}

type GetDebitNoteHeaderByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetDebitNoteHeaderByPkRequest) Reset() {
	*x = GetDebitNoteHeaderByPkRequest{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitNoteHeaderByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitNoteHeaderByPkRequest) ProtoMessage() {}

func (x *GetDebitNoteHeaderByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitNoteHeaderByPkRequest.ProtoReflect.Descriptor instead.
func (*GetDebitNoteHeaderByPkRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{9}
}

func (x *GetDebitNoteHeaderByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetDebitNoteHeaderByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitNoteHeader *DebitNoteHeader `protobuf:"bytes,1,opt,name=debit_note_header,json=debitNoteHeader,proto3" json:"debit_note_header,omitempty"`
}

func (x *GetDebitNoteHeaderByPkResponse) Reset() {
	*x = GetDebitNoteHeaderByPkResponse{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitNoteHeaderByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitNoteHeaderByPkResponse) ProtoMessage() {}

func (x *GetDebitNoteHeaderByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitNoteHeaderByPkResponse.ProtoReflect.Descriptor instead.
func (*GetDebitNoteHeaderByPkResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{10}
}

func (x *GetDebitNoteHeaderByPkResponse) GetDebitNoteHeader() *DebitNoteHeader {
	if x != nil {
		return x.DebitNoteHeader
	}
	return nil
}

type GetDebitNoteHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetDebitNoteHeadersRequest) Reset() {
	*x = GetDebitNoteHeadersRequest{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitNoteHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitNoteHeadersRequest) ProtoMessage() {}

func (x *GetDebitNoteHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitNoteHeadersRequest.ProtoReflect.Descriptor instead.
func (*GetDebitNoteHeadersRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{11}
}

func (x *GetDebitNoteHeadersRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetDebitNoteHeadersRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetDebitNoteHeadersRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetDebitNoteHeadersRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetDebitNoteHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitNoteHeaders []*DebitNoteHeader `protobuf:"bytes,1,rep,name=debit_note_headers,json=debitNoteHeaders,proto3" json:"debit_note_headers,omitempty"`
	NextCursor       string             `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetDebitNoteHeadersResponse) Reset() {
	*x = GetDebitNoteHeadersResponse{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitNoteHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitNoteHeadersResponse) ProtoMessage() {}

func (x *GetDebitNoteHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitNoteHeadersResponse.ProtoReflect.Descriptor instead.
func (*GetDebitNoteHeadersResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{12}
}

func (x *GetDebitNoteHeadersResponse) GetDebitNoteHeaders() []*DebitNoteHeader {
	if x != nil {
		return x.DebitNoteHeaders
	}
	return nil
}

func (x *GetDebitNoteHeadersResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type DebitNoteLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitNoteLineD *DebitNoteLineD `protobuf:"bytes,1,opt,name=debit_note_line_d,json=debitNoteLineD,proto3" json:"debit_note_line_d,omitempty"`
	DebitNoteLineT *DebitNoteLineT `protobuf:"bytes,2,opt,name=debit_note_line_t,json=debitNoteLineT,proto3" json:"debit_note_line_t,omitempty"`
	CrUpdUser      *v1.CrUpdUser   `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime      *v1.CrUpdTime   `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DebitNoteLine) Reset() {
	*x = DebitNoteLine{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitNoteLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitNoteLine) ProtoMessage() {}

func (x *DebitNoteLine) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitNoteLine.ProtoReflect.Descriptor instead.
func (*DebitNoteLine) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{13}
}

func (x *DebitNoteLine) GetDebitNoteLineD() *DebitNoteLineD {
	if x != nil {
		return x.DebitNoteLineD
	}
	return nil
}

func (x *DebitNoteLine) GetDebitNoteLineT() *DebitNoteLineT {
	if x != nil {
		return x.DebitNoteLineT
	}
	return nil
}

func (x *DebitNoteLine) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DebitNoteLine) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DebitNoteLineD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                   []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                     string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	DnlId                   string  `protobuf:"bytes,4,opt,name=dnl_id,json=dnlId,proto3" json:"dnl_id,omitempty"`
	Note                    string  `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	DebitedQuantity         float64 `protobuf:"fixed64,6,opt,name=debited_quantity,json=debitedQuantity,proto3" json:"debited_quantity,omitempty"`
	LineExtensionAmount     float64 `protobuf:"fixed64,7,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	AccountingCostCode      string  `protobuf:"bytes,8,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost          string  `protobuf:"bytes,9,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	PaymentPurposeCode      string  `protobuf:"bytes,10,opt,name=payment_purpose_code,json=paymentPurposeCode,proto3" json:"payment_purpose_code,omitempty"`
	DiscrepancyResponse     string  `protobuf:"bytes,11,opt,name=discrepancy_response,json=discrepancyResponse,proto3" json:"discrepancy_response,omitempty"`
	DespatchLineId          uint32  `protobuf:"varint,12,opt,name=despatch_line_id,json=despatchLineId,proto3" json:"despatch_line_id,omitempty"`
	ReceiptLineId           uint32  `protobuf:"varint,13,opt,name=receipt_line_id,json=receiptLineId,proto3" json:"receipt_line_id,omitempty"`
	BillingId               uint32  `protobuf:"varint,14,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	ItemId                  uint32  `protobuf:"varint,15,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PriceAmount             float64 `protobuf:"fixed64,16,opt,name=price_amount,json=priceAmount,proto3" json:"price_amount,omitempty"`
	PriceBaseQuantity       float64 `protobuf:"fixed64,17,opt,name=price_base_quantity,json=priceBaseQuantity,proto3" json:"price_base_quantity,omitempty"`
	PriceChangeReason       string  `protobuf:"bytes,18,opt,name=price_change_reason,json=priceChangeReason,proto3" json:"price_change_reason,omitempty"`
	PriceTypeCode           string  `protobuf:"bytes,19,opt,name=price_type_code,json=priceTypeCode,proto3" json:"price_type_code,omitempty"`
	PriceType               string  `protobuf:"bytes,20,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`
	OrderableUnitFactorRate float64 `protobuf:"fixed64,21,opt,name=orderable_unit_factor_rate,json=orderableUnitFactorRate,proto3" json:"orderable_unit_factor_rate,omitempty"`
	PriceListId             uint32  `protobuf:"varint,22,opt,name=price_list_id,json=priceListId,proto3" json:"price_list_id,omitempty"`
	DebitNoteHeaderId       uint32  `protobuf:"varint,23,opt,name=debit_note_header_id,json=debitNoteHeaderId,proto3" json:"debit_note_header_id,omitempty"`
}

func (x *DebitNoteLineD) Reset() {
	*x = DebitNoteLineD{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitNoteLineD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitNoteLineD) ProtoMessage() {}

func (x *DebitNoteLineD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitNoteLineD.ProtoReflect.Descriptor instead.
func (*DebitNoteLineD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{14}
}

func (x *DebitNoteLineD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DebitNoteLineD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DebitNoteLineD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DebitNoteLineD) GetDnlId() string {
	if x != nil {
		return x.DnlId
	}
	return ""
}

func (x *DebitNoteLineD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *DebitNoteLineD) GetDebitedQuantity() float64 {
	if x != nil {
		return x.DebitedQuantity
	}
	return 0
}

func (x *DebitNoteLineD) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *DebitNoteLineD) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *DebitNoteLineD) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *DebitNoteLineD) GetPaymentPurposeCode() string {
	if x != nil {
		return x.PaymentPurposeCode
	}
	return ""
}

func (x *DebitNoteLineD) GetDiscrepancyResponse() string {
	if x != nil {
		return x.DiscrepancyResponse
	}
	return ""
}

func (x *DebitNoteLineD) GetDespatchLineId() uint32 {
	if x != nil {
		return x.DespatchLineId
	}
	return 0
}

func (x *DebitNoteLineD) GetReceiptLineId() uint32 {
	if x != nil {
		return x.ReceiptLineId
	}
	return 0
}

func (x *DebitNoteLineD) GetBillingId() uint32 {
	if x != nil {
		return x.BillingId
	}
	return 0
}

func (x *DebitNoteLineD) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DebitNoteLineD) GetPriceAmount() float64 {
	if x != nil {
		return x.PriceAmount
	}
	return 0
}

func (x *DebitNoteLineD) GetPriceBaseQuantity() float64 {
	if x != nil {
		return x.PriceBaseQuantity
	}
	return 0
}

func (x *DebitNoteLineD) GetPriceChangeReason() string {
	if x != nil {
		return x.PriceChangeReason
	}
	return ""
}

func (x *DebitNoteLineD) GetPriceTypeCode() string {
	if x != nil {
		return x.PriceTypeCode
	}
	return ""
}

func (x *DebitNoteLineD) GetPriceType() string {
	if x != nil {
		return x.PriceType
	}
	return ""
}

func (x *DebitNoteLineD) GetOrderableUnitFactorRate() float64 {
	if x != nil {
		return x.OrderableUnitFactorRate
	}
	return 0
}

func (x *DebitNoteLineD) GetPriceListId() uint32 {
	if x != nil {
		return x.PriceListId
	}
	return 0
}

func (x *DebitNoteLineD) GetDebitNoteHeaderId() uint32 {
	if x != nil {
		return x.DebitNoteHeaderId
	}
	return 0
}

type DebitNoteLineT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxPointDate                 *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=tax_point_date,json=taxPointDate,proto3" json:"tax_point_date,omitempty"`
	PriceValidityPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=price_validity_period_start_date,json=priceValidityPeriodStartDate,proto3" json:"price_validity_period_start_date,omitempty"`
	PriceValidityPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=price_validity_period_end_date,json=priceValidityPeriodEndDate,proto3" json:"price_validity_period_end_date,omitempty"`
}

func (x *DebitNoteLineT) Reset() {
	*x = DebitNoteLineT{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitNoteLineT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitNoteLineT) ProtoMessage() {}

func (x *DebitNoteLineT) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitNoteLineT.ProtoReflect.Descriptor instead.
func (*DebitNoteLineT) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{15}
}

func (x *DebitNoteLineT) GetTaxPointDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TaxPointDate
	}
	return nil
}

func (x *DebitNoteLineT) GetPriceValidityPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PriceValidityPeriodStartDate
	}
	return nil
}

func (x *DebitNoteLineT) GetPriceValidityPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PriceValidityPeriodEndDate
	}
	return nil
}

type CreateDebitNoteLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnlId                        string  `protobuf:"bytes,1,opt,name=dnl_id,json=dnlId,proto3" json:"dnl_id,omitempty"`
	Note                         string  `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	DebitedQuantity              float64 `protobuf:"fixed64,3,opt,name=debited_quantity,json=debitedQuantity,proto3" json:"debited_quantity,omitempty"`
	LineExtensionAmount          float64 `protobuf:"fixed64,4,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TaxPointDate                 string  `protobuf:"bytes,5,opt,name=tax_point_date,json=taxPointDate,proto3" json:"tax_point_date,omitempty"`
	AccountingCostCode           string  `protobuf:"bytes,6,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost               string  `protobuf:"bytes,7,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	PaymentPurposeCode           string  `protobuf:"bytes,8,opt,name=payment_purpose_code,json=paymentPurposeCode,proto3" json:"payment_purpose_code,omitempty"`
	DiscrepancyResponse          string  `protobuf:"bytes,9,opt,name=discrepancy_response,json=discrepancyResponse,proto3" json:"discrepancy_response,omitempty"`
	DespatchLineId               uint32  `protobuf:"varint,10,opt,name=despatch_line_id,json=despatchLineId,proto3" json:"despatch_line_id,omitempty"`
	ReceiptLineId                uint32  `protobuf:"varint,11,opt,name=receipt_line_id,json=receiptLineId,proto3" json:"receipt_line_id,omitempty"`
	BillingId                    uint32  `protobuf:"varint,12,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	ItemId                       uint32  `protobuf:"varint,13,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PriceAmount                  float64 `protobuf:"fixed64,14,opt,name=price_amount,json=priceAmount,proto3" json:"price_amount,omitempty"`
	PriceBaseQuantity            float64 `protobuf:"fixed64,15,opt,name=price_base_quantity,json=priceBaseQuantity,proto3" json:"price_base_quantity,omitempty"`
	PriceChangeReason            string  `protobuf:"bytes,16,opt,name=price_change_reason,json=priceChangeReason,proto3" json:"price_change_reason,omitempty"`
	PriceTypeCode                string  `protobuf:"bytes,17,opt,name=price_type_code,json=priceTypeCode,proto3" json:"price_type_code,omitempty"`
	PriceType                    string  `protobuf:"bytes,18,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`
	OrderableUnitFactorRate      float64 `protobuf:"fixed64,19,opt,name=orderable_unit_factor_rate,json=orderableUnitFactorRate,proto3" json:"orderable_unit_factor_rate,omitempty"`
	PriceValidityPeriodStartDate string  `protobuf:"bytes,20,opt,name=price_validity_period_start_date,json=priceValidityPeriodStartDate,proto3" json:"price_validity_period_start_date,omitempty"`
	PriceValidityPeriodEndDate   string  `protobuf:"bytes,21,opt,name=price_validity_period_end_date,json=priceValidityPeriodEndDate,proto3" json:"price_validity_period_end_date,omitempty"`
	PriceListId                  uint32  `protobuf:"varint,22,opt,name=price_list_id,json=priceListId,proto3" json:"price_list_id,omitempty"`
	DebitNoteHeaderId            uint32  `protobuf:"varint,23,opt,name=debit_note_header_id,json=debitNoteHeaderId,proto3" json:"debit_note_header_id,omitempty"`
	UserId                       string  `protobuf:"bytes,24,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string  `protobuf:"bytes,25,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string  `protobuf:"bytes,26,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDebitNoteLineRequest) Reset() {
	*x = CreateDebitNoteLineRequest{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitNoteLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitNoteLineRequest) ProtoMessage() {}

func (x *CreateDebitNoteLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitNoteLineRequest.ProtoReflect.Descriptor instead.
func (*CreateDebitNoteLineRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{16}
}

func (x *CreateDebitNoteLineRequest) GetDnlId() string {
	if x != nil {
		return x.DnlId
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetDebitedQuantity() float64 {
	if x != nil {
		return x.DebitedQuantity
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetTaxPointDate() string {
	if x != nil {
		return x.TaxPointDate
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetPaymentPurposeCode() string {
	if x != nil {
		return x.PaymentPurposeCode
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetDiscrepancyResponse() string {
	if x != nil {
		return x.DiscrepancyResponse
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetDespatchLineId() uint32 {
	if x != nil {
		return x.DespatchLineId
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetReceiptLineId() uint32 {
	if x != nil {
		return x.ReceiptLineId
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetBillingId() uint32 {
	if x != nil {
		return x.BillingId
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetPriceAmount() float64 {
	if x != nil {
		return x.PriceAmount
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetPriceBaseQuantity() float64 {
	if x != nil {
		return x.PriceBaseQuantity
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetPriceChangeReason() string {
	if x != nil {
		return x.PriceChangeReason
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetPriceTypeCode() string {
	if x != nil {
		return x.PriceTypeCode
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetPriceType() string {
	if x != nil {
		return x.PriceType
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetOrderableUnitFactorRate() float64 {
	if x != nil {
		return x.OrderableUnitFactorRate
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetPriceValidityPeriodStartDate() string {
	if x != nil {
		return x.PriceValidityPeriodStartDate
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetPriceValidityPeriodEndDate() string {
	if x != nil {
		return x.PriceValidityPeriodEndDate
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetPriceListId() uint32 {
	if x != nil {
		return x.PriceListId
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetDebitNoteHeaderId() uint32 {
	if x != nil {
		return x.DebitNoteHeaderId
	}
	return 0
}

func (x *CreateDebitNoteLineRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDebitNoteLineRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDebitNoteLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitNoteLine *DebitNoteLine `protobuf:"bytes,1,opt,name=debit_note_line,json=debitNoteLine,proto3" json:"debit_note_line,omitempty"`
}

func (x *CreateDebitNoteLineResponse) Reset() {
	*x = CreateDebitNoteLineResponse{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebitNoteLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebitNoteLineResponse) ProtoMessage() {}

func (x *CreateDebitNoteLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebitNoteLineResponse.ProtoReflect.Descriptor instead.
func (*CreateDebitNoteLineResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{17}
}

func (x *CreateDebitNoteLineResponse) GetDebitNoteLine() *DebitNoteLine {
	if x != nil {
		return x.DebitNoteLine
	}
	return nil
}

type GetDebitNoteLinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetDebitNoteLinesRequest) Reset() {
	*x = GetDebitNoteLinesRequest{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitNoteLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitNoteLinesRequest) ProtoMessage() {}

func (x *GetDebitNoteLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitNoteLinesRequest.ProtoReflect.Descriptor instead.
func (*GetDebitNoteLinesRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{18}
}

func (x *GetDebitNoteLinesRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetDebitNoteLinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitNoteLines []*DebitNoteLine `protobuf:"bytes,1,rep,name=debit_note_lines,json=debitNoteLines,proto3" json:"debit_note_lines,omitempty"`
}

func (x *GetDebitNoteLinesResponse) Reset() {
	*x = GetDebitNoteLinesResponse{}
	mi := &file_invoice_v1_debitnote_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebitNoteLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebitNoteLinesResponse) ProtoMessage() {}

func (x *GetDebitNoteLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_debitnote_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebitNoteLinesResponse.ProtoReflect.Descriptor instead.
func (*GetDebitNoteLinesResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_debitnote_proto_rawDescGZIP(), []int{19}
}

func (x *GetDebitNoteLinesResponse) GetDebitNoteLines() []*DebitNoteLine {
	if x != nil {
		return x.DebitNoteLines
	}
	return nil
}

var File_invoice_v1_debitnote_proto protoreflect.FileDescriptor

var file_invoice_v1_debitnote_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x6e, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x97, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44,
	0x52, 0x10, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x44, 0x12, 0x4b, 0x0a, 0x13, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x52, 0x10, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xac, 0x1c, 0x0a, 0x10,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6e, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6e, 0x68, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61,
	0x78, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x61, 0x79, 0x65, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x74,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x74, 0x61, 0x78, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61,
	0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x74, 0x61, 0x78, 0x5f,
	0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x20, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x61, 0x78, 0x45, 0x78, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x74, 0x61, 0x78, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f,
	0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x74, 0x61, 0x78, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x4d, 0x61,
	0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4d, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61,
	0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a,
	0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x28, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x4b, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f,
	0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a,
	0x28, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c,
	0x74, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c,
	0x74, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45,
	0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x61, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x61, 0x78, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x61, 0x78,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x77, 0x69, 0x74,
	0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a,
	0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x18, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc8, 0x04, 0x0a, 0x10, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x12,
	0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x61,
	0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x74, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x19,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x61, 0x78, 0x45, 0x78, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45,
	0x78, 0x44, 0x61, 0x74, 0x65, 0x22, 0xfe, 0x1f, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6e, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6e, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x78, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x65, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x61, 0x78, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x20,
	0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x20, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78,
	0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x61, 0x78, 0x5f,
	0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x61, 0x78,
	0x45, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x61, 0x78, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x61, 0x78,
	0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x18, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74,
	0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54,
	0x0a, 0x28, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x54, 0x0a, 0x28, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74,
	0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45,
	0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f,
	0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6c, 0x74, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x61,
	0x78, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x74, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19,
	0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x4a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0xae, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x61,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x53, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x65,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x91, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x10, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x22, 0x89, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x12, 0x45, 0x0a, 0x11, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54,
	0x52, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf9, 0x06, 0x0a,
	0x0e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6e, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6e, 0x6c, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32,
	0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x31, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x12, 0x40, 0x0a, 0x0e, 0x74,
	0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x74, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a,
	0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x1c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x5e, 0x0a, 0x1e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xd5, 0x08, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x6e, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x65, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61,
	0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x65,
	0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x52, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x60, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x10,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x32, 0xfc, 0x05, 0x0a, 0x16, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50,
	0x6b, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x26, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75, 0x62,
	0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_invoice_v1_debitnote_proto_rawDescOnce sync.Once
	file_invoice_v1_debitnote_proto_rawDescData = file_invoice_v1_debitnote_proto_rawDesc
)

func file_invoice_v1_debitnote_proto_rawDescGZIP() []byte {
	file_invoice_v1_debitnote_proto_rawDescOnce.Do(func() {
		file_invoice_v1_debitnote_proto_rawDescData = protoimpl.X.CompressGZIP(file_invoice_v1_debitnote_proto_rawDescData)
	})
	return file_invoice_v1_debitnote_proto_rawDescData
}

var file_invoice_v1_debitnote_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_invoice_v1_debitnote_proto_goTypes = []any{
	(*DebitNoteHeader)(nil),                // 0: invoice.v1.DebitNoteHeader
	(*DebitNoteHeaderD)(nil),               // 1: invoice.v1.DebitNoteHeaderD
	(*DebitNoteHeaderT)(nil),               // 2: invoice.v1.DebitNoteHeaderT
	(*CreateDebitNoteHeaderRequest)(nil),   // 3: invoice.v1.CreateDebitNoteHeaderRequest
	(*CreateDebitNoteHeaderResponse)(nil),  // 4: invoice.v1.CreateDebitNoteHeaderResponse
	(*UpdateDebitNoteHeaderRequest)(nil),   // 5: invoice.v1.UpdateDebitNoteHeaderRequest
	(*UpdateDebitNoteHeaderResponse)(nil),  // 6: invoice.v1.UpdateDebitNoteHeaderResponse
	(*GetDebitNoteHeaderRequest)(nil),      // 7: invoice.v1.GetDebitNoteHeaderRequest
	(*GetDebitNoteHeaderResponse)(nil),     // 8: invoice.v1.GetDebitNoteHeaderResponse
	(*GetDebitNoteHeaderByPkRequest)(nil),  // 9: invoice.v1.GetDebitNoteHeaderByPkRequest
	(*GetDebitNoteHeaderByPkResponse)(nil), // 10: invoice.v1.GetDebitNoteHeaderByPkResponse
	(*GetDebitNoteHeadersRequest)(nil),     // 11: invoice.v1.GetDebitNoteHeadersRequest
	(*GetDebitNoteHeadersResponse)(nil),    // 12: invoice.v1.GetDebitNoteHeadersResponse
	(*DebitNoteLine)(nil),                  // 13: invoice.v1.DebitNoteLine
	(*DebitNoteLineD)(nil),                 // 14: invoice.v1.DebitNoteLineD
	(*DebitNoteLineT)(nil),                 // 15: invoice.v1.DebitNoteLineT
	(*CreateDebitNoteLineRequest)(nil),     // 16: invoice.v1.CreateDebitNoteLineRequest
	(*CreateDebitNoteLineResponse)(nil),    // 17: invoice.v1.CreateDebitNoteLineResponse
	(*GetDebitNoteLinesRequest)(nil),       // 18: invoice.v1.GetDebitNoteLinesRequest
	(*GetDebitNoteLinesResponse)(nil),      // 19: invoice.v1.GetDebitNoteLinesResponse
	(*v1.CrUpdUser)(nil),                   // 20: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                   // 21: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),          // 22: google.protobuf.Timestamp
	(*v1.GetRequest)(nil),                  // 23: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),              // 24: common.v1.GetByIdRequest
}
var file_invoice_v1_debitnote_proto_depIdxs = []int32{
	1,  // 0: invoice.v1.DebitNoteHeader.debit_note_header_d:type_name -> invoice.v1.DebitNoteHeaderD
	2,  // 1: invoice.v1.DebitNoteHeader.debit_note_header_t:type_name -> invoice.v1.DebitNoteHeaderT
	20, // 2: invoice.v1.DebitNoteHeader.cr_upd_user:type_name -> common.v1.CrUpdUser
	21, // 3: invoice.v1.DebitNoteHeader.cr_upd_time:type_name -> common.v1.CrUpdTime
	22, // 4: invoice.v1.DebitNoteHeaderT.issue_date:type_name -> google.protobuf.Timestamp
	22, // 5: invoice.v1.DebitNoteHeaderT.tax_point_date:type_name -> google.protobuf.Timestamp
	22, // 6: invoice.v1.DebitNoteHeaderT.invoice_period_start_date:type_name -> google.protobuf.Timestamp
	22, // 7: invoice.v1.DebitNoteHeaderT.invoice_period_end_date:type_name -> google.protobuf.Timestamp
	22, // 8: invoice.v1.DebitNoteHeaderT.tax_ex_date:type_name -> google.protobuf.Timestamp
	22, // 9: invoice.v1.DebitNoteHeaderT.pricing_ex_date:type_name -> google.protobuf.Timestamp
	22, // 10: invoice.v1.DebitNoteHeaderT.payment_ex_date:type_name -> google.protobuf.Timestamp
	22, // 11: invoice.v1.DebitNoteHeaderT.payment_alt_ex_date:type_name -> google.protobuf.Timestamp
	16, // 12: invoice.v1.CreateDebitNoteHeaderRequest.debit_note_lines:type_name -> invoice.v1.CreateDebitNoteLineRequest
	0,  // 13: invoice.v1.CreateDebitNoteHeaderResponse.debit_note_header:type_name -> invoice.v1.DebitNoteHeader
	23, // 14: invoice.v1.GetDebitNoteHeaderRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 15: invoice.v1.GetDebitNoteHeaderResponse.debit_note_header:type_name -> invoice.v1.DebitNoteHeader
	24, // 16: invoice.v1.GetDebitNoteHeaderByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 17: invoice.v1.GetDebitNoteHeaderByPkResponse.debit_note_header:type_name -> invoice.v1.DebitNoteHeader
	0,  // 18: invoice.v1.GetDebitNoteHeadersResponse.debit_note_headers:type_name -> invoice.v1.DebitNoteHeader
	14, // 19: invoice.v1.DebitNoteLine.debit_note_line_d:type_name -> invoice.v1.DebitNoteLineD
	15, // 20: invoice.v1.DebitNoteLine.debit_note_line_t:type_name -> invoice.v1.DebitNoteLineT
	20, // 21: invoice.v1.DebitNoteLine.cr_upd_user:type_name -> common.v1.CrUpdUser
	21, // 22: invoice.v1.DebitNoteLine.cr_upd_time:type_name -> common.v1.CrUpdTime
	22, // 23: invoice.v1.DebitNoteLineT.tax_point_date:type_name -> google.protobuf.Timestamp
	22, // 24: invoice.v1.DebitNoteLineT.price_validity_period_start_date:type_name -> google.protobuf.Timestamp
	22, // 25: invoice.v1.DebitNoteLineT.price_validity_period_end_date:type_name -> google.protobuf.Timestamp
	13, // 26: invoice.v1.CreateDebitNoteLineResponse.debit_note_line:type_name -> invoice.v1.DebitNoteLine
	23, // 27: invoice.v1.GetDebitNoteLinesRequest.get_request:type_name -> common.v1.GetRequest
	13, // 28: invoice.v1.GetDebitNoteLinesResponse.debit_note_lines:type_name -> invoice.v1.DebitNoteLine
	3,  // 29: invoice.v1.DebitNoteHeaderService.CreateDebitNoteHeader:input_type -> invoice.v1.CreateDebitNoteHeaderRequest
	11, // 30: invoice.v1.DebitNoteHeaderService.GetDebitNoteHeaders:input_type -> invoice.v1.GetDebitNoteHeadersRequest
	7,  // 31: invoice.v1.DebitNoteHeaderService.GetDebitNoteHeader:input_type -> invoice.v1.GetDebitNoteHeaderRequest
	9,  // 32: invoice.v1.DebitNoteHeaderService.GetDebitNoteHeaderByPk:input_type -> invoice.v1.GetDebitNoteHeaderByPkRequest
	16, // 33: invoice.v1.DebitNoteHeaderService.CreateDebitNoteLine:input_type -> invoice.v1.CreateDebitNoteLineRequest
	18, // 34: invoice.v1.DebitNoteHeaderService.GetDebitNoteLines:input_type -> invoice.v1.GetDebitNoteLinesRequest
	5,  // 35: invoice.v1.DebitNoteHeaderService.UpdateDebitNoteHeader:input_type -> invoice.v1.UpdateDebitNoteHeaderRequest
	4,  // 36: invoice.v1.DebitNoteHeaderService.CreateDebitNoteHeader:output_type -> invoice.v1.CreateDebitNoteHeaderResponse
	12, // 37: invoice.v1.DebitNoteHeaderService.GetDebitNoteHeaders:output_type -> invoice.v1.GetDebitNoteHeadersResponse
	8,  // 38: invoice.v1.DebitNoteHeaderService.GetDebitNoteHeader:output_type -> invoice.v1.GetDebitNoteHeaderResponse
	10, // 39: invoice.v1.DebitNoteHeaderService.GetDebitNoteHeaderByPk:output_type -> invoice.v1.GetDebitNoteHeaderByPkResponse
	17, // 40: invoice.v1.DebitNoteHeaderService.CreateDebitNoteLine:output_type -> invoice.v1.CreateDebitNoteLineResponse
	19, // 41: invoice.v1.DebitNoteHeaderService.GetDebitNoteLines:output_type -> invoice.v1.GetDebitNoteLinesResponse
	6,  // 42: invoice.v1.DebitNoteHeaderService.UpdateDebitNoteHeader:output_type -> invoice.v1.UpdateDebitNoteHeaderResponse
	36, // [36:43] is the sub-list for method output_type
	29, // [29:36] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_invoice_v1_debitnote_proto_init() }
func file_invoice_v1_debitnote_proto_init() {
	if File_invoice_v1_debitnote_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_invoice_v1_debitnote_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_invoice_v1_debitnote_proto_goTypes,
		DependencyIndexes: file_invoice_v1_debitnote_proto_depIdxs,
		MessageInfos:      file_invoice_v1_debitnote_proto_msgTypes,
	}.Build()
	File_invoice_v1_debitnote_proto = out.File
	file_invoice_v1_debitnote_proto_rawDesc = nil
	file_invoice_v1_debitnote_proto_goTypes = nil
	file_invoice_v1_debitnote_proto_depIdxs = nil
}
