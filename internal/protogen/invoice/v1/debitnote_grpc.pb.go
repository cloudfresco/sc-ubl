// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: invoice/v1/debitnote.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DebitNoteHeaderService_CreateDebitNoteHeader_FullMethodName  = "/invoice.v1.DebitNoteHeaderService/CreateDebitNoteHeader"
	DebitNoteHeaderService_GetDebitNoteHeaders_FullMethodName    = "/invoice.v1.DebitNoteHeaderService/GetDebitNoteHeaders"
	DebitNoteHeaderService_GetDebitNoteHeader_FullMethodName     = "/invoice.v1.DebitNoteHeaderService/GetDebitNoteHeader"
	DebitNoteHeaderService_GetDebitNoteHeaderByPk_FullMethodName = "/invoice.v1.DebitNoteHeaderService/GetDebitNoteHeaderByPk"
	DebitNoteHeaderService_CreateDebitNoteLine_FullMethodName    = "/invoice.v1.DebitNoteHeaderService/CreateDebitNoteLine"
	DebitNoteHeaderService_GetDebitNoteLines_FullMethodName      = "/invoice.v1.DebitNoteHeaderService/GetDebitNoteLines"
	DebitNoteHeaderService_UpdateDebitNoteHeader_FullMethodName  = "/invoice.v1.DebitNoteHeaderService/UpdateDebitNoteHeader"
)

// DebitNoteHeaderServiceClient is the client API for DebitNoteHeaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The DebitNoteHeaderService service definition.
type DebitNoteHeaderServiceClient interface {
	CreateDebitNoteHeader(ctx context.Context, in *CreateDebitNoteHeaderRequest, opts ...grpc.CallOption) (*CreateDebitNoteHeaderResponse, error)
	GetDebitNoteHeaders(ctx context.Context, in *GetDebitNoteHeadersRequest, opts ...grpc.CallOption) (*GetDebitNoteHeadersResponse, error)
	GetDebitNoteHeader(ctx context.Context, in *GetDebitNoteHeaderRequest, opts ...grpc.CallOption) (*GetDebitNoteHeaderResponse, error)
	GetDebitNoteHeaderByPk(ctx context.Context, in *GetDebitNoteHeaderByPkRequest, opts ...grpc.CallOption) (*GetDebitNoteHeaderByPkResponse, error)
	CreateDebitNoteLine(ctx context.Context, in *CreateDebitNoteLineRequest, opts ...grpc.CallOption) (*CreateDebitNoteLineResponse, error)
	GetDebitNoteLines(ctx context.Context, in *GetDebitNoteLinesRequest, opts ...grpc.CallOption) (*GetDebitNoteLinesResponse, error)
	UpdateDebitNoteHeader(ctx context.Context, in *UpdateDebitNoteHeaderRequest, opts ...grpc.CallOption) (*UpdateDebitNoteHeaderResponse, error)
}

type debitNoteHeaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebitNoteHeaderServiceClient(cc grpc.ClientConnInterface) DebitNoteHeaderServiceClient {
	return &debitNoteHeaderServiceClient{cc}
}

func (c *debitNoteHeaderServiceClient) CreateDebitNoteHeader(ctx context.Context, in *CreateDebitNoteHeaderRequest, opts ...grpc.CallOption) (*CreateDebitNoteHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDebitNoteHeaderResponse)
	err := c.cc.Invoke(ctx, DebitNoteHeaderService_CreateDebitNoteHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNoteHeaderServiceClient) GetDebitNoteHeaders(ctx context.Context, in *GetDebitNoteHeadersRequest, opts ...grpc.CallOption) (*GetDebitNoteHeadersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDebitNoteHeadersResponse)
	err := c.cc.Invoke(ctx, DebitNoteHeaderService_GetDebitNoteHeaders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNoteHeaderServiceClient) GetDebitNoteHeader(ctx context.Context, in *GetDebitNoteHeaderRequest, opts ...grpc.CallOption) (*GetDebitNoteHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDebitNoteHeaderResponse)
	err := c.cc.Invoke(ctx, DebitNoteHeaderService_GetDebitNoteHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNoteHeaderServiceClient) GetDebitNoteHeaderByPk(ctx context.Context, in *GetDebitNoteHeaderByPkRequest, opts ...grpc.CallOption) (*GetDebitNoteHeaderByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDebitNoteHeaderByPkResponse)
	err := c.cc.Invoke(ctx, DebitNoteHeaderService_GetDebitNoteHeaderByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNoteHeaderServiceClient) CreateDebitNoteLine(ctx context.Context, in *CreateDebitNoteLineRequest, opts ...grpc.CallOption) (*CreateDebitNoteLineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDebitNoteLineResponse)
	err := c.cc.Invoke(ctx, DebitNoteHeaderService_CreateDebitNoteLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNoteHeaderServiceClient) GetDebitNoteLines(ctx context.Context, in *GetDebitNoteLinesRequest, opts ...grpc.CallOption) (*GetDebitNoteLinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDebitNoteLinesResponse)
	err := c.cc.Invoke(ctx, DebitNoteHeaderService_GetDebitNoteLines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNoteHeaderServiceClient) UpdateDebitNoteHeader(ctx context.Context, in *UpdateDebitNoteHeaderRequest, opts ...grpc.CallOption) (*UpdateDebitNoteHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDebitNoteHeaderResponse)
	err := c.cc.Invoke(ctx, DebitNoteHeaderService_UpdateDebitNoteHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebitNoteHeaderServiceServer is the server API for DebitNoteHeaderService service.
// All implementations must embed UnimplementedDebitNoteHeaderServiceServer
// for forward compatibility.
//
// The DebitNoteHeaderService service definition.
type DebitNoteHeaderServiceServer interface {
	CreateDebitNoteHeader(context.Context, *CreateDebitNoteHeaderRequest) (*CreateDebitNoteHeaderResponse, error)
	GetDebitNoteHeaders(context.Context, *GetDebitNoteHeadersRequest) (*GetDebitNoteHeadersResponse, error)
	GetDebitNoteHeader(context.Context, *GetDebitNoteHeaderRequest) (*GetDebitNoteHeaderResponse, error)
	GetDebitNoteHeaderByPk(context.Context, *GetDebitNoteHeaderByPkRequest) (*GetDebitNoteHeaderByPkResponse, error)
	CreateDebitNoteLine(context.Context, *CreateDebitNoteLineRequest) (*CreateDebitNoteLineResponse, error)
	GetDebitNoteLines(context.Context, *GetDebitNoteLinesRequest) (*GetDebitNoteLinesResponse, error)
	UpdateDebitNoteHeader(context.Context, *UpdateDebitNoteHeaderRequest) (*UpdateDebitNoteHeaderResponse, error)
	mustEmbedUnimplementedDebitNoteHeaderServiceServer()
}

// UnimplementedDebitNoteHeaderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDebitNoteHeaderServiceServer struct{}

func (UnimplementedDebitNoteHeaderServiceServer) CreateDebitNoteHeader(context.Context, *CreateDebitNoteHeaderRequest) (*CreateDebitNoteHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebitNoteHeader not implemented")
}
func (UnimplementedDebitNoteHeaderServiceServer) GetDebitNoteHeaders(context.Context, *GetDebitNoteHeadersRequest) (*GetDebitNoteHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebitNoteHeaders not implemented")
}
func (UnimplementedDebitNoteHeaderServiceServer) GetDebitNoteHeader(context.Context, *GetDebitNoteHeaderRequest) (*GetDebitNoteHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebitNoteHeader not implemented")
}
func (UnimplementedDebitNoteHeaderServiceServer) GetDebitNoteHeaderByPk(context.Context, *GetDebitNoteHeaderByPkRequest) (*GetDebitNoteHeaderByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebitNoteHeaderByPk not implemented")
}
func (UnimplementedDebitNoteHeaderServiceServer) CreateDebitNoteLine(context.Context, *CreateDebitNoteLineRequest) (*CreateDebitNoteLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebitNoteLine not implemented")
}
func (UnimplementedDebitNoteHeaderServiceServer) GetDebitNoteLines(context.Context, *GetDebitNoteLinesRequest) (*GetDebitNoteLinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebitNoteLines not implemented")
}
func (UnimplementedDebitNoteHeaderServiceServer) UpdateDebitNoteHeader(context.Context, *UpdateDebitNoteHeaderRequest) (*UpdateDebitNoteHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDebitNoteHeader not implemented")
}
func (UnimplementedDebitNoteHeaderServiceServer) mustEmbedUnimplementedDebitNoteHeaderServiceServer() {
}
func (UnimplementedDebitNoteHeaderServiceServer) testEmbeddedByValue() {}

// UnsafeDebitNoteHeaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebitNoteHeaderServiceServer will
// result in compilation errors.
type UnsafeDebitNoteHeaderServiceServer interface {
	mustEmbedUnimplementedDebitNoteHeaderServiceServer()
}

func RegisterDebitNoteHeaderServiceServer(s grpc.ServiceRegistrar, srv DebitNoteHeaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedDebitNoteHeaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DebitNoteHeaderService_ServiceDesc, srv)
}

func _DebitNoteHeaderService_CreateDebitNoteHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebitNoteHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebitNoteHeaderServiceServer).CreateDebitNoteHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebitNoteHeaderService_CreateDebitNoteHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebitNoteHeaderServiceServer).CreateDebitNoteHeader(ctx, req.(*CreateDebitNoteHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebitNoteHeaderService_GetDebitNoteHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebitNoteHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebitNoteHeaderServiceServer).GetDebitNoteHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebitNoteHeaderService_GetDebitNoteHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebitNoteHeaderServiceServer).GetDebitNoteHeaders(ctx, req.(*GetDebitNoteHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebitNoteHeaderService_GetDebitNoteHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebitNoteHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebitNoteHeaderServiceServer).GetDebitNoteHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebitNoteHeaderService_GetDebitNoteHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebitNoteHeaderServiceServer).GetDebitNoteHeader(ctx, req.(*GetDebitNoteHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebitNoteHeaderService_GetDebitNoteHeaderByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebitNoteHeaderByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebitNoteHeaderServiceServer).GetDebitNoteHeaderByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebitNoteHeaderService_GetDebitNoteHeaderByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebitNoteHeaderServiceServer).GetDebitNoteHeaderByPk(ctx, req.(*GetDebitNoteHeaderByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebitNoteHeaderService_CreateDebitNoteLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebitNoteLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebitNoteHeaderServiceServer).CreateDebitNoteLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebitNoteHeaderService_CreateDebitNoteLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebitNoteHeaderServiceServer).CreateDebitNoteLine(ctx, req.(*CreateDebitNoteLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebitNoteHeaderService_GetDebitNoteLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebitNoteLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebitNoteHeaderServiceServer).GetDebitNoteLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebitNoteHeaderService_GetDebitNoteLines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebitNoteHeaderServiceServer).GetDebitNoteLines(ctx, req.(*GetDebitNoteLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebitNoteHeaderService_UpdateDebitNoteHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDebitNoteHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebitNoteHeaderServiceServer).UpdateDebitNoteHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebitNoteHeaderService_UpdateDebitNoteHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebitNoteHeaderServiceServer).UpdateDebitNoteHeader(ctx, req.(*UpdateDebitNoteHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DebitNoteHeaderService_ServiceDesc is the grpc.ServiceDesc for DebitNoteHeaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebitNoteHeaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invoice.v1.DebitNoteHeaderService",
	HandlerType: (*DebitNoteHeaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDebitNoteHeader",
			Handler:    _DebitNoteHeaderService_CreateDebitNoteHeader_Handler,
		},
		{
			MethodName: "GetDebitNoteHeaders",
			Handler:    _DebitNoteHeaderService_GetDebitNoteHeaders_Handler,
		},
		{
			MethodName: "GetDebitNoteHeader",
			Handler:    _DebitNoteHeaderService_GetDebitNoteHeader_Handler,
		},
		{
			MethodName: "GetDebitNoteHeaderByPk",
			Handler:    _DebitNoteHeaderService_GetDebitNoteHeaderByPk_Handler,
		},
		{
			MethodName: "CreateDebitNoteLine",
			Handler:    _DebitNoteHeaderService_CreateDebitNoteLine_Handler,
		},
		{
			MethodName: "GetDebitNoteLines",
			Handler:    _DebitNoteHeaderService_GetDebitNoteLines_Handler,
		},
		{
			MethodName: "UpdateDebitNoteHeader",
			Handler:    _DebitNoteHeaderService_UpdateDebitNoteHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoice/v1/debitnote.proto",
}
