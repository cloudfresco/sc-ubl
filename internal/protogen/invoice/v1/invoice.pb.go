// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: invoice/v1/invoice.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InvoiceHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceHeaderD *InvoiceHeaderD `protobuf:"bytes,1,opt,name=invoice_header_d,json=invoiceHeaderD,proto3" json:"invoice_header_d,omitempty"`
	InvoiceHeaderT *InvoiceHeaderT `protobuf:"bytes,2,opt,name=invoice_header_t,json=invoiceHeaderT,proto3" json:"invoice_header_t,omitempty"`
	CrUpdUser      *v1.CrUpdUser   `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime      *v1.CrUpdTime   `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *InvoiceHeader) Reset() {
	*x = InvoiceHeader{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceHeader) ProtoMessage() {}

func (x *InvoiceHeader) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceHeader.ProtoReflect.Descriptor instead.
func (*InvoiceHeader) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{0}
}

func (x *InvoiceHeader) GetInvoiceHeaderD() *InvoiceHeaderD {
	if x != nil {
		return x.InvoiceHeaderD
	}
	return nil
}

func (x *InvoiceHeader) GetInvoiceHeaderT() *InvoiceHeaderT {
	if x != nil {
		return x.InvoiceHeaderT
	}
	return nil
}

func (x *InvoiceHeader) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *InvoiceHeader) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type InvoiceHeaderD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                              []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	IhId                               string  `protobuf:"bytes,4,opt,name=ih_id,json=ihId,proto3" json:"ih_id,omitempty"`
	InvoiceTypeCode                    string  `protobuf:"bytes,5,opt,name=invoice_type_code,json=invoiceTypeCode,proto3" json:"invoice_type_code,omitempty"`
	Note                               string  `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	DocumentCurrencyCode               string  `protobuf:"bytes,7,opt,name=document_currency_code,json=documentCurrencyCode,proto3" json:"document_currency_code,omitempty"`
	TaxCurrencyCode                    string  `protobuf:"bytes,8,opt,name=tax_currency_code,json=taxCurrencyCode,proto3" json:"tax_currency_code,omitempty"`
	PricingCurrencyCode                string  `protobuf:"bytes,9,opt,name=pricing_currency_code,json=pricingCurrencyCode,proto3" json:"pricing_currency_code,omitempty"`
	PaymentCurrencyCode                string  `protobuf:"bytes,10,opt,name=payment_currency_code,json=paymentCurrencyCode,proto3" json:"payment_currency_code,omitempty"`
	PaymentAltCurrencyCode             string  `protobuf:"bytes,11,opt,name=payment_alt_currency_code,json=paymentAltCurrencyCode,proto3" json:"payment_alt_currency_code,omitempty"`
	AccountingCostCode                 string  `protobuf:"bytes,12,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost                     string  `protobuf:"bytes,13,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	LineCountNumeric                   uint32  `protobuf:"varint,14,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	OrderId                            uint32  `protobuf:"varint,15,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	BillingId                          uint32  `protobuf:"varint,16,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	DespatchId                         uint32  `protobuf:"varint,17,opt,name=despatch_id,json=despatchId,proto3" json:"despatch_id,omitempty"`
	ReceiptId                          uint32  `protobuf:"varint,18,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id,omitempty"`
	StatementId                        uint32  `protobuf:"varint,19,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	ContractId                         uint32  `protobuf:"varint,20,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AccountingSupplierPartyId          uint32  `protobuf:"varint,21,opt,name=accounting_supplier_party_id,json=accountingSupplierPartyId,proto3" json:"accounting_supplier_party_id,omitempty"`
	AccountingCustomerPartyId          uint32  `protobuf:"varint,22,opt,name=accounting_customer_party_id,json=accountingCustomerPartyId,proto3" json:"accounting_customer_party_id,omitempty"`
	PayeePartyId                       uint32  `protobuf:"varint,23,opt,name=payee_party_id,json=payeePartyId,proto3" json:"payee_party_id,omitempty"`
	BuyerCustomerPartyId               uint32  `protobuf:"varint,24,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId              uint32  `protobuf:"varint,25,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	TaxRepresentativePartyId           uint32  `protobuf:"varint,26,opt,name=tax_representative_party_id,json=taxRepresentativePartyId,proto3" json:"tax_representative_party_id,omitempty"`
	TaxExSourceCurrencyCode            string  `protobuf:"bytes,27,opt,name=tax_ex_source_currency_code,json=taxExSourceCurrencyCode,proto3" json:"tax_ex_source_currency_code,omitempty"`
	TaxExSourceCurrencyBaseRate        string  `protobuf:"bytes,28,opt,name=tax_ex_source_currency_base_rate,json=taxExSourceCurrencyBaseRate,proto3" json:"tax_ex_source_currency_base_rate,omitempty"`
	TaxExTargetCurrencyCode            string  `protobuf:"bytes,29,opt,name=tax_ex_target_currency_code,json=taxExTargetCurrencyCode,proto3" json:"tax_ex_target_currency_code,omitempty"`
	TaxExTargetCurrencyBaseRate        string  `protobuf:"bytes,30,opt,name=tax_ex_target_currency_base_rate,json=taxExTargetCurrencyBaseRate,proto3" json:"tax_ex_target_currency_base_rate,omitempty"`
	TaxExExchangeMarketId              uint32  `protobuf:"varint,31,opt,name=tax_ex_exchange_market_id,json=taxExExchangeMarketId,proto3" json:"tax_ex_exchange_market_id,omitempty"`
	TaxExCalculationRate               float64 `protobuf:"fixed64,32,opt,name=tax_ex_calculation_rate,json=taxExCalculationRate,proto3" json:"tax_ex_calculation_rate,omitempty"`
	TaxExMathematicOperatorCode        string  `protobuf:"bytes,33,opt,name=tax_ex_mathematic_operator_code,json=taxExMathematicOperatorCode,proto3" json:"tax_ex_mathematic_operator_code,omitempty"`
	PricingExSourceCurrencyCode        string  `protobuf:"bytes,34,opt,name=pricing_ex_source_currency_code,json=pricingExSourceCurrencyCode,proto3" json:"pricing_ex_source_currency_code,omitempty"`
	PricingExSourceCurrencyBaseRate    string  `protobuf:"bytes,35,opt,name=pricing_ex_source_currency_base_rate,json=pricingExSourceCurrencyBaseRate,proto3" json:"pricing_ex_source_currency_base_rate,omitempty"`
	PricingExTargetCurrencyCode        string  `protobuf:"bytes,36,opt,name=pricing_ex_target_currency_code,json=pricingExTargetCurrencyCode,proto3" json:"pricing_ex_target_currency_code,omitempty"`
	PricingExTargetCurrencyBaseRate    string  `protobuf:"bytes,37,opt,name=pricing_ex_target_currency_base_rate,json=pricingExTargetCurrencyBaseRate,proto3" json:"pricing_ex_target_currency_base_rate,omitempty"`
	PricingExExchangeMarketId          uint32  `protobuf:"varint,38,opt,name=pricing_ex_exchange_market_id,json=pricingExExchangeMarketId,proto3" json:"pricing_ex_exchange_market_id,omitempty"`
	PricingExCalculationRate           float64 `protobuf:"fixed64,39,opt,name=pricing_ex_calculation_rate,json=pricingExCalculationRate,proto3" json:"pricing_ex_calculation_rate,omitempty"`
	PricingExMathematicOperatorCode    string  `protobuf:"bytes,40,opt,name=pricing_ex_mathematic_operator_code,json=pricingExMathematicOperatorCode,proto3" json:"pricing_ex_mathematic_operator_code,omitempty"`
	PaymentExSourceCurrencyCode        string  `protobuf:"bytes,41,opt,name=payment_ex_source_currency_code,json=paymentExSourceCurrencyCode,proto3" json:"payment_ex_source_currency_code,omitempty"`
	PaymentExSourceCurrencyBaseRate    string  `protobuf:"bytes,42,opt,name=payment_ex_source_currency_base_rate,json=paymentExSourceCurrencyBaseRate,proto3" json:"payment_ex_source_currency_base_rate,omitempty"`
	PaymentExTargetCurrencyCode        string  `protobuf:"bytes,43,opt,name=payment_ex_target_currency_code,json=paymentExTargetCurrencyCode,proto3" json:"payment_ex_target_currency_code,omitempty"`
	PaymentExTargetCurrencyBaseRate    string  `protobuf:"bytes,44,opt,name=payment_ex_target_currency_base_rate,json=paymentExTargetCurrencyBaseRate,proto3" json:"payment_ex_target_currency_base_rate,omitempty"`
	PaymentExExchangeMarketId          uint32  `protobuf:"varint,45,opt,name=payment_ex_exchange_market_id,json=paymentExExchangeMarketId,proto3" json:"payment_ex_exchange_market_id,omitempty"`
	PaymentExCalculationRate           float64 `protobuf:"fixed64,46,opt,name=payment_ex_calculation_rate,json=paymentExCalculationRate,proto3" json:"payment_ex_calculation_rate,omitempty"`
	PaymentExMathematicOperatorCode    string  `protobuf:"bytes,47,opt,name=payment_ex_mathematic_operator_code,json=paymentExMathematicOperatorCode,proto3" json:"payment_ex_mathematic_operator_code,omitempty"`
	PaymentAltExSourceCurrencyCode     string  `protobuf:"bytes,48,opt,name=payment_alt_ex_source_currency_code,json=paymentAltExSourceCurrencyCode,proto3" json:"payment_alt_ex_source_currency_code,omitempty"`
	PaymentAltExSourceCurrencyBaseRate string  `protobuf:"bytes,49,opt,name=payment_alt_ex_source_currency_base_rate,json=paymentAltExSourceCurrencyBaseRate,proto3" json:"payment_alt_ex_source_currency_base_rate,omitempty"`
	PaymentAltExTargetCurrencyCode     string  `protobuf:"bytes,50,opt,name=payment_alt_ex_target_currency_code,json=paymentAltExTargetCurrencyCode,proto3" json:"payment_alt_ex_target_currency_code,omitempty"`
	PaymentAltExTargetCurrencyBaseRate string  `protobuf:"bytes,51,opt,name=payment_alt_ex_target_currency_base_rate,json=paymentAltExTargetCurrencyBaseRate,proto3" json:"payment_alt_ex_target_currency_base_rate,omitempty"`
	PaymentAltExExchangeMarketId       uint32  `protobuf:"varint,52,opt,name=payment_alt_ex_exchange_market_id,json=paymentAltExExchangeMarketId,proto3" json:"payment_alt_ex_exchange_market_id,omitempty"`
	PaymentAltExCalculationRate        float64 `protobuf:"fixed64,53,opt,name=payment_alt_ex_calculation_rate,json=paymentAltExCalculationRate,proto3" json:"payment_alt_ex_calculation_rate,omitempty"`
	PaymentAltExMathematicOperatorCode string  `protobuf:"bytes,54,opt,name=payment_alt_ex_mathematic_operator_code,json=paymentAltExMathematicOperatorCode,proto3" json:"payment_alt_ex_mathematic_operator_code,omitempty"`
	LineExtensionAmount                float64 `protobuf:"fixed64,55,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TaxExclusiveAmount                 float64 `protobuf:"fixed64,56,opt,name=tax_exclusive_amount,json=taxExclusiveAmount,proto3" json:"tax_exclusive_amount,omitempty"`
	TaxInclusiveAmount                 float64 `protobuf:"fixed64,57,opt,name=tax_inclusive_amount,json=taxInclusiveAmount,proto3" json:"tax_inclusive_amount,omitempty"`
	AllowanceTotalAmount               float64 `protobuf:"fixed64,58,opt,name=allowance_total_amount,json=allowanceTotalAmount,proto3" json:"allowance_total_amount,omitempty"`
	ChargeTotalAmount                  float64 `protobuf:"fixed64,59,opt,name=charge_total_amount,json=chargeTotalAmount,proto3" json:"charge_total_amount,omitempty"`
	WithholdingTaxTotalAmount          float64 `protobuf:"fixed64,60,opt,name=withholding_tax_total_amount,json=withholdingTaxTotalAmount,proto3" json:"withholding_tax_total_amount,omitempty"`
	PrepaidAmount                      float64 `protobuf:"fixed64,61,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PayableRoundingAmount              float64 `protobuf:"fixed64,62,opt,name=payable_rounding_amount,json=payableRoundingAmount,proto3" json:"payable_rounding_amount,omitempty"`
	PayableAmount                      float64 `protobuf:"fixed64,63,opt,name=payable_amount,json=payableAmount,proto3" json:"payable_amount,omitempty"`
	PayableAlternativeAmount           float64 `protobuf:"fixed64,64,opt,name=payable_alternative_amount,json=payableAlternativeAmount,proto3" json:"payable_alternative_amount,omitempty"`
}

func (x *InvoiceHeaderD) Reset() {
	*x = InvoiceHeaderD{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceHeaderD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceHeaderD) ProtoMessage() {}

func (x *InvoiceHeaderD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceHeaderD.ProtoReflect.Descriptor instead.
func (*InvoiceHeaderD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{1}
}

func (x *InvoiceHeaderD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceHeaderD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *InvoiceHeaderD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *InvoiceHeaderD) GetIhId() string {
	if x != nil {
		return x.IhId
	}
	return ""
}

func (x *InvoiceHeaderD) GetInvoiceTypeCode() string {
	if x != nil {
		return x.InvoiceTypeCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *InvoiceHeaderD) GetDocumentCurrencyCode() string {
	if x != nil {
		return x.DocumentCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetTaxCurrencyCode() string {
	if x != nil {
		return x.TaxCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPricingCurrencyCode() string {
	if x != nil {
		return x.PricingCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentCurrencyCode() string {
	if x != nil {
		return x.PaymentCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentAltCurrencyCode() string {
	if x != nil {
		return x.PaymentAltCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *InvoiceHeaderD) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *InvoiceHeaderD) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *InvoiceHeaderD) GetBillingId() uint32 {
	if x != nil {
		return x.BillingId
	}
	return 0
}

func (x *InvoiceHeaderD) GetDespatchId() uint32 {
	if x != nil {
		return x.DespatchId
	}
	return 0
}

func (x *InvoiceHeaderD) GetReceiptId() uint32 {
	if x != nil {
		return x.ReceiptId
	}
	return 0
}

func (x *InvoiceHeaderD) GetStatementId() uint32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

func (x *InvoiceHeaderD) GetContractId() uint32 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *InvoiceHeaderD) GetAccountingSupplierPartyId() uint32 {
	if x != nil {
		return x.AccountingSupplierPartyId
	}
	return 0
}

func (x *InvoiceHeaderD) GetAccountingCustomerPartyId() uint32 {
	if x != nil {
		return x.AccountingCustomerPartyId
	}
	return 0
}

func (x *InvoiceHeaderD) GetPayeePartyId() uint32 {
	if x != nil {
		return x.PayeePartyId
	}
	return 0
}

func (x *InvoiceHeaderD) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *InvoiceHeaderD) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *InvoiceHeaderD) GetTaxRepresentativePartyId() uint32 {
	if x != nil {
		return x.TaxRepresentativePartyId
	}
	return 0
}

func (x *InvoiceHeaderD) GetTaxExSourceCurrencyCode() string {
	if x != nil {
		return x.TaxExSourceCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetTaxExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExSourceCurrencyBaseRate
	}
	return ""
}

func (x *InvoiceHeaderD) GetTaxExTargetCurrencyCode() string {
	if x != nil {
		return x.TaxExTargetCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetTaxExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExTargetCurrencyBaseRate
	}
	return ""
}

func (x *InvoiceHeaderD) GetTaxExExchangeMarketId() uint32 {
	if x != nil {
		return x.TaxExExchangeMarketId
	}
	return 0
}

func (x *InvoiceHeaderD) GetTaxExCalculationRate() float64 {
	if x != nil {
		return x.TaxExCalculationRate
	}
	return 0
}

func (x *InvoiceHeaderD) GetTaxExMathematicOperatorCode() string {
	if x != nil {
		return x.TaxExMathematicOperatorCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPricingExSourceCurrencyCode() string {
	if x != nil {
		return x.PricingExSourceCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPricingExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExSourceCurrencyBaseRate
	}
	return ""
}

func (x *InvoiceHeaderD) GetPricingExTargetCurrencyCode() string {
	if x != nil {
		return x.PricingExTargetCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPricingExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExTargetCurrencyBaseRate
	}
	return ""
}

func (x *InvoiceHeaderD) GetPricingExExchangeMarketId() uint32 {
	if x != nil {
		return x.PricingExExchangeMarketId
	}
	return 0
}

func (x *InvoiceHeaderD) GetPricingExCalculationRate() float64 {
	if x != nil {
		return x.PricingExCalculationRate
	}
	return 0
}

func (x *InvoiceHeaderD) GetPricingExMathematicOperatorCode() string {
	if x != nil {
		return x.PricingExMathematicOperatorCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentExSourceCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExSourceCurrencyBaseRate
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentExTargetCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExTargetCurrencyBaseRate
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentExExchangeMarketId
	}
	return 0
}

func (x *InvoiceHeaderD) GetPaymentExCalculationRate() float64 {
	if x != nil {
		return x.PaymentExCalculationRate
	}
	return 0
}

func (x *InvoiceHeaderD) GetPaymentExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentExMathematicOperatorCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentAltExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentAltExSourceCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentAltExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentAltExSourceCurrencyBaseRate
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentAltExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentAltExTargetCurrencyCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentAltExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentAltExTargetCurrencyBaseRate
	}
	return ""
}

func (x *InvoiceHeaderD) GetPaymentAltExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentAltExExchangeMarketId
	}
	return 0
}

func (x *InvoiceHeaderD) GetPaymentAltExCalculationRate() float64 {
	if x != nil {
		return x.PaymentAltExCalculationRate
	}
	return 0
}

func (x *InvoiceHeaderD) GetPaymentAltExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentAltExMathematicOperatorCode
	}
	return ""
}

func (x *InvoiceHeaderD) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *InvoiceHeaderD) GetTaxExclusiveAmount() float64 {
	if x != nil {
		return x.TaxExclusiveAmount
	}
	return 0
}

func (x *InvoiceHeaderD) GetTaxInclusiveAmount() float64 {
	if x != nil {
		return x.TaxInclusiveAmount
	}
	return 0
}

func (x *InvoiceHeaderD) GetAllowanceTotalAmount() float64 {
	if x != nil {
		return x.AllowanceTotalAmount
	}
	return 0
}

func (x *InvoiceHeaderD) GetChargeTotalAmount() float64 {
	if x != nil {
		return x.ChargeTotalAmount
	}
	return 0
}

func (x *InvoiceHeaderD) GetWithholdingTaxTotalAmount() float64 {
	if x != nil {
		return x.WithholdingTaxTotalAmount
	}
	return 0
}

func (x *InvoiceHeaderD) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *InvoiceHeaderD) GetPayableRoundingAmount() float64 {
	if x != nil {
		return x.PayableRoundingAmount
	}
	return 0
}

func (x *InvoiceHeaderD) GetPayableAmount() float64 {
	if x != nil {
		return x.PayableAmount
	}
	return 0
}

func (x *InvoiceHeaderD) GetPayableAlternativeAmount() float64 {
	if x != nil {
		return x.PayableAlternativeAmount
	}
	return 0
}

type InvoiceHeaderT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueDate              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	DueDate                *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	TaxPointDate           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=tax_point_date,json=taxPointDate,proto3" json:"tax_point_date,omitempty"`
	InvoicePeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=invoice_period_start_date,json=invoicePeriodStartDate,proto3" json:"invoice_period_start_date,omitempty"`
	InvoicePeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=invoice_period_end_date,json=invoicePeriodEndDate,proto3" json:"invoice_period_end_date,omitempty"`
	TaxExDate              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=tax_ex_date,json=taxExDate,proto3" json:"tax_ex_date,omitempty"`
	PricingExDate          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=pricing_ex_date,json=pricingExDate,proto3" json:"pricing_ex_date,omitempty"`
	PaymentExDate          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payment_ex_date,json=paymentExDate,proto3" json:"payment_ex_date,omitempty"`
	PaymentAltExDate       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=payment_alt_ex_date,json=paymentAltExDate,proto3" json:"payment_alt_ex_date,omitempty"`
}

func (x *InvoiceHeaderT) Reset() {
	*x = InvoiceHeaderT{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceHeaderT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceHeaderT) ProtoMessage() {}

func (x *InvoiceHeaderT) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceHeaderT.ProtoReflect.Descriptor instead.
func (*InvoiceHeaderT) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{2}
}

func (x *InvoiceHeaderT) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *InvoiceHeaderT) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *InvoiceHeaderT) GetTaxPointDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TaxPointDate
	}
	return nil
}

func (x *InvoiceHeaderT) GetInvoicePeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicePeriodStartDate
	}
	return nil
}

func (x *InvoiceHeaderT) GetInvoicePeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicePeriodEndDate
	}
	return nil
}

func (x *InvoiceHeaderT) GetTaxExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TaxExDate
	}
	return nil
}

func (x *InvoiceHeaderT) GetPricingExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PricingExDate
	}
	return nil
}

func (x *InvoiceHeaderT) GetPaymentExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentExDate
	}
	return nil
}

func (x *InvoiceHeaderT) GetPaymentAltExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentAltExDate
	}
	return nil
}

type CreateInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IhId                               string                      `protobuf:"bytes,1,opt,name=ih_id,json=ihId,proto3" json:"ih_id,omitempty"`
	IssueDate                          string                      `protobuf:"bytes,2,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	DueDate                            string                      `protobuf:"bytes,3,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	TaxPointDate                       string                      `protobuf:"bytes,4,opt,name=tax_point_date,json=taxPointDate,proto3" json:"tax_point_date,omitempty"`
	InvoicePeriodStartDate             string                      `protobuf:"bytes,5,opt,name=invoice_period_start_date,json=invoicePeriodStartDate,proto3" json:"invoice_period_start_date,omitempty"`
	InvoicePeriodEndDate               string                      `protobuf:"bytes,6,opt,name=invoice_period_end_date,json=invoicePeriodEndDate,proto3" json:"invoice_period_end_date,omitempty"`
	InvoiceTypeCode                    string                      `protobuf:"bytes,7,opt,name=invoice_type_code,json=invoiceTypeCode,proto3" json:"invoice_type_code,omitempty"`
	Note                               string                      `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	DocumentCurrencyCode               string                      `protobuf:"bytes,9,opt,name=document_currency_code,json=documentCurrencyCode,proto3" json:"document_currency_code,omitempty"`
	TaxCurrencyCode                    string                      `protobuf:"bytes,10,opt,name=tax_currency_code,json=taxCurrencyCode,proto3" json:"tax_currency_code,omitempty"`
	PricingCurrencyCode                string                      `protobuf:"bytes,11,opt,name=pricing_currency_code,json=pricingCurrencyCode,proto3" json:"pricing_currency_code,omitempty"`
	PaymentCurrencyCode                string                      `protobuf:"bytes,12,opt,name=payment_currency_code,json=paymentCurrencyCode,proto3" json:"payment_currency_code,omitempty"`
	PaymentAltCurrencyCode             string                      `protobuf:"bytes,13,opt,name=payment_alt_currency_code,json=paymentAltCurrencyCode,proto3" json:"payment_alt_currency_code,omitempty"`
	AccountingCostCode                 string                      `protobuf:"bytes,14,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost                     string                      `protobuf:"bytes,15,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	LineCountNumeric                   uint32                      `protobuf:"varint,16,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	OrderId                            uint32                      `protobuf:"varint,18,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	BillingId                          uint32                      `protobuf:"varint,19,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	DespatchId                         uint32                      `protobuf:"varint,20,opt,name=despatch_id,json=despatchId,proto3" json:"despatch_id,omitempty"`
	ReceiptId                          uint32                      `protobuf:"varint,21,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id,omitempty"`
	StatementId                        uint32                      `protobuf:"varint,22,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	ContractId                         uint32                      `protobuf:"varint,24,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AccountingSupplierPartyId          uint32                      `protobuf:"varint,27,opt,name=accounting_supplier_party_id,json=accountingSupplierPartyId,proto3" json:"accounting_supplier_party_id,omitempty"`
	AccountingCustomerPartyId          uint32                      `protobuf:"varint,28,opt,name=accounting_customer_party_id,json=accountingCustomerPartyId,proto3" json:"accounting_customer_party_id,omitempty"`
	PayeePartyId                       uint32                      `protobuf:"varint,29,opt,name=payee_party_id,json=payeePartyId,proto3" json:"payee_party_id,omitempty"`
	BuyerCustomerPartyId               uint32                      `protobuf:"varint,30,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId              uint32                      `protobuf:"varint,31,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	TaxRepresentativePartyId           uint32                      `protobuf:"varint,32,opt,name=tax_representative_party_id,json=taxRepresentativePartyId,proto3" json:"tax_representative_party_id,omitempty"`
	TaxExSourceCurrencyCode            string                      `protobuf:"bytes,33,opt,name=tax_ex_source_currency_code,json=taxExSourceCurrencyCode,proto3" json:"tax_ex_source_currency_code,omitempty"`
	TaxExSourceCurrencyBaseRate        string                      `protobuf:"bytes,34,opt,name=tax_ex_source_currency_base_rate,json=taxExSourceCurrencyBaseRate,proto3" json:"tax_ex_source_currency_base_rate,omitempty"`
	TaxExTargetCurrencyCode            string                      `protobuf:"bytes,35,opt,name=tax_ex_target_currency_code,json=taxExTargetCurrencyCode,proto3" json:"tax_ex_target_currency_code,omitempty"`
	TaxExTargetCurrencyBaseRate        string                      `protobuf:"bytes,36,opt,name=tax_ex_target_currency_base_rate,json=taxExTargetCurrencyBaseRate,proto3" json:"tax_ex_target_currency_base_rate,omitempty"`
	TaxExExchangeMarketId              uint32                      `protobuf:"varint,37,opt,name=tax_ex_exchange_market_id,json=taxExExchangeMarketId,proto3" json:"tax_ex_exchange_market_id,omitempty"`
	TaxExCalculationRate               float64                     `protobuf:"fixed64,38,opt,name=tax_ex_calculation_rate,json=taxExCalculationRate,proto3" json:"tax_ex_calculation_rate,omitempty"`
	TaxExMathematicOperatorCode        string                      `protobuf:"bytes,39,opt,name=tax_ex_mathematic_operator_code,json=taxExMathematicOperatorCode,proto3" json:"tax_ex_mathematic_operator_code,omitempty"`
	TaxExDate                          string                      `protobuf:"bytes,40,opt,name=tax_ex_date,json=taxExDate,proto3" json:"tax_ex_date,omitempty"`
	PricingExSourceCurrencyCode        string                      `protobuf:"bytes,41,opt,name=pricing_ex_source_currency_code,json=pricingExSourceCurrencyCode,proto3" json:"pricing_ex_source_currency_code,omitempty"`
	PricingExSourceCurrencyBaseRate    string                      `protobuf:"bytes,42,opt,name=pricing_ex_source_currency_base_rate,json=pricingExSourceCurrencyBaseRate,proto3" json:"pricing_ex_source_currency_base_rate,omitempty"`
	PricingExTargetCurrencyCode        string                      `protobuf:"bytes,43,opt,name=pricing_ex_target_currency_code,json=pricingExTargetCurrencyCode,proto3" json:"pricing_ex_target_currency_code,omitempty"`
	PricingExTargetCurrencyBaseRate    string                      `protobuf:"bytes,44,opt,name=pricing_ex_target_currency_base_rate,json=pricingExTargetCurrencyBaseRate,proto3" json:"pricing_ex_target_currency_base_rate,omitempty"`
	PricingExExchangeMarketId          uint32                      `protobuf:"varint,45,opt,name=pricing_ex_exchange_market_id,json=pricingExExchangeMarketId,proto3" json:"pricing_ex_exchange_market_id,omitempty"`
	PricingExCalculationRate           float64                     `protobuf:"fixed64,46,opt,name=pricing_ex_calculation_rate,json=pricingExCalculationRate,proto3" json:"pricing_ex_calculation_rate,omitempty"`
	PricingExMathematicOperatorCode    string                      `protobuf:"bytes,47,opt,name=pricing_ex_mathematic_operator_code,json=pricingExMathematicOperatorCode,proto3" json:"pricing_ex_mathematic_operator_code,omitempty"`
	PricingExDate                      string                      `protobuf:"bytes,48,opt,name=pricing_ex_date,json=pricingExDate,proto3" json:"pricing_ex_date,omitempty"`
	PaymentExSourceCurrencyCode        string                      `protobuf:"bytes,49,opt,name=payment_ex_source_currency_code,json=paymentExSourceCurrencyCode,proto3" json:"payment_ex_source_currency_code,omitempty"`
	PaymentExSourceCurrencyBaseRate    string                      `protobuf:"bytes,50,opt,name=payment_ex_source_currency_base_rate,json=paymentExSourceCurrencyBaseRate,proto3" json:"payment_ex_source_currency_base_rate,omitempty"`
	PaymentExTargetCurrencyCode        string                      `protobuf:"bytes,51,opt,name=payment_ex_target_currency_code,json=paymentExTargetCurrencyCode,proto3" json:"payment_ex_target_currency_code,omitempty"`
	PaymentExTargetCurrencyBaseRate    string                      `protobuf:"bytes,52,opt,name=payment_ex_target_currency_base_rate,json=paymentExTargetCurrencyBaseRate,proto3" json:"payment_ex_target_currency_base_rate,omitempty"`
	PaymentExExchangeMarketId          uint32                      `protobuf:"varint,53,opt,name=payment_ex_exchange_market_id,json=paymentExExchangeMarketId,proto3" json:"payment_ex_exchange_market_id,omitempty"`
	PaymentExCalculationRate           float64                     `protobuf:"fixed64,54,opt,name=payment_ex_calculation_rate,json=paymentExCalculationRate,proto3" json:"payment_ex_calculation_rate,omitempty"`
	PaymentExMathematicOperatorCode    string                      `protobuf:"bytes,55,opt,name=payment_ex_mathematic_operator_code,json=paymentExMathematicOperatorCode,proto3" json:"payment_ex_mathematic_operator_code,omitempty"`
	PaymentExDate                      string                      `protobuf:"bytes,56,opt,name=payment_ex_date,json=paymentExDate,proto3" json:"payment_ex_date,omitempty"`
	PaymentAltExSourceCurrencyCode     string                      `protobuf:"bytes,57,opt,name=payment_alt_ex_source_currency_code,json=paymentAltExSourceCurrencyCode,proto3" json:"payment_alt_ex_source_currency_code,omitempty"`
	PaymentAltExSourceCurrencyBaseRate string                      `protobuf:"bytes,58,opt,name=payment_alt_ex_source_currency_base_rate,json=paymentAltExSourceCurrencyBaseRate,proto3" json:"payment_alt_ex_source_currency_base_rate,omitempty"`
	PaymentAltExTargetCurrencyCode     string                      `protobuf:"bytes,59,opt,name=payment_alt_ex_target_currency_code,json=paymentAltExTargetCurrencyCode,proto3" json:"payment_alt_ex_target_currency_code,omitempty"`
	PaymentAltExTargetCurrencyBaseRate string                      `protobuf:"bytes,60,opt,name=payment_alt_ex_target_currency_base_rate,json=paymentAltExTargetCurrencyBaseRate,proto3" json:"payment_alt_ex_target_currency_base_rate,omitempty"`
	PaymentAltExExchangeMarketId       uint32                      `protobuf:"varint,61,opt,name=payment_alt_ex_exchange_market_id,json=paymentAltExExchangeMarketId,proto3" json:"payment_alt_ex_exchange_market_id,omitempty"`
	PaymentAltExCalculationRate        float64                     `protobuf:"fixed64,62,opt,name=payment_alt_ex_calculation_rate,json=paymentAltExCalculationRate,proto3" json:"payment_alt_ex_calculation_rate,omitempty"`
	PaymentAltExMathematicOperatorCode string                      `protobuf:"bytes,63,opt,name=payment_alt_ex_mathematic_operator_code,json=paymentAltExMathematicOperatorCode,proto3" json:"payment_alt_ex_mathematic_operator_code,omitempty"`
	PaymentAltExDate                   string                      `protobuf:"bytes,64,opt,name=payment_alt_ex_date,json=paymentAltExDate,proto3" json:"payment_alt_ex_date,omitempty"`
	LineExtensionAmount                float64                     `protobuf:"fixed64,65,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TaxExclusiveAmount                 float64                     `protobuf:"fixed64,66,opt,name=tax_exclusive_amount,json=taxExclusiveAmount,proto3" json:"tax_exclusive_amount,omitempty"`
	TaxInclusiveAmount                 float64                     `protobuf:"fixed64,67,opt,name=tax_inclusive_amount,json=taxInclusiveAmount,proto3" json:"tax_inclusive_amount,omitempty"`
	AllowanceTotalAmount               float64                     `protobuf:"fixed64,68,opt,name=allowance_total_amount,json=allowanceTotalAmount,proto3" json:"allowance_total_amount,omitempty"`
	ChargeTotalAmount                  float64                     `protobuf:"fixed64,69,opt,name=charge_total_amount,json=chargeTotalAmount,proto3" json:"charge_total_amount,omitempty"`
	WithholdingTaxTotalAmount          float64                     `protobuf:"fixed64,70,opt,name=withholding_tax_total_amount,json=withholdingTaxTotalAmount,proto3" json:"withholding_tax_total_amount,omitempty"`
	PrepaidAmount                      float64                     `protobuf:"fixed64,71,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PayableRoundingAmount              float64                     `protobuf:"fixed64,72,opt,name=payable_rounding_amount,json=payableRoundingAmount,proto3" json:"payable_rounding_amount,omitempty"`
	PayableAmount                      float64                     `protobuf:"fixed64,73,opt,name=payable_amount,json=payableAmount,proto3" json:"payable_amount,omitempty"`
	PayableAlternativeAmount           float64                     `protobuf:"fixed64,74,opt,name=payable_alternative_amount,json=payableAlternativeAmount,proto3" json:"payable_alternative_amount,omitempty"`
	UserId                             string                      `protobuf:"bytes,75,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                          string                      `protobuf:"bytes,76,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                          string                      `protobuf:"bytes,77,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InvoiceLines                       []*CreateInvoiceLineRequest `protobuf:"bytes,78,rep,name=invoice_lines,json=invoiceLines,proto3" json:"invoice_lines,omitempty"`
}

func (x *CreateInvoiceRequest) Reset() {
	*x = CreateInvoiceRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceRequest) ProtoMessage() {}

func (x *CreateInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{3}
}

func (x *CreateInvoiceRequest) GetIhId() string {
	if x != nil {
		return x.IhId
	}
	return ""
}

func (x *CreateInvoiceRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetDueDate() string {
	if x != nil {
		return x.DueDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetTaxPointDate() string {
	if x != nil {
		return x.TaxPointDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetInvoicePeriodStartDate() string {
	if x != nil {
		return x.InvoicePeriodStartDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetInvoicePeriodEndDate() string {
	if x != nil {
		return x.InvoicePeriodEndDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetInvoiceTypeCode() string {
	if x != nil {
		return x.InvoiceTypeCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateInvoiceRequest) GetDocumentCurrencyCode() string {
	if x != nil {
		return x.DocumentCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetTaxCurrencyCode() string {
	if x != nil {
		return x.TaxCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPricingCurrencyCode() string {
	if x != nil {
		return x.PricingCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentCurrencyCode() string {
	if x != nil {
		return x.PaymentCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentAltCurrencyCode() string {
	if x != nil {
		return x.PaymentAltCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *CreateInvoiceRequest) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *CreateInvoiceRequest) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetBillingId() uint32 {
	if x != nil {
		return x.BillingId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetDespatchId() uint32 {
	if x != nil {
		return x.DespatchId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetReceiptId() uint32 {
	if x != nil {
		return x.ReceiptId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetStatementId() uint32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetContractId() uint32 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetAccountingSupplierPartyId() uint32 {
	if x != nil {
		return x.AccountingSupplierPartyId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetAccountingCustomerPartyId() uint32 {
	if x != nil {
		return x.AccountingCustomerPartyId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPayeePartyId() uint32 {
	if x != nil {
		return x.PayeePartyId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetTaxRepresentativePartyId() uint32 {
	if x != nil {
		return x.TaxRepresentativePartyId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetTaxExSourceCurrencyCode() string {
	if x != nil {
		return x.TaxExSourceCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetTaxExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetTaxExTargetCurrencyCode() string {
	if x != nil {
		return x.TaxExTargetCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetTaxExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetTaxExExchangeMarketId() uint32 {
	if x != nil {
		return x.TaxExExchangeMarketId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetTaxExCalculationRate() float64 {
	if x != nil {
		return x.TaxExCalculationRate
	}
	return 0
}

func (x *CreateInvoiceRequest) GetTaxExMathematicOperatorCode() string {
	if x != nil {
		return x.TaxExMathematicOperatorCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetTaxExDate() string {
	if x != nil {
		return x.TaxExDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPricingExSourceCurrencyCode() string {
	if x != nil {
		return x.PricingExSourceCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPricingExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPricingExTargetCurrencyCode() string {
	if x != nil {
		return x.PricingExTargetCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPricingExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPricingExExchangeMarketId() uint32 {
	if x != nil {
		return x.PricingExExchangeMarketId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPricingExCalculationRate() float64 {
	if x != nil {
		return x.PricingExCalculationRate
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPricingExMathematicOperatorCode() string {
	if x != nil {
		return x.PricingExMathematicOperatorCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPricingExDate() string {
	if x != nil {
		return x.PricingExDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentExSourceCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentExTargetCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentExExchangeMarketId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPaymentExCalculationRate() float64 {
	if x != nil {
		return x.PaymentExCalculationRate
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPaymentExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentExMathematicOperatorCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentExDate() string {
	if x != nil {
		return x.PaymentExDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentAltExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentAltExSourceCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentAltExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentAltExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentAltExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentAltExTargetCurrencyCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentAltExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentAltExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentAltExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentAltExExchangeMarketId
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPaymentAltExCalculationRate() float64 {
	if x != nil {
		return x.PaymentAltExCalculationRate
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPaymentAltExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentAltExMathematicOperatorCode
	}
	return ""
}

func (x *CreateInvoiceRequest) GetPaymentAltExDate() string {
	if x != nil {
		return x.PaymentAltExDate
	}
	return ""
}

func (x *CreateInvoiceRequest) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetTaxExclusiveAmount() float64 {
	if x != nil {
		return x.TaxExclusiveAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetTaxInclusiveAmount() float64 {
	if x != nil {
		return x.TaxInclusiveAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetAllowanceTotalAmount() float64 {
	if x != nil {
		return x.AllowanceTotalAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetChargeTotalAmount() float64 {
	if x != nil {
		return x.ChargeTotalAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetWithholdingTaxTotalAmount() float64 {
	if x != nil {
		return x.WithholdingTaxTotalAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPayableRoundingAmount() float64 {
	if x != nil {
		return x.PayableRoundingAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPayableAmount() float64 {
	if x != nil {
		return x.PayableAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPayableAlternativeAmount() float64 {
	if x != nil {
		return x.PayableAlternativeAmount
	}
	return 0
}

func (x *CreateInvoiceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInvoiceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInvoiceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateInvoiceRequest) GetInvoiceLines() []*CreateInvoiceLineRequest {
	if x != nil {
		return x.InvoiceLines
	}
	return nil
}

type CreateInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceHeader *InvoiceHeader `protobuf:"bytes,1,opt,name=invoice_header,json=invoiceHeader,proto3" json:"invoice_header,omitempty"`
}

func (x *CreateInvoiceResponse) Reset() {
	*x = CreateInvoiceResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceResponse) ProtoMessage() {}

func (x *CreateInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceResponse.ProtoReflect.Descriptor instead.
func (*CreateInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{4}
}

func (x *CreateInvoiceResponse) GetInvoiceHeader() *InvoiceHeader {
	if x != nil {
		return x.InvoiceHeader
	}
	return nil
}

type UpdateInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note                  string  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	InvoiceTypeCode       string  `protobuf:"bytes,2,opt,name=invoice_type_code,json=invoiceTypeCode,proto3" json:"invoice_type_code,omitempty"`
	AccountingCost        string  `protobuf:"bytes,3,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	ChargeTotalAmount     float64 `protobuf:"fixed64,4,opt,name=charge_total_amount,json=chargeTotalAmount,proto3" json:"charge_total_amount,omitempty"`
	PrepaidAmount         float64 `protobuf:"fixed64,5,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PayableRoundingAmount float64 `protobuf:"fixed64,6,opt,name=payable_rounding_amount,json=payableRoundingAmount,proto3" json:"payable_rounding_amount,omitempty"`
	PayableAmount         float64 `protobuf:"fixed64,7,opt,name=payable_amount,json=payableAmount,proto3" json:"payable_amount,omitempty"`
	Id                    string  `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	UserId                string  `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string  `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string  `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateInvoiceRequest) Reset() {
	*x = UpdateInvoiceRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvoiceRequest) ProtoMessage() {}

func (x *UpdateInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvoiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateInvoiceRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetInvoiceTypeCode() string {
	if x != nil {
		return x.InvoiceTypeCode
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetChargeTotalAmount() float64 {
	if x != nil {
		return x.ChargeTotalAmount
	}
	return 0
}

func (x *UpdateInvoiceRequest) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *UpdateInvoiceRequest) GetPayableRoundingAmount() float64 {
	if x != nil {
		return x.PayableRoundingAmount
	}
	return 0
}

func (x *UpdateInvoiceRequest) GetPayableAmount() float64 {
	if x != nil {
		return x.PayableAmount
	}
	return 0
}

func (x *UpdateInvoiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateInvoiceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInvoiceResponse) Reset() {
	*x = UpdateInvoiceResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvoiceResponse) ProtoMessage() {}

func (x *UpdateInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvoiceResponse.ProtoReflect.Descriptor instead.
func (*UpdateInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{6}
}

type GetInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetInvoiceRequest) Reset() {
	*x = GetInvoiceRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceRequest) ProtoMessage() {}

func (x *GetInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceRequest.ProtoReflect.Descriptor instead.
func (*GetInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{7}
}

func (x *GetInvoiceRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceHeader *InvoiceHeader `protobuf:"bytes,1,opt,name=invoice_header,json=invoiceHeader,proto3" json:"invoice_header,omitempty"`
}

func (x *GetInvoiceResponse) Reset() {
	*x = GetInvoiceResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceResponse) ProtoMessage() {}

func (x *GetInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceResponse.ProtoReflect.Descriptor instead.
func (*GetInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{8}
}

func (x *GetInvoiceResponse) GetInvoiceHeader() *InvoiceHeader {
	if x != nil {
		return x.InvoiceHeader
	}
	return nil
}

type GetInvoiceByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetInvoiceByPkRequest) Reset() {
	*x = GetInvoiceByPkRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceByPkRequest) ProtoMessage() {}

func (x *GetInvoiceByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceByPkRequest.ProtoReflect.Descriptor instead.
func (*GetInvoiceByPkRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{9}
}

func (x *GetInvoiceByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetInvoiceByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceHeader *InvoiceHeader `protobuf:"bytes,1,opt,name=invoice_header,json=invoiceHeader,proto3" json:"invoice_header,omitempty"`
}

func (x *GetInvoiceByPkResponse) Reset() {
	*x = GetInvoiceByPkResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceByPkResponse) ProtoMessage() {}

func (x *GetInvoiceByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceByPkResponse.ProtoReflect.Descriptor instead.
func (*GetInvoiceByPkResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{10}
}

func (x *GetInvoiceByPkResponse) GetInvoiceHeader() *InvoiceHeader {
	if x != nil {
		return x.InvoiceHeader
	}
	return nil
}

type GetInvoicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetInvoicesRequest) Reset() {
	*x = GetInvoicesRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoicesRequest) ProtoMessage() {}

func (x *GetInvoicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoicesRequest.ProtoReflect.Descriptor instead.
func (*GetInvoicesRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{11}
}

func (x *GetInvoicesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetInvoicesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetInvoicesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetInvoicesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetInvoicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceHeaders []*InvoiceHeader `protobuf:"bytes,1,rep,name=invoice_headers,json=invoiceHeaders,proto3" json:"invoice_headers,omitempty"`
	NextCursor     string           `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetInvoicesResponse) Reset() {
	*x = GetInvoicesResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoicesResponse) ProtoMessage() {}

func (x *GetInvoicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoicesResponse.ProtoReflect.Descriptor instead.
func (*GetInvoicesResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{12}
}

func (x *GetInvoicesResponse) GetInvoiceHeaders() []*InvoiceHeader {
	if x != nil {
		return x.InvoiceHeaders
	}
	return nil
}

func (x *GetInvoicesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type InvoiceLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceLineD *InvoiceLineD `protobuf:"bytes,1,opt,name=invoice_line_d,json=invoiceLineD,proto3" json:"invoice_line_d,omitempty"`
	InvoiceLineT *InvoiceLineT `protobuf:"bytes,2,opt,name=invoice_line_t,json=invoiceLineT,proto3" json:"invoice_line_t,omitempty"`
	CrUpdUser    *v1.CrUpdUser `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime    *v1.CrUpdTime `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *InvoiceLine) Reset() {
	*x = InvoiceLine{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLine) ProtoMessage() {}

func (x *InvoiceLine) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLine.ProtoReflect.Descriptor instead.
func (*InvoiceLine) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{13}
}

func (x *InvoiceLine) GetInvoiceLineD() *InvoiceLineD {
	if x != nil {
		return x.InvoiceLineD
	}
	return nil
}

func (x *InvoiceLine) GetInvoiceLineT() *InvoiceLineT {
	if x != nil {
		return x.InvoiceLineT
	}
	return nil
}

func (x *InvoiceLine) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *InvoiceLine) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type InvoiceLineD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                   []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                     string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	IlId                    string  `protobuf:"bytes,4,opt,name=il_id,json=ilId,proto3" json:"il_id,omitempty"`
	Note                    string  `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	InvoicedQuantity        float64 `protobuf:"fixed64,6,opt,name=invoiced_quantity,json=invoicedQuantity,proto3" json:"invoiced_quantity,omitempty"`
	LineExtensionAmount     float64 `protobuf:"fixed64,7,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	AccountingCostCode      string  `protobuf:"bytes,8,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost          string  `protobuf:"bytes,9,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	PaymentPurposeCode      string  `protobuf:"bytes,10,opt,name=payment_purpose_code,json=paymentPurposeCode,proto3" json:"payment_purpose_code,omitempty"`
	FreeOfChargeIndicator   bool    `protobuf:"varint,11,opt,name=free_of_charge_indicator,json=freeOfChargeIndicator,proto3" json:"free_of_charge_indicator,omitempty"`
	OrderLineId             uint32  `protobuf:"varint,12,opt,name=order_line_id,json=orderLineId,proto3" json:"order_line_id,omitempty"`
	DespatchLineId          uint32  `protobuf:"varint,13,opt,name=despatch_line_id,json=despatchLineId,proto3" json:"despatch_line_id,omitempty"`
	ReceiptLineId           uint32  `protobuf:"varint,14,opt,name=receipt_line_id,json=receiptLineId,proto3" json:"receipt_line_id,omitempty"`
	BillingId               uint32  `protobuf:"varint,15,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	OriginatorPartyId       uint32  `protobuf:"varint,16,opt,name=originator_party_id,json=originatorPartyId,proto3" json:"originator_party_id,omitempty"`
	ItemId                  uint32  `protobuf:"varint,17,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PriceAmount             float64 `protobuf:"fixed64,18,opt,name=price_amount,json=priceAmount,proto3" json:"price_amount,omitempty"`
	PriceBaseQuantity       float64 `protobuf:"fixed64,19,opt,name=price_base_quantity,json=priceBaseQuantity,proto3" json:"price_base_quantity,omitempty"`
	PriceChangeReason       string  `protobuf:"bytes,20,opt,name=price_change_reason,json=priceChangeReason,proto3" json:"price_change_reason,omitempty"`
	PriceTypeCode           string  `protobuf:"bytes,21,opt,name=price_type_code,json=priceTypeCode,proto3" json:"price_type_code,omitempty"`
	PriceType               string  `protobuf:"bytes,22,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`
	OrderableUnitFactorRate float64 `protobuf:"fixed64,23,opt,name=orderable_unit_factor_rate,json=orderableUnitFactorRate,proto3" json:"orderable_unit_factor_rate,omitempty"`
	PriceListId             uint32  `protobuf:"varint,24,opt,name=price_list_id,json=priceListId,proto3" json:"price_list_id,omitempty"`
	InvoiceHeaderId         uint32  `protobuf:"varint,25,opt,name=invoice_header_id,json=invoiceHeaderId,proto3" json:"invoice_header_id,omitempty"`
}

func (x *InvoiceLineD) Reset() {
	*x = InvoiceLineD{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLineD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLineD) ProtoMessage() {}

func (x *InvoiceLineD) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLineD.ProtoReflect.Descriptor instead.
func (*InvoiceLineD) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{14}
}

func (x *InvoiceLineD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceLineD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *InvoiceLineD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *InvoiceLineD) GetIlId() string {
	if x != nil {
		return x.IlId
	}
	return ""
}

func (x *InvoiceLineD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *InvoiceLineD) GetInvoicedQuantity() float64 {
	if x != nil {
		return x.InvoicedQuantity
	}
	return 0
}

func (x *InvoiceLineD) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *InvoiceLineD) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *InvoiceLineD) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *InvoiceLineD) GetPaymentPurposeCode() string {
	if x != nil {
		return x.PaymentPurposeCode
	}
	return ""
}

func (x *InvoiceLineD) GetFreeOfChargeIndicator() bool {
	if x != nil {
		return x.FreeOfChargeIndicator
	}
	return false
}

func (x *InvoiceLineD) GetOrderLineId() uint32 {
	if x != nil {
		return x.OrderLineId
	}
	return 0
}

func (x *InvoiceLineD) GetDespatchLineId() uint32 {
	if x != nil {
		return x.DespatchLineId
	}
	return 0
}

func (x *InvoiceLineD) GetReceiptLineId() uint32 {
	if x != nil {
		return x.ReceiptLineId
	}
	return 0
}

func (x *InvoiceLineD) GetBillingId() uint32 {
	if x != nil {
		return x.BillingId
	}
	return 0
}

func (x *InvoiceLineD) GetOriginatorPartyId() uint32 {
	if x != nil {
		return x.OriginatorPartyId
	}
	return 0
}

func (x *InvoiceLineD) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *InvoiceLineD) GetPriceAmount() float64 {
	if x != nil {
		return x.PriceAmount
	}
	return 0
}

func (x *InvoiceLineD) GetPriceBaseQuantity() float64 {
	if x != nil {
		return x.PriceBaseQuantity
	}
	return 0
}

func (x *InvoiceLineD) GetPriceChangeReason() string {
	if x != nil {
		return x.PriceChangeReason
	}
	return ""
}

func (x *InvoiceLineD) GetPriceTypeCode() string {
	if x != nil {
		return x.PriceTypeCode
	}
	return ""
}

func (x *InvoiceLineD) GetPriceType() string {
	if x != nil {
		return x.PriceType
	}
	return ""
}

func (x *InvoiceLineD) GetOrderableUnitFactorRate() float64 {
	if x != nil {
		return x.OrderableUnitFactorRate
	}
	return 0
}

func (x *InvoiceLineD) GetPriceListId() uint32 {
	if x != nil {
		return x.PriceListId
	}
	return 0
}

func (x *InvoiceLineD) GetInvoiceHeaderId() uint32 {
	if x != nil {
		return x.InvoiceHeaderId
	}
	return 0
}

type InvoiceLineT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxPointDate                 *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=tax_point_date,json=taxPointDate,proto3" json:"tax_point_date,omitempty"`
	InvoicePeriodStartDate       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=invoice_period_start_date,json=invoicePeriodStartDate,proto3" json:"invoice_period_start_date,omitempty"`
	InvoicePeriodEndDate         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=invoice_period_end_date,json=invoicePeriodEndDate,proto3" json:"invoice_period_end_date,omitempty"`
	PriceValidityPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=price_validity_period_start_date,json=priceValidityPeriodStartDate,proto3" json:"price_validity_period_start_date,omitempty"`
	PriceValidityPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=price_validity_period_end_date,json=priceValidityPeriodEndDate,proto3" json:"price_validity_period_end_date,omitempty"`
}

func (x *InvoiceLineT) Reset() {
	*x = InvoiceLineT{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLineT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLineT) ProtoMessage() {}

func (x *InvoiceLineT) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLineT.ProtoReflect.Descriptor instead.
func (*InvoiceLineT) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{15}
}

func (x *InvoiceLineT) GetTaxPointDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TaxPointDate
	}
	return nil
}

func (x *InvoiceLineT) GetInvoicePeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicePeriodStartDate
	}
	return nil
}

func (x *InvoiceLineT) GetInvoicePeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicePeriodEndDate
	}
	return nil
}

func (x *InvoiceLineT) GetPriceValidityPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PriceValidityPeriodStartDate
	}
	return nil
}

func (x *InvoiceLineT) GetPriceValidityPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PriceValidityPeriodEndDate
	}
	return nil
}

type CreateInvoiceLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IlId                         string  `protobuf:"bytes,1,opt,name=il_id,json=ilId,proto3" json:"il_id,omitempty"`
	Note                         string  `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	InvoicedQuantity             float64 `protobuf:"fixed64,3,opt,name=invoiced_quantity,json=invoicedQuantity,proto3" json:"invoiced_quantity,omitempty"`
	LineExtensionAmount          float64 `protobuf:"fixed64,4,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TaxPointDate                 string  `protobuf:"bytes,5,opt,name=tax_point_date,json=taxPointDate,proto3" json:"tax_point_date,omitempty"`
	AccountingCostCode           string  `protobuf:"bytes,6,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost               string  `protobuf:"bytes,7,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	PaymentPurposeCode           string  `protobuf:"bytes,8,opt,name=payment_purpose_code,json=paymentPurposeCode,proto3" json:"payment_purpose_code,omitempty"`
	FreeOfChargeIndicator        bool    `protobuf:"varint,9,opt,name=free_of_charge_indicator,json=freeOfChargeIndicator,proto3" json:"free_of_charge_indicator,omitempty"`
	InvoicePeriodStartDate       string  `protobuf:"bytes,10,opt,name=invoice_period_start_date,json=invoicePeriodStartDate,proto3" json:"invoice_period_start_date,omitempty"`
	InvoicePeriodEndDate         string  `protobuf:"bytes,30,opt,name=invoice_period_end_date,json=invoicePeriodEndDate,proto3" json:"invoice_period_end_date,omitempty"`
	OrderLineId                  uint32  `protobuf:"varint,11,opt,name=order_line_id,json=orderLineId,proto3" json:"order_line_id,omitempty"`
	DespatchLineId               uint32  `protobuf:"varint,12,opt,name=despatch_line_id,json=despatchLineId,proto3" json:"despatch_line_id,omitempty"`
	ReceiptLineId                uint32  `protobuf:"varint,13,opt,name=receipt_line_id,json=receiptLineId,proto3" json:"receipt_line_id,omitempty"`
	BillingId                    uint32  `protobuf:"varint,14,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	OriginatorPartyId            uint32  `protobuf:"varint,15,opt,name=originator_party_id,json=originatorPartyId,proto3" json:"originator_party_id,omitempty"`
	ItemId                       uint32  `protobuf:"varint,16,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PriceAmount                  float64 `protobuf:"fixed64,17,opt,name=price_amount,json=priceAmount,proto3" json:"price_amount,omitempty"`
	PriceBaseQuantity            float64 `protobuf:"fixed64,18,opt,name=price_base_quantity,json=priceBaseQuantity,proto3" json:"price_base_quantity,omitempty"`
	PriceChangeReason            string  `protobuf:"bytes,19,opt,name=price_change_reason,json=priceChangeReason,proto3" json:"price_change_reason,omitempty"`
	PriceTypeCode                string  `protobuf:"bytes,20,opt,name=price_type_code,json=priceTypeCode,proto3" json:"price_type_code,omitempty"`
	PriceType                    string  `protobuf:"bytes,21,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`
	OrderableUnitFactorRate      float64 `protobuf:"fixed64,22,opt,name=orderable_unit_factor_rate,json=orderableUnitFactorRate,proto3" json:"orderable_unit_factor_rate,omitempty"`
	PriceValidityPeriodStartDate string  `protobuf:"bytes,23,opt,name=price_validity_period_start_date,json=priceValidityPeriodStartDate,proto3" json:"price_validity_period_start_date,omitempty"`
	PriceValidityPeriodEndDate   string  `protobuf:"bytes,24,opt,name=price_validity_period_end_date,json=priceValidityPeriodEndDate,proto3" json:"price_validity_period_end_date,omitempty"`
	PriceListId                  uint32  `protobuf:"varint,25,opt,name=price_list_id,json=priceListId,proto3" json:"price_list_id,omitempty"`
	InvoiceHeaderId              uint32  `protobuf:"varint,26,opt,name=invoice_header_id,json=invoiceHeaderId,proto3" json:"invoice_header_id,omitempty"`
	UserId                       string  `protobuf:"bytes,27,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string  `protobuf:"bytes,28,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string  `protobuf:"bytes,29,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInvoiceLineRequest) Reset() {
	*x = CreateInvoiceLineRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceLineRequest) ProtoMessage() {}

func (x *CreateInvoiceLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceLineRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceLineRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{16}
}

func (x *CreateInvoiceLineRequest) GetIlId() string {
	if x != nil {
		return x.IlId
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetInvoicedQuantity() float64 {
	if x != nil {
		return x.InvoicedQuantity
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetTaxPointDate() string {
	if x != nil {
		return x.TaxPointDate
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetPaymentPurposeCode() string {
	if x != nil {
		return x.PaymentPurposeCode
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetFreeOfChargeIndicator() bool {
	if x != nil {
		return x.FreeOfChargeIndicator
	}
	return false
}

func (x *CreateInvoiceLineRequest) GetInvoicePeriodStartDate() string {
	if x != nil {
		return x.InvoicePeriodStartDate
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetInvoicePeriodEndDate() string {
	if x != nil {
		return x.InvoicePeriodEndDate
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetOrderLineId() uint32 {
	if x != nil {
		return x.OrderLineId
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetDespatchLineId() uint32 {
	if x != nil {
		return x.DespatchLineId
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetReceiptLineId() uint32 {
	if x != nil {
		return x.ReceiptLineId
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetBillingId() uint32 {
	if x != nil {
		return x.BillingId
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetOriginatorPartyId() uint32 {
	if x != nil {
		return x.OriginatorPartyId
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetPriceAmount() float64 {
	if x != nil {
		return x.PriceAmount
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetPriceBaseQuantity() float64 {
	if x != nil {
		return x.PriceBaseQuantity
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetPriceChangeReason() string {
	if x != nil {
		return x.PriceChangeReason
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetPriceTypeCode() string {
	if x != nil {
		return x.PriceTypeCode
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetPriceType() string {
	if x != nil {
		return x.PriceType
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetOrderableUnitFactorRate() float64 {
	if x != nil {
		return x.OrderableUnitFactorRate
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetPriceValidityPeriodStartDate() string {
	if x != nil {
		return x.PriceValidityPeriodStartDate
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetPriceValidityPeriodEndDate() string {
	if x != nil {
		return x.PriceValidityPeriodEndDate
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetPriceListId() uint32 {
	if x != nil {
		return x.PriceListId
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetInvoiceHeaderId() uint32 {
	if x != nil {
		return x.InvoiceHeaderId
	}
	return 0
}

func (x *CreateInvoiceLineRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateInvoiceLineRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateInvoiceLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceLine *InvoiceLine `protobuf:"bytes,1,opt,name=invoice_line,json=invoiceLine,proto3" json:"invoice_line,omitempty"`
}

func (x *CreateInvoiceLineResponse) Reset() {
	*x = CreateInvoiceLineResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInvoiceLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceLineResponse) ProtoMessage() {}

func (x *CreateInvoiceLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceLineResponse.ProtoReflect.Descriptor instead.
func (*CreateInvoiceLineResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{17}
}

func (x *CreateInvoiceLineResponse) GetInvoiceLine() *InvoiceLine {
	if x != nil {
		return x.InvoiceLine
	}
	return nil
}

type GetInvoiceLinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetInvoiceLinesRequest) Reset() {
	*x = GetInvoiceLinesRequest{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceLinesRequest) ProtoMessage() {}

func (x *GetInvoiceLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceLinesRequest.ProtoReflect.Descriptor instead.
func (*GetInvoiceLinesRequest) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{18}
}

func (x *GetInvoiceLinesRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetInvoiceLinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceLines []*InvoiceLine `protobuf:"bytes,1,rep,name=invoice_lines,json=invoiceLines,proto3" json:"invoice_lines,omitempty"`
}

func (x *GetInvoiceLinesResponse) Reset() {
	*x = GetInvoiceLinesResponse{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoiceLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceLinesResponse) ProtoMessage() {}

func (x *GetInvoiceLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceLinesResponse.ProtoReflect.Descriptor instead.
func (*GetInvoiceLinesResponse) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{19}
}

func (x *GetInvoiceLinesResponse) GetInvoiceLines() []*InvoiceLine {
	if x != nil {
		return x.InvoiceLines
	}
	return nil
}

type InvoiceLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceLines []*InvoiceLine `protobuf:"bytes,1,rep,name=invoice_lines,json=invoiceLines,proto3" json:"invoice_lines,omitempty"`
}

func (x *InvoiceLines) Reset() {
	*x = InvoiceLines{}
	mi := &file_invoice_v1_invoice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLines) ProtoMessage() {}

func (x *InvoiceLines) ProtoReflect() protoreflect.Message {
	mi := &file_invoice_v1_invoice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLines.ProtoReflect.Descriptor instead.
func (*InvoiceLines) Descriptor() ([]byte, []int) {
	return file_invoice_v1_invoice_proto_rawDescGZIP(), []int{20}
}

func (x *InvoiceLines) GetInvoiceLines() []*InvoiceLine {
	if x != nil {
		return x.InvoiceLines
	}
	return nil
}

var File_invoice_v1_invoice_proto protoreflect.FileDescriptor

var file_invoice_v1_invoice_proto_rawDesc = []byte{
	0x0a, 0x18, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x87, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x12, 0x44, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x1c, 0x0a, 0x0e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x78,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x6c, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x65,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x61, 0x78, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x74,
	0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x45, 0x0a, 0x20, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45,
	0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x61, 0x78, 0x45,
	0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x74, 0x61, 0x78, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x61, 0x78, 0x5f,
	0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44,
	0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x18, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45,
	0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a,
	0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f,
	0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a,
	0x28, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x54, 0x0a, 0x28, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f,
	0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65,
	0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6c, 0x74, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x61,
	0x78, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x74, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19,
	0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x04,
	0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54,
	0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x61, 0x78, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c,
	0x74, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x22, 0x81, 0x20,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x61, 0x78, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45,
	0x0a, 0x20, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x78, 0x45,
	0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74,
	0x61, 0x78, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x61,
	0x78, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74,
	0x61, 0x78, 0x45, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x61, 0x78, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x74,
	0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x45, 0x78, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x1b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x18, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a,
	0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a,
	0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68,
	0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x54, 0x0a, 0x28, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f,
	0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45,
	0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x28, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c,
	0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74,
	0x45, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c,
	0x74, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6c, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x74, 0x61, 0x78, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x74, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69,
	0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x22, 0x59, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x9c, 0x03, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x7a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xf9, 0x01, 0x0a,
	0x0b, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x12, 0x3e, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcc, 0x07, 0x0a, 0x0c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12,
	0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x72, 0x65,
	0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbe, 0x03, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x61,
	0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x51, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x1e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x0a, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x72, 0x65, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x50,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x57, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x0c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x32, 0xf0, 0x04, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x12,
	0x21, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75, 0x62, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_invoice_v1_invoice_proto_rawDescOnce sync.Once
	file_invoice_v1_invoice_proto_rawDescData = file_invoice_v1_invoice_proto_rawDesc
)

func file_invoice_v1_invoice_proto_rawDescGZIP() []byte {
	file_invoice_v1_invoice_proto_rawDescOnce.Do(func() {
		file_invoice_v1_invoice_proto_rawDescData = protoimpl.X.CompressGZIP(file_invoice_v1_invoice_proto_rawDescData)
	})
	return file_invoice_v1_invoice_proto_rawDescData
}

var file_invoice_v1_invoice_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_invoice_v1_invoice_proto_goTypes = []any{
	(*InvoiceHeader)(nil),             // 0: invoice.v1.InvoiceHeader
	(*InvoiceHeaderD)(nil),            // 1: invoice.v1.InvoiceHeaderD
	(*InvoiceHeaderT)(nil),            // 2: invoice.v1.InvoiceHeaderT
	(*CreateInvoiceRequest)(nil),      // 3: invoice.v1.CreateInvoiceRequest
	(*CreateInvoiceResponse)(nil),     // 4: invoice.v1.CreateInvoiceResponse
	(*UpdateInvoiceRequest)(nil),      // 5: invoice.v1.UpdateInvoiceRequest
	(*UpdateInvoiceResponse)(nil),     // 6: invoice.v1.UpdateInvoiceResponse
	(*GetInvoiceRequest)(nil),         // 7: invoice.v1.GetInvoiceRequest
	(*GetInvoiceResponse)(nil),        // 8: invoice.v1.GetInvoiceResponse
	(*GetInvoiceByPkRequest)(nil),     // 9: invoice.v1.GetInvoiceByPkRequest
	(*GetInvoiceByPkResponse)(nil),    // 10: invoice.v1.GetInvoiceByPkResponse
	(*GetInvoicesRequest)(nil),        // 11: invoice.v1.GetInvoicesRequest
	(*GetInvoicesResponse)(nil),       // 12: invoice.v1.GetInvoicesResponse
	(*InvoiceLine)(nil),               // 13: invoice.v1.InvoiceLine
	(*InvoiceLineD)(nil),              // 14: invoice.v1.InvoiceLineD
	(*InvoiceLineT)(nil),              // 15: invoice.v1.InvoiceLineT
	(*CreateInvoiceLineRequest)(nil),  // 16: invoice.v1.CreateInvoiceLineRequest
	(*CreateInvoiceLineResponse)(nil), // 17: invoice.v1.CreateInvoiceLineResponse
	(*GetInvoiceLinesRequest)(nil),    // 18: invoice.v1.GetInvoiceLinesRequest
	(*GetInvoiceLinesResponse)(nil),   // 19: invoice.v1.GetInvoiceLinesResponse
	(*InvoiceLines)(nil),              // 20: invoice.v1.InvoiceLines
	(*v1.CrUpdUser)(nil),              // 21: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),              // 22: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),     // 23: google.protobuf.Timestamp
	(*v1.GetRequest)(nil),             // 24: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),         // 25: common.v1.GetByIdRequest
}
var file_invoice_v1_invoice_proto_depIdxs = []int32{
	1,  // 0: invoice.v1.InvoiceHeader.invoice_header_d:type_name -> invoice.v1.InvoiceHeaderD
	2,  // 1: invoice.v1.InvoiceHeader.invoice_header_t:type_name -> invoice.v1.InvoiceHeaderT
	21, // 2: invoice.v1.InvoiceHeader.cr_upd_user:type_name -> common.v1.CrUpdUser
	22, // 3: invoice.v1.InvoiceHeader.cr_upd_time:type_name -> common.v1.CrUpdTime
	23, // 4: invoice.v1.InvoiceHeaderT.issue_date:type_name -> google.protobuf.Timestamp
	23, // 5: invoice.v1.InvoiceHeaderT.due_date:type_name -> google.protobuf.Timestamp
	23, // 6: invoice.v1.InvoiceHeaderT.tax_point_date:type_name -> google.protobuf.Timestamp
	23, // 7: invoice.v1.InvoiceHeaderT.invoice_period_start_date:type_name -> google.protobuf.Timestamp
	23, // 8: invoice.v1.InvoiceHeaderT.invoice_period_end_date:type_name -> google.protobuf.Timestamp
	23, // 9: invoice.v1.InvoiceHeaderT.tax_ex_date:type_name -> google.protobuf.Timestamp
	23, // 10: invoice.v1.InvoiceHeaderT.pricing_ex_date:type_name -> google.protobuf.Timestamp
	23, // 11: invoice.v1.InvoiceHeaderT.payment_ex_date:type_name -> google.protobuf.Timestamp
	23, // 12: invoice.v1.InvoiceHeaderT.payment_alt_ex_date:type_name -> google.protobuf.Timestamp
	16, // 13: invoice.v1.CreateInvoiceRequest.invoice_lines:type_name -> invoice.v1.CreateInvoiceLineRequest
	0,  // 14: invoice.v1.CreateInvoiceResponse.invoice_header:type_name -> invoice.v1.InvoiceHeader
	24, // 15: invoice.v1.GetInvoiceRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 16: invoice.v1.GetInvoiceResponse.invoice_header:type_name -> invoice.v1.InvoiceHeader
	25, // 17: invoice.v1.GetInvoiceByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 18: invoice.v1.GetInvoiceByPkResponse.invoice_header:type_name -> invoice.v1.InvoiceHeader
	0,  // 19: invoice.v1.GetInvoicesResponse.invoice_headers:type_name -> invoice.v1.InvoiceHeader
	14, // 20: invoice.v1.InvoiceLine.invoice_line_d:type_name -> invoice.v1.InvoiceLineD
	15, // 21: invoice.v1.InvoiceLine.invoice_line_t:type_name -> invoice.v1.InvoiceLineT
	21, // 22: invoice.v1.InvoiceLine.cr_upd_user:type_name -> common.v1.CrUpdUser
	22, // 23: invoice.v1.InvoiceLine.cr_upd_time:type_name -> common.v1.CrUpdTime
	23, // 24: invoice.v1.InvoiceLineT.tax_point_date:type_name -> google.protobuf.Timestamp
	23, // 25: invoice.v1.InvoiceLineT.invoice_period_start_date:type_name -> google.protobuf.Timestamp
	23, // 26: invoice.v1.InvoiceLineT.invoice_period_end_date:type_name -> google.protobuf.Timestamp
	23, // 27: invoice.v1.InvoiceLineT.price_validity_period_start_date:type_name -> google.protobuf.Timestamp
	23, // 28: invoice.v1.InvoiceLineT.price_validity_period_end_date:type_name -> google.protobuf.Timestamp
	13, // 29: invoice.v1.CreateInvoiceLineResponse.invoice_line:type_name -> invoice.v1.InvoiceLine
	24, // 30: invoice.v1.GetInvoiceLinesRequest.get_request:type_name -> common.v1.GetRequest
	13, // 31: invoice.v1.GetInvoiceLinesResponse.invoice_lines:type_name -> invoice.v1.InvoiceLine
	13, // 32: invoice.v1.InvoiceLines.invoice_lines:type_name -> invoice.v1.InvoiceLine
	3,  // 33: invoice.v1.InvoiceService.CreateInvoice:input_type -> invoice.v1.CreateInvoiceRequest
	11, // 34: invoice.v1.InvoiceService.GetInvoices:input_type -> invoice.v1.GetInvoicesRequest
	7,  // 35: invoice.v1.InvoiceService.GetInvoice:input_type -> invoice.v1.GetInvoiceRequest
	9,  // 36: invoice.v1.InvoiceService.GetInvoiceByPk:input_type -> invoice.v1.GetInvoiceByPkRequest
	16, // 37: invoice.v1.InvoiceService.CreateInvoiceLine:input_type -> invoice.v1.CreateInvoiceLineRequest
	18, // 38: invoice.v1.InvoiceService.GetInvoiceLines:input_type -> invoice.v1.GetInvoiceLinesRequest
	5,  // 39: invoice.v1.InvoiceService.UpdateInvoice:input_type -> invoice.v1.UpdateInvoiceRequest
	4,  // 40: invoice.v1.InvoiceService.CreateInvoice:output_type -> invoice.v1.CreateInvoiceResponse
	12, // 41: invoice.v1.InvoiceService.GetInvoices:output_type -> invoice.v1.GetInvoicesResponse
	8,  // 42: invoice.v1.InvoiceService.GetInvoice:output_type -> invoice.v1.GetInvoiceResponse
	10, // 43: invoice.v1.InvoiceService.GetInvoiceByPk:output_type -> invoice.v1.GetInvoiceByPkResponse
	17, // 44: invoice.v1.InvoiceService.CreateInvoiceLine:output_type -> invoice.v1.CreateInvoiceLineResponse
	19, // 45: invoice.v1.InvoiceService.GetInvoiceLines:output_type -> invoice.v1.GetInvoiceLinesResponse
	6,  // 46: invoice.v1.InvoiceService.UpdateInvoice:output_type -> invoice.v1.UpdateInvoiceResponse
	40, // [40:47] is the sub-list for method output_type
	33, // [33:40] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_invoice_v1_invoice_proto_init() }
func file_invoice_v1_invoice_proto_init() {
	if File_invoice_v1_invoice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_invoice_v1_invoice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_invoice_v1_invoice_proto_goTypes,
		DependencyIndexes: file_invoice_v1_invoice_proto_depIdxs,
		MessageInfos:      file_invoice_v1_invoice_proto_msgTypes,
	}.Build()
	File_invoice_v1_invoice_proto = out.File
	file_invoice_v1_invoice_proto_rawDesc = nil
	file_invoice_v1_invoice_proto_goTypes = nil
	file_invoice_v1_invoice_proto_depIdxs = nil
}
