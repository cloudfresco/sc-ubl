// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: item/v1/item.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemD                        *ItemD                         `protobuf:"bytes,1,opt,name=item_d,json=itemD,proto3" json:"item_d,omitempty"`
	CrUpdUser                    *v1.CrUpdUser                  `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                    *v1.CrUpdTime                  `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	ItemProperties               []*ItemProperty                `protobuf:"bytes,4,rep,name=item_properties,json=itemProperties,proto3" json:"item_properties,omitempty"`
	ItemDimensions               []*ItemDimension               `protobuf:"bytes,5,rep,name=item_dimensions,json=itemDimensions,proto3" json:"item_dimensions,omitempty"`
	ItemCommodityClassifications []*ItemCommodityClassification `protobuf:"bytes,6,rep,name=item_commodity_classifications,json=itemCommodityClassifications,proto3" json:"item_commodity_classifications,omitempty"`
	ItemCertificates             []*ItemCertificate             `protobuf:"bytes,7,rep,name=item_certificates,json=itemCertificates,proto3" json:"item_certificates,omitempty"`
	ItemInstances                []*ItemInstance                `protobuf:"bytes,8,rep,name=item_instances,json=itemInstances,proto3" json:"item_instances,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	mi := &file_item_v1_item_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{0}
}

func (x *Item) GetItemD() *ItemD {
	if x != nil {
		return x.ItemD
	}
	return nil
}

func (x *Item) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Item) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *Item) GetItemProperties() []*ItemProperty {
	if x != nil {
		return x.ItemProperties
	}
	return nil
}

func (x *Item) GetItemDimensions() []*ItemDimension {
	if x != nil {
		return x.ItemDimensions
	}
	return nil
}

func (x *Item) GetItemCommodityClassifications() []*ItemCommodityClassification {
	if x != nil {
		return x.ItemCommodityClassifications
	}
	return nil
}

func (x *Item) GetItemCertificates() []*ItemCertificate {
	if x != nil {
		return x.ItemCertificates
	}
	return nil
}

func (x *Item) GetItemInstances() []*ItemInstance {
	if x != nil {
		return x.ItemInstances
	}
	return nil
}

type ItemD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                             []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                               string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	Description                       string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	PackQuantity                      int64  `protobuf:"varint,5,opt,name=pack_quantity,json=packQuantity,proto3" json:"pack_quantity,omitempty"`
	PackSizeNumeric                   int64  `protobuf:"varint,6,opt,name=pack_size_numeric,json=packSizeNumeric,proto3" json:"pack_size_numeric,omitempty"`
	CatalogueIndicator                bool   `protobuf:"varint,7,opt,name=catalogue_indicator,json=catalogueIndicator,proto3" json:"catalogue_indicator,omitempty"`
	ItemName                          string `protobuf:"bytes,8,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	HazardousRiskIndicator            bool   `protobuf:"varint,9,opt,name=hazardous_risk_indicator,json=hazardousRiskIndicator,proto3" json:"hazardous_risk_indicator,omitempty"`
	AdditionalInformation             string `protobuf:"bytes,10,opt,name=additional_information,json=additionalInformation,proto3" json:"additional_information,omitempty"`
	Keyword                           string `protobuf:"bytes,11,opt,name=keyword,proto3" json:"keyword,omitempty"`
	BrandName                         string `protobuf:"bytes,12,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`
	ModelName                         string `protobuf:"bytes,13,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	BuyersItemIdentificationId        string `protobuf:"bytes,14,opt,name=buyers_item_identification_id,json=buyersItemIdentificationId,proto3" json:"buyers_item_identification_id,omitempty"`
	SellersItemIdentificationId       string `protobuf:"bytes,15,opt,name=sellers_item_identification_id,json=sellersItemIdentificationId,proto3" json:"sellers_item_identification_id,omitempty"`
	ManufacturersItemIdentificationId string `protobuf:"bytes,16,opt,name=manufacturers_item_identification_id,json=manufacturersItemIdentificationId,proto3" json:"manufacturers_item_identification_id,omitempty"`
	StandardItemIdentificationId      string `protobuf:"bytes,17,opt,name=standard_item_identification_id,json=standardItemIdentificationId,proto3" json:"standard_item_identification_id,omitempty"`
	CatalogueItemIdentificationId     string `protobuf:"bytes,18,opt,name=catalogue_item_identification_id,json=catalogueItemIdentificationId,proto3" json:"catalogue_item_identification_id,omitempty"`
	AdditionalItemIdentificationId    string `protobuf:"bytes,19,opt,name=additional_item_identification_id,json=additionalItemIdentificationId,proto3" json:"additional_item_identification_id,omitempty"`
	OriginCountryIdCode               string `protobuf:"bytes,20,opt,name=origin_country_id_code,json=originCountryIdCode,proto3" json:"origin_country_id_code,omitempty"`
	OriginCountryName                 string `protobuf:"bytes,21,opt,name=origin_country_name,json=originCountryName,proto3" json:"origin_country_name,omitempty"`
	ManufacturerPartyId               uint32 `protobuf:"varint,22,opt,name=manufacturer_party_id,json=manufacturerPartyId,proto3" json:"manufacturer_party_id,omitempty"`
	InformationContentProviderPartyId uint32 `protobuf:"varint,23,opt,name=information_content_provider_party_id,json=informationContentProviderPartyId,proto3" json:"information_content_provider_party_id,omitempty"`
	TaxCategoryId                     uint32 `protobuf:"varint,24,opt,name=tax_category_id,json=taxCategoryId,proto3" json:"tax_category_id,omitempty"`
}

func (x *ItemD) Reset() {
	*x = ItemD{}
	mi := &file_item_v1_item_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemD) ProtoMessage() {}

func (x *ItemD) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemD.ProtoReflect.Descriptor instead.
func (*ItemD) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{1}
}

func (x *ItemD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ItemD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ItemD) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ItemD) GetPackQuantity() int64 {
	if x != nil {
		return x.PackQuantity
	}
	return 0
}

func (x *ItemD) GetPackSizeNumeric() int64 {
	if x != nil {
		return x.PackSizeNumeric
	}
	return 0
}

func (x *ItemD) GetCatalogueIndicator() bool {
	if x != nil {
		return x.CatalogueIndicator
	}
	return false
}

func (x *ItemD) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *ItemD) GetHazardousRiskIndicator() bool {
	if x != nil {
		return x.HazardousRiskIndicator
	}
	return false
}

func (x *ItemD) GetAdditionalInformation() string {
	if x != nil {
		return x.AdditionalInformation
	}
	return ""
}

func (x *ItemD) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ItemD) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *ItemD) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ItemD) GetBuyersItemIdentificationId() string {
	if x != nil {
		return x.BuyersItemIdentificationId
	}
	return ""
}

func (x *ItemD) GetSellersItemIdentificationId() string {
	if x != nil {
		return x.SellersItemIdentificationId
	}
	return ""
}

func (x *ItemD) GetManufacturersItemIdentificationId() string {
	if x != nil {
		return x.ManufacturersItemIdentificationId
	}
	return ""
}

func (x *ItemD) GetStandardItemIdentificationId() string {
	if x != nil {
		return x.StandardItemIdentificationId
	}
	return ""
}

func (x *ItemD) GetCatalogueItemIdentificationId() string {
	if x != nil {
		return x.CatalogueItemIdentificationId
	}
	return ""
}

func (x *ItemD) GetAdditionalItemIdentificationId() string {
	if x != nil {
		return x.AdditionalItemIdentificationId
	}
	return ""
}

func (x *ItemD) GetOriginCountryIdCode() string {
	if x != nil {
		return x.OriginCountryIdCode
	}
	return ""
}

func (x *ItemD) GetOriginCountryName() string {
	if x != nil {
		return x.OriginCountryName
	}
	return ""
}

func (x *ItemD) GetManufacturerPartyId() uint32 {
	if x != nil {
		return x.ManufacturerPartyId
	}
	return 0
}

func (x *ItemD) GetInformationContentProviderPartyId() uint32 {
	if x != nil {
		return x.InformationContentProviderPartyId
	}
	return 0
}

func (x *ItemD) GetTaxCategoryId() uint32 {
	if x != nil {
		return x.TaxCategoryId
	}
	return 0
}

type CreateItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description                       string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	PackQuantity                      int64  `protobuf:"varint,2,opt,name=pack_quantity,json=packQuantity,proto3" json:"pack_quantity,omitempty"`
	PackSizeNumeric                   int64  `protobuf:"varint,3,opt,name=pack_size_numeric,json=packSizeNumeric,proto3" json:"pack_size_numeric,omitempty"`
	CatalogueIndicator                bool   `protobuf:"varint,4,opt,name=catalogue_indicator,json=catalogueIndicator,proto3" json:"catalogue_indicator,omitempty"`
	ItemName                          string `protobuf:"bytes,5,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	HazardousRiskIndicator            bool   `protobuf:"varint,6,opt,name=hazardous_risk_indicator,json=hazardousRiskIndicator,proto3" json:"hazardous_risk_indicator,omitempty"`
	AdditionalInformation             string `protobuf:"bytes,7,opt,name=additional_information,json=additionalInformation,proto3" json:"additional_information,omitempty"`
	Keyword                           string `protobuf:"bytes,8,opt,name=keyword,proto3" json:"keyword,omitempty"`
	BrandName                         string `protobuf:"bytes,9,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`
	ModelName                         string `protobuf:"bytes,10,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	BuyersItemIdentificationId        string `protobuf:"bytes,11,opt,name=buyers_item_identification_id,json=buyersItemIdentificationId,proto3" json:"buyers_item_identification_id,omitempty"`
	SellersItemIdentificationId       string `protobuf:"bytes,12,opt,name=sellers_item_identification_id,json=sellersItemIdentificationId,proto3" json:"sellers_item_identification_id,omitempty"`
	ManufacturersItemIdentificationId string `protobuf:"bytes,13,opt,name=manufacturers_item_identification_id,json=manufacturersItemIdentificationId,proto3" json:"manufacturers_item_identification_id,omitempty"`
	StandardItemIdentificationId      string `protobuf:"bytes,14,opt,name=standard_item_identification_id,json=standardItemIdentificationId,proto3" json:"standard_item_identification_id,omitempty"`
	CatalogueItemIdentificationId     string `protobuf:"bytes,15,opt,name=catalogue_item_identification_id,json=catalogueItemIdentificationId,proto3" json:"catalogue_item_identification_id,omitempty"`
	AdditionalItemIdentificationId    string `protobuf:"bytes,16,opt,name=additional_item_identification_id,json=additionalItemIdentificationId,proto3" json:"additional_item_identification_id,omitempty"`
	OriginCountryIdCode               string `protobuf:"bytes,17,opt,name=origin_country_id_code,json=originCountryIdCode,proto3" json:"origin_country_id_code,omitempty"`
	OriginCountryName                 string `protobuf:"bytes,18,opt,name=origin_country_name,json=originCountryName,proto3" json:"origin_country_name,omitempty"`
	ManufacturerPartyId               uint32 `protobuf:"varint,19,opt,name=manufacturer_party_id,json=manufacturerPartyId,proto3" json:"manufacturer_party_id,omitempty"`
	InformationContentProviderPartyId uint32 `protobuf:"varint,20,opt,name=information_content_provider_party_id,json=informationContentProviderPartyId,proto3" json:"information_content_provider_party_id,omitempty"`
	TaxCategoryId                     uint32 `protobuf:"varint,21,opt,name=tax_category_id,json=taxCategoryId,proto3" json:"tax_category_id,omitempty"`
	UserId                            string `protobuf:"bytes,22,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                         string `protobuf:"bytes,23,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                         string `protobuf:"bytes,24,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateItemRequest) Reset() {
	*x = CreateItemRequest{}
	mi := &file_item_v1_item_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemRequest) ProtoMessage() {}

func (x *CreateItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemRequest.ProtoReflect.Descriptor instead.
func (*CreateItemRequest) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{2}
}

func (x *CreateItemRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateItemRequest) GetPackQuantity() int64 {
	if x != nil {
		return x.PackQuantity
	}
	return 0
}

func (x *CreateItemRequest) GetPackSizeNumeric() int64 {
	if x != nil {
		return x.PackSizeNumeric
	}
	return 0
}

func (x *CreateItemRequest) GetCatalogueIndicator() bool {
	if x != nil {
		return x.CatalogueIndicator
	}
	return false
}

func (x *CreateItemRequest) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *CreateItemRequest) GetHazardousRiskIndicator() bool {
	if x != nil {
		return x.HazardousRiskIndicator
	}
	return false
}

func (x *CreateItemRequest) GetAdditionalInformation() string {
	if x != nil {
		return x.AdditionalInformation
	}
	return ""
}

func (x *CreateItemRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CreateItemRequest) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *CreateItemRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CreateItemRequest) GetBuyersItemIdentificationId() string {
	if x != nil {
		return x.BuyersItemIdentificationId
	}
	return ""
}

func (x *CreateItemRequest) GetSellersItemIdentificationId() string {
	if x != nil {
		return x.SellersItemIdentificationId
	}
	return ""
}

func (x *CreateItemRequest) GetManufacturersItemIdentificationId() string {
	if x != nil {
		return x.ManufacturersItemIdentificationId
	}
	return ""
}

func (x *CreateItemRequest) GetStandardItemIdentificationId() string {
	if x != nil {
		return x.StandardItemIdentificationId
	}
	return ""
}

func (x *CreateItemRequest) GetCatalogueItemIdentificationId() string {
	if x != nil {
		return x.CatalogueItemIdentificationId
	}
	return ""
}

func (x *CreateItemRequest) GetAdditionalItemIdentificationId() string {
	if x != nil {
		return x.AdditionalItemIdentificationId
	}
	return ""
}

func (x *CreateItemRequest) GetOriginCountryIdCode() string {
	if x != nil {
		return x.OriginCountryIdCode
	}
	return ""
}

func (x *CreateItemRequest) GetOriginCountryName() string {
	if x != nil {
		return x.OriginCountryName
	}
	return ""
}

func (x *CreateItemRequest) GetManufacturerPartyId() uint32 {
	if x != nil {
		return x.ManufacturerPartyId
	}
	return 0
}

func (x *CreateItemRequest) GetInformationContentProviderPartyId() uint32 {
	if x != nil {
		return x.InformationContentProviderPartyId
	}
	return 0
}

func (x *CreateItemRequest) GetTaxCategoryId() uint32 {
	if x != nil {
		return x.TaxCategoryId
	}
	return 0
}

func (x *CreateItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateItemRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateItemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *Item `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateItemResponse) Reset() {
	*x = CreateItemResponse{}
	mi := &file_item_v1_item_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemResponse) ProtoMessage() {}

func (x *CreateItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemResponse.ProtoReflect.Descriptor instead.
func (*CreateItemResponse) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{3}
}

func (x *CreateItemResponse) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type ItemProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemPropertyD      *ItemPropertyD       `protobuf:"bytes,1,opt,name=item_property_d,json=itemPropertyD,proto3" json:"item_property_d,omitempty"`
	ItemPropertyT      *ItemPropertyT       `protobuf:"bytes,2,opt,name=item_property_t,json=itemPropertyT,proto3" json:"item_property_t,omitempty"`
	CrUpdUser          *v1.CrUpdUser        `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime          *v1.CrUpdTime        `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	ItemPropertyGroups []*ItemPropertyGroup `protobuf:"bytes,20,rep,name=item_property_groups,json=itemPropertyGroups,proto3" json:"item_property_groups,omitempty"`
}

func (x *ItemProperty) Reset() {
	*x = ItemProperty{}
	mi := &file_item_v1_item_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemProperty) ProtoMessage() {}

func (x *ItemProperty) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemProperty.ProtoReflect.Descriptor instead.
func (*ItemProperty) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{4}
}

func (x *ItemProperty) GetItemPropertyD() *ItemPropertyD {
	if x != nil {
		return x.ItemPropertyD
	}
	return nil
}

func (x *ItemProperty) GetItemPropertyT() *ItemPropertyT {
	if x != nil {
		return x.ItemPropertyT
	}
	return nil
}

func (x *ItemProperty) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ItemProperty) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *ItemProperty) GetItemPropertyGroups() []*ItemPropertyGroup {
	if x != nil {
		return x.ItemPropertyGroups
	}
	return nil
}

type ItemPropertyD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                     []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                       string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ItemPropertyId            string  `protobuf:"bytes,4,opt,name=item_property_id,json=itemPropertyId,proto3" json:"item_property_id,omitempty"`
	ItemPropertyName          string  `protobuf:"bytes,5,opt,name=item_property_name,json=itemPropertyName,proto3" json:"item_property_name,omitempty"`
	ItemPropertyNameCode      string  `protobuf:"bytes,6,opt,name=item_property_name_code,json=itemPropertyNameCode,proto3" json:"item_property_name_code,omitempty"`
	TestMethod                string  `protobuf:"bytes,7,opt,name=test_method,json=testMethod,proto3" json:"test_method,omitempty"`
	Value                     string  `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	ValueQuantity             float64 `protobuf:"fixed64,9,opt,name=value_quantity,json=valueQuantity,proto3" json:"value_quantity,omitempty"`
	ValueQualifier            string  `protobuf:"bytes,10,opt,name=value_qualifier,json=valueQualifier,proto3" json:"value_qualifier,omitempty"`
	ImportanceCode            string  `protobuf:"bytes,11,opt,name=importance_code,json=importanceCode,proto3" json:"importance_code,omitempty"`
	ListValue                 string  `protobuf:"bytes,12,opt,name=list_value,json=listValue,proto3" json:"list_value,omitempty"`
	ItemPropertyRangeMeasure  float64 `protobuf:"fixed64,13,opt,name=item_property_range_measure,json=itemPropertyRangeMeasure,proto3" json:"item_property_range_measure,omitempty"`
	ItemPropertyRangeMinValue float64 `protobuf:"fixed64,14,opt,name=item_property_range_min_value,json=itemPropertyRangeMinValue,proto3" json:"item_property_range_min_value,omitempty"`
	ItemPropertyRangeMaxValue float64 `protobuf:"fixed64,15,opt,name=item_property_range_max_value,json=itemPropertyRangeMaxValue,proto3" json:"item_property_range_max_value,omitempty"`
	ItemId                    uint32  `protobuf:"varint,16,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *ItemPropertyD) Reset() {
	*x = ItemPropertyD{}
	mi := &file_item_v1_item_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemPropertyD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemPropertyD) ProtoMessage() {}

func (x *ItemPropertyD) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemPropertyD.ProtoReflect.Descriptor instead.
func (*ItemPropertyD) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{5}
}

func (x *ItemPropertyD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemPropertyD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ItemPropertyD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ItemPropertyD) GetItemPropertyId() string {
	if x != nil {
		return x.ItemPropertyId
	}
	return ""
}

func (x *ItemPropertyD) GetItemPropertyName() string {
	if x != nil {
		return x.ItemPropertyName
	}
	return ""
}

func (x *ItemPropertyD) GetItemPropertyNameCode() string {
	if x != nil {
		return x.ItemPropertyNameCode
	}
	return ""
}

func (x *ItemPropertyD) GetTestMethod() string {
	if x != nil {
		return x.TestMethod
	}
	return ""
}

func (x *ItemPropertyD) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ItemPropertyD) GetValueQuantity() float64 {
	if x != nil {
		return x.ValueQuantity
	}
	return 0
}

func (x *ItemPropertyD) GetValueQualifier() string {
	if x != nil {
		return x.ValueQualifier
	}
	return ""
}

func (x *ItemPropertyD) GetImportanceCode() string {
	if x != nil {
		return x.ImportanceCode
	}
	return ""
}

func (x *ItemPropertyD) GetListValue() string {
	if x != nil {
		return x.ListValue
	}
	return ""
}

func (x *ItemPropertyD) GetItemPropertyRangeMeasure() float64 {
	if x != nil {
		return x.ItemPropertyRangeMeasure
	}
	return 0
}

func (x *ItemPropertyD) GetItemPropertyRangeMinValue() float64 {
	if x != nil {
		return x.ItemPropertyRangeMinValue
	}
	return 0
}

func (x *ItemPropertyD) GetItemPropertyRangeMaxValue() float64 {
	if x != nil {
		return x.ItemPropertyRangeMaxValue
	}
	return 0
}

func (x *ItemPropertyD) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type ItemPropertyT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsabilityPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=usability_period_start_date,json=usabilityPeriodStartDate,proto3" json:"usability_period_start_date,omitempty"`
	UsabilityPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=usability_period_end_date,json=usabilityPeriodEndDate,proto3" json:"usability_period_end_date,omitempty"`
}

func (x *ItemPropertyT) Reset() {
	*x = ItemPropertyT{}
	mi := &file_item_v1_item_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemPropertyT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemPropertyT) ProtoMessage() {}

func (x *ItemPropertyT) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemPropertyT.ProtoReflect.Descriptor instead.
func (*ItemPropertyT) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{6}
}

func (x *ItemPropertyT) GetUsabilityPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UsabilityPeriodStartDate
	}
	return nil
}

func (x *ItemPropertyT) GetUsabilityPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UsabilityPeriodEndDate
	}
	return nil
}

type CreateItemPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemPropertyId            string  `protobuf:"bytes,1,opt,name=item_property_id,json=itemPropertyId,proto3" json:"item_property_id,omitempty"`
	ItemPropertyName          string  `protobuf:"bytes,2,opt,name=item_property_name,json=itemPropertyName,proto3" json:"item_property_name,omitempty"`
	ItemPropertyNameCode      string  `protobuf:"bytes,3,opt,name=item_property_name_code,json=itemPropertyNameCode,proto3" json:"item_property_name_code,omitempty"`
	TestMethod                string  `protobuf:"bytes,4,opt,name=test_method,json=testMethod,proto3" json:"test_method,omitempty"`
	Value                     string  `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	ValueQuantity             float64 `protobuf:"fixed64,6,opt,name=value_quantity,json=valueQuantity,proto3" json:"value_quantity,omitempty"`
	ValueQualifier            string  `protobuf:"bytes,7,opt,name=value_qualifier,json=valueQualifier,proto3" json:"value_qualifier,omitempty"`
	ImportanceCode            string  `protobuf:"bytes,8,opt,name=importance_code,json=importanceCode,proto3" json:"importance_code,omitempty"`
	ListValue                 string  `protobuf:"bytes,9,opt,name=list_value,json=listValue,proto3" json:"list_value,omitempty"`
	UsabilityPeriodStartDate  string  `protobuf:"bytes,10,opt,name=usability_period_start_date,json=usabilityPeriodStartDate,proto3" json:"usability_period_start_date,omitempty"`
	UsabilityPeriodEndDate    string  `protobuf:"bytes,11,opt,name=usability_period_end_date,json=usabilityPeriodEndDate,proto3" json:"usability_period_end_date,omitempty"`
	ItemPropertyRangeMeasure  float64 `protobuf:"fixed64,12,opt,name=item_property_range_measure,json=itemPropertyRangeMeasure,proto3" json:"item_property_range_measure,omitempty"`
	ItemPropertyRangeMinValue float64 `protobuf:"fixed64,13,opt,name=item_property_range_min_value,json=itemPropertyRangeMinValue,proto3" json:"item_property_range_min_value,omitempty"`
	ItemPropertyRangeMaxValue float64 `protobuf:"fixed64,14,opt,name=item_property_range_max_value,json=itemPropertyRangeMaxValue,proto3" json:"item_property_range_max_value,omitempty"`
	ItemId                    uint32  `protobuf:"varint,15,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	UserId                    string  `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string  `protobuf:"bytes,17,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string  `protobuf:"bytes,18,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateItemPropertyRequest) Reset() {
	*x = CreateItemPropertyRequest{}
	mi := &file_item_v1_item_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemPropertyRequest) ProtoMessage() {}

func (x *CreateItemPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemPropertyRequest.ProtoReflect.Descriptor instead.
func (*CreateItemPropertyRequest) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{7}
}

func (x *CreateItemPropertyRequest) GetItemPropertyId() string {
	if x != nil {
		return x.ItemPropertyId
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetItemPropertyName() string {
	if x != nil {
		return x.ItemPropertyName
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetItemPropertyNameCode() string {
	if x != nil {
		return x.ItemPropertyNameCode
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetTestMethod() string {
	if x != nil {
		return x.TestMethod
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetValueQuantity() float64 {
	if x != nil {
		return x.ValueQuantity
	}
	return 0
}

func (x *CreateItemPropertyRequest) GetValueQualifier() string {
	if x != nil {
		return x.ValueQualifier
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetImportanceCode() string {
	if x != nil {
		return x.ImportanceCode
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetListValue() string {
	if x != nil {
		return x.ListValue
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetUsabilityPeriodStartDate() string {
	if x != nil {
		return x.UsabilityPeriodStartDate
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetUsabilityPeriodEndDate() string {
	if x != nil {
		return x.UsabilityPeriodEndDate
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetItemPropertyRangeMeasure() float64 {
	if x != nil {
		return x.ItemPropertyRangeMeasure
	}
	return 0
}

func (x *CreateItemPropertyRequest) GetItemPropertyRangeMinValue() float64 {
	if x != nil {
		return x.ItemPropertyRangeMinValue
	}
	return 0
}

func (x *CreateItemPropertyRequest) GetItemPropertyRangeMaxValue() float64 {
	if x != nil {
		return x.ItemPropertyRangeMaxValue
	}
	return 0
}

func (x *CreateItemPropertyRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateItemPropertyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateItemPropertyRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateItemPropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemProperty *ItemProperty `protobuf:"bytes,1,opt,name=item_property,json=itemProperty,proto3" json:"item_property,omitempty"`
}

func (x *CreateItemPropertyResponse) Reset() {
	*x = CreateItemPropertyResponse{}
	mi := &file_item_v1_item_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemPropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemPropertyResponse) ProtoMessage() {}

func (x *CreateItemPropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemPropertyResponse.ProtoReflect.Descriptor instead.
func (*CreateItemPropertyResponse) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{8}
}

func (x *CreateItemPropertyResponse) GetItemProperty() *ItemProperty {
	if x != nil {
		return x.ItemProperty
	}
	return nil
}

type ItemPropertyGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                           []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                             string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ItemPropertyGroupId             string `protobuf:"bytes,4,opt,name=item_property_group_id,json=itemPropertyGroupId,proto3" json:"item_property_group_id,omitempty"`
	ItemPropertyGroupName           string `protobuf:"bytes,5,opt,name=item_property_group_name,json=itemPropertyGroupName,proto3" json:"item_property_group_name,omitempty"`
	ItemPropertyGroupImportanceCode string `protobuf:"bytes,6,opt,name=item_property_group_importance_code,json=itemPropertyGroupImportanceCode,proto3" json:"item_property_group_importance_code,omitempty"`
	ItemPropertyId                  uint32 `protobuf:"varint,7,opt,name=item_property_id,json=itemPropertyId,proto3" json:"item_property_id,omitempty"`
}

func (x *ItemPropertyGroup) Reset() {
	*x = ItemPropertyGroup{}
	mi := &file_item_v1_item_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemPropertyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemPropertyGroup) ProtoMessage() {}

func (x *ItemPropertyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemPropertyGroup.ProtoReflect.Descriptor instead.
func (*ItemPropertyGroup) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{9}
}

func (x *ItemPropertyGroup) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemPropertyGroup) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ItemPropertyGroup) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ItemPropertyGroup) GetItemPropertyGroupId() string {
	if x != nil {
		return x.ItemPropertyGroupId
	}
	return ""
}

func (x *ItemPropertyGroup) GetItemPropertyGroupName() string {
	if x != nil {
		return x.ItemPropertyGroupName
	}
	return ""
}

func (x *ItemPropertyGroup) GetItemPropertyGroupImportanceCode() string {
	if x != nil {
		return x.ItemPropertyGroupImportanceCode
	}
	return ""
}

func (x *ItemPropertyGroup) GetItemPropertyId() uint32 {
	if x != nil {
		return x.ItemPropertyId
	}
	return 0
}

type CreateItemPropertyGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemPropertyGroupId             string `protobuf:"bytes,1,opt,name=item_property_group_id,json=itemPropertyGroupId,proto3" json:"item_property_group_id,omitempty"`
	ItemPropertyGroupName           string `protobuf:"bytes,2,opt,name=item_property_group_name,json=itemPropertyGroupName,proto3" json:"item_property_group_name,omitempty"`
	ItemPropertyGroupImportanceCode string `protobuf:"bytes,3,opt,name=item_property_group_importance_code,json=itemPropertyGroupImportanceCode,proto3" json:"item_property_group_importance_code,omitempty"`
	ItemPropertyId                  uint32 `protobuf:"varint,4,opt,name=item_property_id,json=itemPropertyId,proto3" json:"item_property_id,omitempty"`
	UserId                          string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                       string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                       string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateItemPropertyGroupRequest) Reset() {
	*x = CreateItemPropertyGroupRequest{}
	mi := &file_item_v1_item_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemPropertyGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemPropertyGroupRequest) ProtoMessage() {}

func (x *CreateItemPropertyGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemPropertyGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateItemPropertyGroupRequest) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{10}
}

func (x *CreateItemPropertyGroupRequest) GetItemPropertyGroupId() string {
	if x != nil {
		return x.ItemPropertyGroupId
	}
	return ""
}

func (x *CreateItemPropertyGroupRequest) GetItemPropertyGroupName() string {
	if x != nil {
		return x.ItemPropertyGroupName
	}
	return ""
}

func (x *CreateItemPropertyGroupRequest) GetItemPropertyGroupImportanceCode() string {
	if x != nil {
		return x.ItemPropertyGroupImportanceCode
	}
	return ""
}

func (x *CreateItemPropertyGroupRequest) GetItemPropertyId() uint32 {
	if x != nil {
		return x.ItemPropertyId
	}
	return 0
}

func (x *CreateItemPropertyGroupRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateItemPropertyGroupRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateItemPropertyGroupRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateItemPropertyGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemPropertyGroup *ItemPropertyGroup `protobuf:"bytes,1,opt,name=item_property_group,json=itemPropertyGroup,proto3" json:"item_property_group,omitempty"`
}

func (x *CreateItemPropertyGroupResponse) Reset() {
	*x = CreateItemPropertyGroupResponse{}
	mi := &file_item_v1_item_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemPropertyGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemPropertyGroupResponse) ProtoMessage() {}

func (x *CreateItemPropertyGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemPropertyGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateItemPropertyGroupResponse) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{11}
}

func (x *CreateItemPropertyGroupResponse) GetItemPropertyGroup() *ItemPropertyGroup {
	if x != nil {
		return x.ItemPropertyGroup
	}
	return nil
}

type ItemDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AttributeId    string  `protobuf:"bytes,2,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	Measure        float64 `protobuf:"fixed64,3,opt,name=measure,proto3" json:"measure,omitempty"`
	Description    string  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MinimumMeasure float64 `protobuf:"fixed64,5,opt,name=minimum_measure,json=minimumMeasure,proto3" json:"minimum_measure,omitempty"`
	MaximumMeasure float64 `protobuf:"fixed64,6,opt,name=maximum_measure,json=maximumMeasure,proto3" json:"maximum_measure,omitempty"`
	ItemId         uint32  `protobuf:"varint,7,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *ItemDimension) Reset() {
	*x = ItemDimension{}
	mi := &file_item_v1_item_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemDimension) ProtoMessage() {}

func (x *ItemDimension) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemDimension.ProtoReflect.Descriptor instead.
func (*ItemDimension) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{12}
}

func (x *ItemDimension) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemDimension) GetAttributeId() string {
	if x != nil {
		return x.AttributeId
	}
	return ""
}

func (x *ItemDimension) GetMeasure() float64 {
	if x != nil {
		return x.Measure
	}
	return 0
}

func (x *ItemDimension) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ItemDimension) GetMinimumMeasure() float64 {
	if x != nil {
		return x.MinimumMeasure
	}
	return 0
}

func (x *ItemDimension) GetMaximumMeasure() float64 {
	if x != nil {
		return x.MaximumMeasure
	}
	return 0
}

func (x *ItemDimension) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type CreateItemDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId    string  `protobuf:"bytes,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	Measure        float64 `protobuf:"fixed64,2,opt,name=measure,proto3" json:"measure,omitempty"`
	Description    string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MinimumMeasure float64 `protobuf:"fixed64,4,opt,name=minimum_measure,json=minimumMeasure,proto3" json:"minimum_measure,omitempty"`
	MaximumMeasure float64 `protobuf:"fixed64,5,opt,name=maximum_measure,json=maximumMeasure,proto3" json:"maximum_measure,omitempty"`
	ItemId         uint32  `protobuf:"varint,6,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	UserId         string  `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail      string  `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId      string  `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateItemDimensionRequest) Reset() {
	*x = CreateItemDimensionRequest{}
	mi := &file_item_v1_item_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemDimensionRequest) ProtoMessage() {}

func (x *CreateItemDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemDimensionRequest.ProtoReflect.Descriptor instead.
func (*CreateItemDimensionRequest) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{13}
}

func (x *CreateItemDimensionRequest) GetAttributeId() string {
	if x != nil {
		return x.AttributeId
	}
	return ""
}

func (x *CreateItemDimensionRequest) GetMeasure() float64 {
	if x != nil {
		return x.Measure
	}
	return 0
}

func (x *CreateItemDimensionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateItemDimensionRequest) GetMinimumMeasure() float64 {
	if x != nil {
		return x.MinimumMeasure
	}
	return 0
}

func (x *CreateItemDimensionRequest) GetMaximumMeasure() float64 {
	if x != nil {
		return x.MaximumMeasure
	}
	return 0
}

func (x *CreateItemDimensionRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateItemDimensionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateItemDimensionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateItemDimensionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateItemDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDimension *ItemDimension `protobuf:"bytes,1,opt,name=item_dimension,json=itemDimension,proto3" json:"item_dimension,omitempty"`
}

func (x *CreateItemDimensionResponse) Reset() {
	*x = CreateItemDimensionResponse{}
	mi := &file_item_v1_item_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemDimensionResponse) ProtoMessage() {}

func (x *CreateItemDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemDimensionResponse.ProtoReflect.Descriptor instead.
func (*CreateItemDimensionResponse) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{14}
}

func (x *CreateItemDimensionResponse) GetItemDimension() *ItemDimension {
	if x != nil {
		return x.ItemDimension
	}
	return nil
}

type ItemCommodityClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NatureCode             string `protobuf:"bytes,2,opt,name=nature_code,json=natureCode,proto3" json:"nature_code,omitempty"`
	CargoTypeCode          string `protobuf:"bytes,3,opt,name=cargo_type_code,json=cargoTypeCode,proto3" json:"cargo_type_code,omitempty"`
	CommodityCode          string `protobuf:"bytes,4,opt,name=commodity_code,json=commodityCode,proto3" json:"commodity_code,omitempty"`
	ItemClassificationCode string `protobuf:"bytes,5,opt,name=item_classification_code,json=itemClassificationCode,proto3" json:"item_classification_code,omitempty"`
	ItemId                 uint32 `protobuf:"varint,6,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *ItemCommodityClassification) Reset() {
	*x = ItemCommodityClassification{}
	mi := &file_item_v1_item_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemCommodityClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemCommodityClassification) ProtoMessage() {}

func (x *ItemCommodityClassification) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemCommodityClassification.ProtoReflect.Descriptor instead.
func (*ItemCommodityClassification) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{15}
}

func (x *ItemCommodityClassification) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemCommodityClassification) GetNatureCode() string {
	if x != nil {
		return x.NatureCode
	}
	return ""
}

func (x *ItemCommodityClassification) GetCargoTypeCode() string {
	if x != nil {
		return x.CargoTypeCode
	}
	return ""
}

func (x *ItemCommodityClassification) GetCommodityCode() string {
	if x != nil {
		return x.CommodityCode
	}
	return ""
}

func (x *ItemCommodityClassification) GetItemClassificationCode() string {
	if x != nil {
		return x.ItemClassificationCode
	}
	return ""
}

func (x *ItemCommodityClassification) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type CreateItemCommodityClassificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatureCode             string `protobuf:"bytes,1,opt,name=nature_code,json=natureCode,proto3" json:"nature_code,omitempty"`
	CargoTypeCode          string `protobuf:"bytes,2,opt,name=cargo_type_code,json=cargoTypeCode,proto3" json:"cargo_type_code,omitempty"`
	CommodityCode          string `protobuf:"bytes,3,opt,name=commodity_code,json=commodityCode,proto3" json:"commodity_code,omitempty"`
	ItemClassificationCode string `protobuf:"bytes,4,opt,name=item_classification_code,json=itemClassificationCode,proto3" json:"item_classification_code,omitempty"`
	ItemId                 uint32 `protobuf:"varint,5,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	UserId                 string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateItemCommodityClassificationRequest) Reset() {
	*x = CreateItemCommodityClassificationRequest{}
	mi := &file_item_v1_item_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemCommodityClassificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemCommodityClassificationRequest) ProtoMessage() {}

func (x *CreateItemCommodityClassificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemCommodityClassificationRequest.ProtoReflect.Descriptor instead.
func (*CreateItemCommodityClassificationRequest) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{16}
}

func (x *CreateItemCommodityClassificationRequest) GetNatureCode() string {
	if x != nil {
		return x.NatureCode
	}
	return ""
}

func (x *CreateItemCommodityClassificationRequest) GetCargoTypeCode() string {
	if x != nil {
		return x.CargoTypeCode
	}
	return ""
}

func (x *CreateItemCommodityClassificationRequest) GetCommodityCode() string {
	if x != nil {
		return x.CommodityCode
	}
	return ""
}

func (x *CreateItemCommodityClassificationRequest) GetItemClassificationCode() string {
	if x != nil {
		return x.ItemClassificationCode
	}
	return ""
}

func (x *CreateItemCommodityClassificationRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateItemCommodityClassificationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateItemCommodityClassificationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateItemCommodityClassificationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateItemCommodityClassificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCommodityClassification *ItemCommodityClassification `protobuf:"bytes,1,opt,name=item_commodity_classification,json=itemCommodityClassification,proto3" json:"item_commodity_classification,omitempty"`
}

func (x *CreateItemCommodityClassificationResponse) Reset() {
	*x = CreateItemCommodityClassificationResponse{}
	mi := &file_item_v1_item_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemCommodityClassificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemCommodityClassificationResponse) ProtoMessage() {}

func (x *CreateItemCommodityClassificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemCommodityClassificationResponse.ProtoReflect.Descriptor instead.
func (*CreateItemCommodityClassificationResponse) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{17}
}

func (x *CreateItemCommodityClassificationResponse) GetItemCommodityClassification() *ItemCommodityClassification {
	if x != nil {
		return x.ItemCommodityClassification
	}
	return nil
}

type ItemCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CertId              string `protobuf:"bytes,2,opt,name=cert_id,json=certId,proto3" json:"cert_id,omitempty"`
	CertificateTypeCode string `protobuf:"bytes,3,opt,name=certificate_type_code,json=certificateTypeCode,proto3" json:"certificate_type_code,omitempty"`
	CertificateType     string `protobuf:"bytes,4,opt,name=certificate_type,json=certificateType,proto3" json:"certificate_type,omitempty"`
	Remarks             string `protobuf:"bytes,5,opt,name=remarks,proto3" json:"remarks,omitempty"`
	PartyId             uint32 `protobuf:"varint,6,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	ItemId              uint32 `protobuf:"varint,7,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *ItemCertificate) Reset() {
	*x = ItemCertificate{}
	mi := &file_item_v1_item_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemCertificate) ProtoMessage() {}

func (x *ItemCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemCertificate.ProtoReflect.Descriptor instead.
func (*ItemCertificate) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{18}
}

func (x *ItemCertificate) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemCertificate) GetCertId() string {
	if x != nil {
		return x.CertId
	}
	return ""
}

func (x *ItemCertificate) GetCertificateTypeCode() string {
	if x != nil {
		return x.CertificateTypeCode
	}
	return ""
}

func (x *ItemCertificate) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *ItemCertificate) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ItemCertificate) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *ItemCertificate) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type CreateItemCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertId              string `protobuf:"bytes,1,opt,name=cert_id,json=certId,proto3" json:"cert_id,omitempty"`
	CertificateTypeCode string `protobuf:"bytes,2,opt,name=certificate_type_code,json=certificateTypeCode,proto3" json:"certificate_type_code,omitempty"`
	CertificateType     string `protobuf:"bytes,3,opt,name=certificate_type,json=certificateType,proto3" json:"certificate_type,omitempty"`
	Remarks             string `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
	PartyId             uint32 `protobuf:"varint,5,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	ItemId              uint32 `protobuf:"varint,6,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	UserId              string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail           string `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId           string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateItemCertificateRequest) Reset() {
	*x = CreateItemCertificateRequest{}
	mi := &file_item_v1_item_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemCertificateRequest) ProtoMessage() {}

func (x *CreateItemCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemCertificateRequest.ProtoReflect.Descriptor instead.
func (*CreateItemCertificateRequest) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{19}
}

func (x *CreateItemCertificateRequest) GetCertId() string {
	if x != nil {
		return x.CertId
	}
	return ""
}

func (x *CreateItemCertificateRequest) GetCertificateTypeCode() string {
	if x != nil {
		return x.CertificateTypeCode
	}
	return ""
}

func (x *CreateItemCertificateRequest) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *CreateItemCertificateRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CreateItemCertificateRequest) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *CreateItemCertificateRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateItemCertificateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateItemCertificateRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateItemCertificateRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateItemCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCertificate *ItemCertificate `protobuf:"bytes,1,opt,name=item_certificate,json=itemCertificate,proto3" json:"item_certificate,omitempty"`
}

func (x *CreateItemCertificateResponse) Reset() {
	*x = CreateItemCertificateResponse{}
	mi := &file_item_v1_item_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemCertificateResponse) ProtoMessage() {}

func (x *CreateItemCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemCertificateResponse.ProtoReflect.Descriptor instead.
func (*CreateItemCertificateResponse) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{20}
}

func (x *CreateItemCertificateResponse) GetItemCertificate() *ItemCertificate {
	if x != nil {
		return x.ItemCertificate
	}
	return nil
}

type ItemInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemInstanceD *ItemInstanceD `protobuf:"bytes,1,opt,name=item_instance_d,json=itemInstanceD,proto3" json:"item_instance_d,omitempty"`
	ItemInstanceT *ItemInstanceT `protobuf:"bytes,2,opt,name=item_instance_t,json=itemInstanceT,proto3" json:"item_instance_t,omitempty"`
	CrUpdUser     *v1.CrUpdUser  `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime     *v1.CrUpdTime  `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *ItemInstance) Reset() {
	*x = ItemInstance{}
	mi := &file_item_v1_item_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInstance) ProtoMessage() {}

func (x *ItemInstance) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInstance.ProtoReflect.Descriptor instead.
func (*ItemInstance) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{21}
}

func (x *ItemInstance) GetItemInstanceD() *ItemInstanceD {
	if x != nil {
		return x.ItemInstanceD
	}
	return nil
}

func (x *ItemInstance) GetItemInstanceT() *ItemInstanceT {
	if x != nil {
		return x.ItemInstanceT
	}
	return nil
}

func (x *ItemInstance) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ItemInstance) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ItemInstanceD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4          []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS            string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ProductTraceId string `protobuf:"bytes,4,opt,name=product_trace_id,json=productTraceId,proto3" json:"product_trace_id,omitempty"`
	RegistrationId string `protobuf:"bytes,5,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	SerialId       string `protobuf:"bytes,6,opt,name=serial_id,json=serialId,proto3" json:"serial_id,omitempty"`
	LotNumberId    string `protobuf:"bytes,7,opt,name=lot_number_id,json=lotNumberId,proto3" json:"lot_number_id,omitempty"`
	ItemId         uint32 `protobuf:"varint,8,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *ItemInstanceD) Reset() {
	*x = ItemInstanceD{}
	mi := &file_item_v1_item_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemInstanceD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInstanceD) ProtoMessage() {}

func (x *ItemInstanceD) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInstanceD.ProtoReflect.Descriptor instead.
func (*ItemInstanceD) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{22}
}

func (x *ItemInstanceD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemInstanceD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ItemInstanceD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ItemInstanceD) GetProductTraceId() string {
	if x != nil {
		return x.ProductTraceId
	}
	return ""
}

func (x *ItemInstanceD) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *ItemInstanceD) GetSerialId() string {
	if x != nil {
		return x.SerialId
	}
	return ""
}

func (x *ItemInstanceD) GetLotNumberId() string {
	if x != nil {
		return x.LotNumberId
	}
	return ""
}

func (x *ItemInstanceD) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type ItemInstanceT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManufactureDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=manufacture_date,json=manufactureDate,proto3" json:"manufacture_date,omitempty"`
	BestBeforeDate  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=best_before_date,json=bestBeforeDate,proto3" json:"best_before_date,omitempty"`
	LotExpiryDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lot_expiry_date,json=lotExpiryDate,proto3" json:"lot_expiry_date,omitempty"`
}

func (x *ItemInstanceT) Reset() {
	*x = ItemInstanceT{}
	mi := &file_item_v1_item_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemInstanceT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInstanceT) ProtoMessage() {}

func (x *ItemInstanceT) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInstanceT.ProtoReflect.Descriptor instead.
func (*ItemInstanceT) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{23}
}

func (x *ItemInstanceT) GetManufactureDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ManufactureDate
	}
	return nil
}

func (x *ItemInstanceT) GetBestBeforeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BestBeforeDate
	}
	return nil
}

func (x *ItemInstanceT) GetLotExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LotExpiryDate
	}
	return nil
}

type CreateItemInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductTraceId  string `protobuf:"bytes,1,opt,name=product_trace_id,json=productTraceId,proto3" json:"product_trace_id,omitempty"`
	ManufactureDate string `protobuf:"bytes,2,opt,name=manufacture_date,json=manufactureDate,proto3" json:"manufacture_date,omitempty"`
	BestBeforeDate  string `protobuf:"bytes,3,opt,name=best_before_date,json=bestBeforeDate,proto3" json:"best_before_date,omitempty"`
	RegistrationId  string `protobuf:"bytes,4,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	SerialId        string `protobuf:"bytes,5,opt,name=serial_id,json=serialId,proto3" json:"serial_id,omitempty"`
	LotNumberId     string `protobuf:"bytes,6,opt,name=lot_number_id,json=lotNumberId,proto3" json:"lot_number_id,omitempty"`
	LotExpiryDate   string `protobuf:"bytes,7,opt,name=lot_expiry_date,json=lotExpiryDate,proto3" json:"lot_expiry_date,omitempty"`
	ItemId          uint32 `protobuf:"varint,8,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	UserId          string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail       string `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId       string `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateItemInstanceRequest) Reset() {
	*x = CreateItemInstanceRequest{}
	mi := &file_item_v1_item_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemInstanceRequest) ProtoMessage() {}

func (x *CreateItemInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateItemInstanceRequest) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{24}
}

func (x *CreateItemInstanceRequest) GetProductTraceId() string {
	if x != nil {
		return x.ProductTraceId
	}
	return ""
}

func (x *CreateItemInstanceRequest) GetManufactureDate() string {
	if x != nil {
		return x.ManufactureDate
	}
	return ""
}

func (x *CreateItemInstanceRequest) GetBestBeforeDate() string {
	if x != nil {
		return x.BestBeforeDate
	}
	return ""
}

func (x *CreateItemInstanceRequest) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *CreateItemInstanceRequest) GetSerialId() string {
	if x != nil {
		return x.SerialId
	}
	return ""
}

func (x *CreateItemInstanceRequest) GetLotNumberId() string {
	if x != nil {
		return x.LotNumberId
	}
	return ""
}

func (x *CreateItemInstanceRequest) GetLotExpiryDate() string {
	if x != nil {
		return x.LotExpiryDate
	}
	return ""
}

func (x *CreateItemInstanceRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateItemInstanceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateItemInstanceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateItemInstanceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateItemInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemInstance *ItemInstance `protobuf:"bytes,1,opt,name=item_instance,json=itemInstance,proto3" json:"item_instance,omitempty"`
}

func (x *CreateItemInstanceResponse) Reset() {
	*x = CreateItemInstanceResponse{}
	mi := &file_item_v1_item_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateItemInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemInstanceResponse) ProtoMessage() {}

func (x *CreateItemInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_item_v1_item_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateItemInstanceResponse) Descriptor() ([]byte, []int) {
	return file_item_v1_item_proto_rawDescGZIP(), []int{25}
}

func (x *CreateItemInstanceResponse) GetItemInstance() *ItemInstance {
	if x != nil {
		return x.ItemInstance
	}
	return nil
}

var File_item_v1_item_proto protoreflect.FileDescriptor

var file_item_v1_item_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x04, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x25, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x1e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1c, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x45, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x74, 0x65,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x91, 0x09, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x7a, 0x61,
	0x72, 0x64, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x7a, 0x61,
	0x72, 0x64, 0x6f, 0x75, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x1d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x24, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x50,
	0x0a, 0x25, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xbb, 0x09, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x18, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75, 0x73, 0x52, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4f, 0x0a, 0x24, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x74, 0x65,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0xc8, 0x02, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x3e, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x44, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44,
	0x12, 0x3e, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x74, 0x65,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x82, 0x05, 0x0a, 0x0d, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x74, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x69, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x69, 0x74, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0xc1, 0x01, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x12, 0x59, 0x0a, 0x1b, 0x75, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x18, 0x75, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x19,
	0x75, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x75, 0x73, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xa6, 0x06, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x74, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x75, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x75, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x75, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18,
	0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x19, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xb2, 0x02, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1f, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x74, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x23,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x69, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xe9, 0x01, 0x0a, 0x0d, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x1b, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x95,
	0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1d,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x69, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0xbb, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x64,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x12, 0x3e, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x12, 0x45, 0x0a, 0x10, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c,
	0x6f, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9c, 0x03, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0xd7, 0x05, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1a, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x22, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x74, 0x65,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75, 0x62, 0x6c,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67,
	0x65, 0x6e, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_item_v1_item_proto_rawDescOnce sync.Once
	file_item_v1_item_proto_rawDescData = file_item_v1_item_proto_rawDesc
)

func file_item_v1_item_proto_rawDescGZIP() []byte {
	file_item_v1_item_proto_rawDescOnce.Do(func() {
		file_item_v1_item_proto_rawDescData = protoimpl.X.CompressGZIP(file_item_v1_item_proto_rawDescData)
	})
	return file_item_v1_item_proto_rawDescData
}

var file_item_v1_item_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_item_v1_item_proto_goTypes = []any{
	(*Item)(nil),                                      // 0: item.v1.Item
	(*ItemD)(nil),                                     // 1: item.v1.ItemD
	(*CreateItemRequest)(nil),                         // 2: item.v1.CreateItemRequest
	(*CreateItemResponse)(nil),                        // 3: item.v1.CreateItemResponse
	(*ItemProperty)(nil),                              // 4: item.v1.ItemProperty
	(*ItemPropertyD)(nil),                             // 5: item.v1.ItemPropertyD
	(*ItemPropertyT)(nil),                             // 6: item.v1.ItemPropertyT
	(*CreateItemPropertyRequest)(nil),                 // 7: item.v1.CreateItemPropertyRequest
	(*CreateItemPropertyResponse)(nil),                // 8: item.v1.CreateItemPropertyResponse
	(*ItemPropertyGroup)(nil),                         // 9: item.v1.ItemPropertyGroup
	(*CreateItemPropertyGroupRequest)(nil),            // 10: item.v1.CreateItemPropertyGroupRequest
	(*CreateItemPropertyGroupResponse)(nil),           // 11: item.v1.CreateItemPropertyGroupResponse
	(*ItemDimension)(nil),                             // 12: item.v1.ItemDimension
	(*CreateItemDimensionRequest)(nil),                // 13: item.v1.CreateItemDimensionRequest
	(*CreateItemDimensionResponse)(nil),               // 14: item.v1.CreateItemDimensionResponse
	(*ItemCommodityClassification)(nil),               // 15: item.v1.ItemCommodityClassification
	(*CreateItemCommodityClassificationRequest)(nil),  // 16: item.v1.CreateItemCommodityClassificationRequest
	(*CreateItemCommodityClassificationResponse)(nil), // 17: item.v1.CreateItemCommodityClassificationResponse
	(*ItemCertificate)(nil),                           // 18: item.v1.ItemCertificate
	(*CreateItemCertificateRequest)(nil),              // 19: item.v1.CreateItemCertificateRequest
	(*CreateItemCertificateResponse)(nil),             // 20: item.v1.CreateItemCertificateResponse
	(*ItemInstance)(nil),                              // 21: item.v1.ItemInstance
	(*ItemInstanceD)(nil),                             // 22: item.v1.ItemInstanceD
	(*ItemInstanceT)(nil),                             // 23: item.v1.ItemInstanceT
	(*CreateItemInstanceRequest)(nil),                 // 24: item.v1.CreateItemInstanceRequest
	(*CreateItemInstanceResponse)(nil),                // 25: item.v1.CreateItemInstanceResponse
	(*v1.CrUpdUser)(nil),                              // 26: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                              // 27: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                     // 28: google.protobuf.Timestamp
}
var file_item_v1_item_proto_depIdxs = []int32{
	1,  // 0: item.v1.Item.item_d:type_name -> item.v1.ItemD
	26, // 1: item.v1.Item.cr_upd_user:type_name -> common.v1.CrUpdUser
	27, // 2: item.v1.Item.cr_upd_time:type_name -> common.v1.CrUpdTime
	4,  // 3: item.v1.Item.item_properties:type_name -> item.v1.ItemProperty
	12, // 4: item.v1.Item.item_dimensions:type_name -> item.v1.ItemDimension
	15, // 5: item.v1.Item.item_commodity_classifications:type_name -> item.v1.ItemCommodityClassification
	18, // 6: item.v1.Item.item_certificates:type_name -> item.v1.ItemCertificate
	21, // 7: item.v1.Item.item_instances:type_name -> item.v1.ItemInstance
	0,  // 8: item.v1.CreateItemResponse.item:type_name -> item.v1.Item
	5,  // 9: item.v1.ItemProperty.item_property_d:type_name -> item.v1.ItemPropertyD
	6,  // 10: item.v1.ItemProperty.item_property_t:type_name -> item.v1.ItemPropertyT
	26, // 11: item.v1.ItemProperty.cr_upd_user:type_name -> common.v1.CrUpdUser
	27, // 12: item.v1.ItemProperty.cr_upd_time:type_name -> common.v1.CrUpdTime
	9,  // 13: item.v1.ItemProperty.item_property_groups:type_name -> item.v1.ItemPropertyGroup
	28, // 14: item.v1.ItemPropertyT.usability_period_start_date:type_name -> google.protobuf.Timestamp
	28, // 15: item.v1.ItemPropertyT.usability_period_end_date:type_name -> google.protobuf.Timestamp
	4,  // 16: item.v1.CreateItemPropertyResponse.item_property:type_name -> item.v1.ItemProperty
	9,  // 17: item.v1.CreateItemPropertyGroupResponse.item_property_group:type_name -> item.v1.ItemPropertyGroup
	12, // 18: item.v1.CreateItemDimensionResponse.item_dimension:type_name -> item.v1.ItemDimension
	15, // 19: item.v1.CreateItemCommodityClassificationResponse.item_commodity_classification:type_name -> item.v1.ItemCommodityClassification
	18, // 20: item.v1.CreateItemCertificateResponse.item_certificate:type_name -> item.v1.ItemCertificate
	22, // 21: item.v1.ItemInstance.item_instance_d:type_name -> item.v1.ItemInstanceD
	23, // 22: item.v1.ItemInstance.item_instance_t:type_name -> item.v1.ItemInstanceT
	26, // 23: item.v1.ItemInstance.cr_upd_user:type_name -> common.v1.CrUpdUser
	27, // 24: item.v1.ItemInstance.cr_upd_time:type_name -> common.v1.CrUpdTime
	28, // 25: item.v1.ItemInstanceT.manufacture_date:type_name -> google.protobuf.Timestamp
	28, // 26: item.v1.ItemInstanceT.best_before_date:type_name -> google.protobuf.Timestamp
	28, // 27: item.v1.ItemInstanceT.lot_expiry_date:type_name -> google.protobuf.Timestamp
	21, // 28: item.v1.CreateItemInstanceResponse.item_instance:type_name -> item.v1.ItemInstance
	2,  // 29: item.v1.ItemService.CreateItem:input_type -> item.v1.CreateItemRequest
	7,  // 30: item.v1.ItemService.CreateItemProperty:input_type -> item.v1.CreateItemPropertyRequest
	10, // 31: item.v1.ItemService.CreateItemPropertyGroup:input_type -> item.v1.CreateItemPropertyGroupRequest
	13, // 32: item.v1.ItemService.CreateItemDimension:input_type -> item.v1.CreateItemDimensionRequest
	16, // 33: item.v1.ItemService.CreateItemCommodityClassification:input_type -> item.v1.CreateItemCommodityClassificationRequest
	19, // 34: item.v1.ItemService.CreateItemCertificate:input_type -> item.v1.CreateItemCertificateRequest
	24, // 35: item.v1.ItemService.CreateItemInstance:input_type -> item.v1.CreateItemInstanceRequest
	3,  // 36: item.v1.ItemService.CreateItem:output_type -> item.v1.CreateItemResponse
	8,  // 37: item.v1.ItemService.CreateItemProperty:output_type -> item.v1.CreateItemPropertyResponse
	11, // 38: item.v1.ItemService.CreateItemPropertyGroup:output_type -> item.v1.CreateItemPropertyGroupResponse
	14, // 39: item.v1.ItemService.CreateItemDimension:output_type -> item.v1.CreateItemDimensionResponse
	17, // 40: item.v1.ItemService.CreateItemCommodityClassification:output_type -> item.v1.CreateItemCommodityClassificationResponse
	20, // 41: item.v1.ItemService.CreateItemCertificate:output_type -> item.v1.CreateItemCertificateResponse
	25, // 42: item.v1.ItemService.CreateItemInstance:output_type -> item.v1.CreateItemInstanceResponse
	36, // [36:43] is the sub-list for method output_type
	29, // [29:36] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_item_v1_item_proto_init() }
func file_item_v1_item_proto_init() {
	if File_item_v1_item_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_item_v1_item_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_item_v1_item_proto_goTypes,
		DependencyIndexes: file_item_v1_item_proto_depIdxs,
		MessageInfos:      file_item_v1_item_proto_msgTypes,
	}.Build()
	File_item_v1_item_proto = out.File
	file_item_v1_item_proto_rawDesc = nil
	file_item_v1_item_proto_goTypes = nil
	file_item_v1_item_proto_depIdxs = nil
}
