// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: item/v1/item.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemMultiError, or nil if none found.
func (m *Item) ValidateAll() error {
	return m.validate(true)
}

func (m *Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItemD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemValidationError{
					field:  "ItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemValidationError{
					field:  "ItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemValidationError{
				field:  "ItemD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItemProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemValidationError{
					field:  fmt.Sprintf("ItemProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetItemDimensions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemDimensions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemDimensions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemValidationError{
					field:  fmt.Sprintf("ItemDimensions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetItemCommodityClassifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemCommodityClassifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemCommodityClassifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemValidationError{
					field:  fmt.Sprintf("ItemCommodityClassifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetItemCertificates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemCertificates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemCertificates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemValidationError{
					field:  fmt.Sprintf("ItemCertificates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetItemInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("ItemInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemValidationError{
					field:  fmt.Sprintf("ItemInstances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ItemMultiError(errors)
	}

	return nil
}

// ItemMultiError is an error wrapping multiple validation errors returned by
// Item.ValidateAll() if the designated constraints aren't met.
type ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMultiError) AllErrors() []error { return m }

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on ItemD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemDMultiError, or nil if none found.
func (m *ItemD) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for Description

	// no validation rules for PackQuantity

	// no validation rules for PackSizeNumeric

	// no validation rules for CatalogueIndicator

	// no validation rules for ItemName

	// no validation rules for HazardousRiskIndicator

	// no validation rules for AdditionalInformation

	// no validation rules for Keyword

	// no validation rules for BrandName

	// no validation rules for ModelName

	// no validation rules for BuyersItemIdentificationId

	// no validation rules for SellersItemIdentificationId

	// no validation rules for ManufacturersItemIdentificationId

	// no validation rules for StandardItemIdentificationId

	// no validation rules for CatalogueItemIdentificationId

	// no validation rules for AdditionalItemIdentificationId

	// no validation rules for OriginCountryIdCode

	// no validation rules for OriginCountryName

	// no validation rules for ManufacturerPartyId

	// no validation rules for InformationContentProviderPartyId

	// no validation rules for TaxCategoryId

	if len(errors) > 0 {
		return ItemDMultiError(errors)
	}

	return nil
}

// ItemDMultiError is an error wrapping multiple validation errors returned by
// ItemD.ValidateAll() if the designated constraints aren't met.
type ItemDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemDMultiError) AllErrors() []error { return m }

// ItemDValidationError is the validation error returned by ItemD.Validate if
// the designated constraints aren't met.
type ItemDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemDValidationError) ErrorName() string { return "ItemDValidationError" }

// Error satisfies the builtin error interface
func (e ItemDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemDValidationError{}

// Validate checks the field values on CreateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemRequestMultiError, or nil if none found.
func (m *CreateItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	// no validation rules for PackQuantity

	// no validation rules for PackSizeNumeric

	// no validation rules for CatalogueIndicator

	// no validation rules for ItemName

	// no validation rules for HazardousRiskIndicator

	// no validation rules for AdditionalInformation

	// no validation rules for Keyword

	// no validation rules for BrandName

	// no validation rules for ModelName

	// no validation rules for BuyersItemIdentificationId

	// no validation rules for SellersItemIdentificationId

	// no validation rules for ManufacturersItemIdentificationId

	// no validation rules for StandardItemIdentificationId

	// no validation rules for CatalogueItemIdentificationId

	// no validation rules for AdditionalItemIdentificationId

	// no validation rules for OriginCountryIdCode

	// no validation rules for OriginCountryName

	// no validation rules for ManufacturerPartyId

	// no validation rules for InformationContentProviderPartyId

	// no validation rules for TaxCategoryId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateItemRequestMultiError(errors)
	}

	return nil
}

// CreateItemRequestMultiError is an error wrapping multiple validation errors
// returned by CreateItemRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemRequestMultiError) AllErrors() []error { return m }

// CreateItemRequestValidationError is the validation error returned by
// CreateItemRequest.Validate if the designated constraints aren't met.
type CreateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemRequestValidationError) ErrorName() string {
	return "CreateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemRequestValidationError{}

// Validate checks the field values on CreateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemResponseMultiError, or nil if none found.
func (m *CreateItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateItemResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateItemResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateItemResponseMultiError(errors)
	}

	return nil
}

// CreateItemResponseMultiError is an error wrapping multiple validation errors
// returned by CreateItemResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemResponseMultiError) AllErrors() []error { return m }

// CreateItemResponseValidationError is the validation error returned by
// CreateItemResponse.Validate if the designated constraints aren't met.
type CreateItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemResponseValidationError) ErrorName() string {
	return "CreateItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemResponseValidationError{}

// Validate checks the field values on ItemProperty with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemProperty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemProperty with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemPropertyMultiError, or
// nil if none found.
func (m *ItemProperty) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemProperty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItemPropertyD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemPropertyValidationError{
					field:  "ItemPropertyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemPropertyValidationError{
					field:  "ItemPropertyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemPropertyD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemPropertyValidationError{
				field:  "ItemPropertyD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetItemPropertyT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemPropertyValidationError{
					field:  "ItemPropertyT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemPropertyValidationError{
					field:  "ItemPropertyT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemPropertyT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemPropertyValidationError{
				field:  "ItemPropertyT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemPropertyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemPropertyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemPropertyValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemPropertyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemPropertyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemPropertyValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItemPropertyGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemPropertyValidationError{
						field:  fmt.Sprintf("ItemPropertyGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemPropertyValidationError{
						field:  fmt.Sprintf("ItemPropertyGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemPropertyValidationError{
					field:  fmt.Sprintf("ItemPropertyGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ItemPropertyMultiError(errors)
	}

	return nil
}

// ItemPropertyMultiError is an error wrapping multiple validation errors
// returned by ItemProperty.ValidateAll() if the designated constraints aren't met.
type ItemPropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemPropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemPropertyMultiError) AllErrors() []error { return m }

// ItemPropertyValidationError is the validation error returned by
// ItemProperty.Validate if the designated constraints aren't met.
type ItemPropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemPropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemPropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemPropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemPropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemPropertyValidationError) ErrorName() string { return "ItemPropertyValidationError" }

// Error satisfies the builtin error interface
func (e ItemPropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemPropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemPropertyValidationError{}

// Validate checks the field values on ItemPropertyD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemPropertyD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemPropertyD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemPropertyDMultiError, or
// nil if none found.
func (m *ItemPropertyD) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemPropertyD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ItemPropertyId

	// no validation rules for ItemPropertyName

	// no validation rules for ItemPropertyNameCode

	// no validation rules for TestMethod

	// no validation rules for Value

	// no validation rules for ValueQuantity

	// no validation rules for ValueQualifier

	// no validation rules for ImportanceCode

	// no validation rules for ListValue

	// no validation rules for ItemPropertyRangeMeasure

	// no validation rules for ItemPropertyRangeMinValue

	// no validation rules for ItemPropertyRangeMaxValue

	// no validation rules for ItemId

	if len(errors) > 0 {
		return ItemPropertyDMultiError(errors)
	}

	return nil
}

// ItemPropertyDMultiError is an error wrapping multiple validation errors
// returned by ItemPropertyD.ValidateAll() if the designated constraints
// aren't met.
type ItemPropertyDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemPropertyDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemPropertyDMultiError) AllErrors() []error { return m }

// ItemPropertyDValidationError is the validation error returned by
// ItemPropertyD.Validate if the designated constraints aren't met.
type ItemPropertyDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemPropertyDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemPropertyDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemPropertyDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemPropertyDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemPropertyDValidationError) ErrorName() string { return "ItemPropertyDValidationError" }

// Error satisfies the builtin error interface
func (e ItemPropertyDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemPropertyD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemPropertyDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemPropertyDValidationError{}

// Validate checks the field values on ItemPropertyT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemPropertyT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemPropertyT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemPropertyTMultiError, or
// nil if none found.
func (m *ItemPropertyT) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemPropertyT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUsabilityPeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemPropertyTValidationError{
					field:  "UsabilityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemPropertyTValidationError{
					field:  "UsabilityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsabilityPeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemPropertyTValidationError{
				field:  "UsabilityPeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsabilityPeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemPropertyTValidationError{
					field:  "UsabilityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemPropertyTValidationError{
					field:  "UsabilityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsabilityPeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemPropertyTValidationError{
				field:  "UsabilityPeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ItemPropertyTMultiError(errors)
	}

	return nil
}

// ItemPropertyTMultiError is an error wrapping multiple validation errors
// returned by ItemPropertyT.ValidateAll() if the designated constraints
// aren't met.
type ItemPropertyTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemPropertyTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemPropertyTMultiError) AllErrors() []error { return m }

// ItemPropertyTValidationError is the validation error returned by
// ItemPropertyT.Validate if the designated constraints aren't met.
type ItemPropertyTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemPropertyTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemPropertyTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemPropertyTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemPropertyTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemPropertyTValidationError) ErrorName() string { return "ItemPropertyTValidationError" }

// Error satisfies the builtin error interface
func (e ItemPropertyTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemPropertyT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemPropertyTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemPropertyTValidationError{}

// Validate checks the field values on CreateItemPropertyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemPropertyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemPropertyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemPropertyRequestMultiError, or nil if none found.
func (m *CreateItemPropertyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemPropertyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemPropertyId

	// no validation rules for ItemPropertyName

	// no validation rules for ItemPropertyNameCode

	// no validation rules for TestMethod

	// no validation rules for Value

	// no validation rules for ValueQuantity

	// no validation rules for ValueQualifier

	// no validation rules for ImportanceCode

	// no validation rules for ListValue

	// no validation rules for UsabilityPeriodStartDate

	// no validation rules for UsabilityPeriodEndDate

	// no validation rules for ItemPropertyRangeMeasure

	// no validation rules for ItemPropertyRangeMinValue

	// no validation rules for ItemPropertyRangeMaxValue

	// no validation rules for ItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateItemPropertyRequestMultiError(errors)
	}

	return nil
}

// CreateItemPropertyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateItemPropertyRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateItemPropertyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemPropertyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemPropertyRequestMultiError) AllErrors() []error { return m }

// CreateItemPropertyRequestValidationError is the validation error returned by
// CreateItemPropertyRequest.Validate if the designated constraints aren't met.
type CreateItemPropertyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemPropertyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemPropertyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemPropertyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemPropertyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemPropertyRequestValidationError) ErrorName() string {
	return "CreateItemPropertyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemPropertyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemPropertyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemPropertyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemPropertyRequestValidationError{}

// Validate checks the field values on CreateItemPropertyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemPropertyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemPropertyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemPropertyResponseMultiError, or nil if none found.
func (m *CreateItemPropertyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemPropertyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItemProperty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateItemPropertyResponseValidationError{
					field:  "ItemProperty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateItemPropertyResponseValidationError{
					field:  "ItemProperty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemProperty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemPropertyResponseValidationError{
				field:  "ItemProperty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateItemPropertyResponseMultiError(errors)
	}

	return nil
}

// CreateItemPropertyResponseMultiError is an error wrapping multiple
// validation errors returned by CreateItemPropertyResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateItemPropertyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemPropertyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemPropertyResponseMultiError) AllErrors() []error { return m }

// CreateItemPropertyResponseValidationError is the validation error returned
// by CreateItemPropertyResponse.Validate if the designated constraints aren't met.
type CreateItemPropertyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemPropertyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemPropertyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemPropertyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemPropertyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemPropertyResponseValidationError) ErrorName() string {
	return "CreateItemPropertyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemPropertyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemPropertyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemPropertyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemPropertyResponseValidationError{}

// Validate checks the field values on ItemPropertyGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ItemPropertyGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemPropertyGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ItemPropertyGroupMultiError, or nil if none found.
func (m *ItemPropertyGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemPropertyGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ItemPropertyGroupId

	// no validation rules for ItemPropertyGroupName

	// no validation rules for ItemPropertyGroupImportanceCode

	// no validation rules for ItemPropertyId

	if len(errors) > 0 {
		return ItemPropertyGroupMultiError(errors)
	}

	return nil
}

// ItemPropertyGroupMultiError is an error wrapping multiple validation errors
// returned by ItemPropertyGroup.ValidateAll() if the designated constraints
// aren't met.
type ItemPropertyGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemPropertyGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemPropertyGroupMultiError) AllErrors() []error { return m }

// ItemPropertyGroupValidationError is the validation error returned by
// ItemPropertyGroup.Validate if the designated constraints aren't met.
type ItemPropertyGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemPropertyGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemPropertyGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemPropertyGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemPropertyGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemPropertyGroupValidationError) ErrorName() string {
	return "ItemPropertyGroupValidationError"
}

// Error satisfies the builtin error interface
func (e ItemPropertyGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemPropertyGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemPropertyGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemPropertyGroupValidationError{}

// Validate checks the field values on CreateItemPropertyGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemPropertyGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemPropertyGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateItemPropertyGroupRequestMultiError, or nil if none found.
func (m *CreateItemPropertyGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemPropertyGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemPropertyGroupId

	// no validation rules for ItemPropertyGroupName

	// no validation rules for ItemPropertyGroupImportanceCode

	// no validation rules for ItemPropertyId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateItemPropertyGroupRequestMultiError(errors)
	}

	return nil
}

// CreateItemPropertyGroupRequestMultiError is an error wrapping multiple
// validation errors returned by CreateItemPropertyGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateItemPropertyGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemPropertyGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemPropertyGroupRequestMultiError) AllErrors() []error { return m }

// CreateItemPropertyGroupRequestValidationError is the validation error
// returned by CreateItemPropertyGroupRequest.Validate if the designated
// constraints aren't met.
type CreateItemPropertyGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemPropertyGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemPropertyGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemPropertyGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemPropertyGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemPropertyGroupRequestValidationError) ErrorName() string {
	return "CreateItemPropertyGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemPropertyGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemPropertyGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemPropertyGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemPropertyGroupRequestValidationError{}

// Validate checks the field values on CreateItemPropertyGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemPropertyGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemPropertyGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateItemPropertyGroupResponseMultiError, or nil if none found.
func (m *CreateItemPropertyGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemPropertyGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItemPropertyGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateItemPropertyGroupResponseValidationError{
					field:  "ItemPropertyGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateItemPropertyGroupResponseValidationError{
					field:  "ItemPropertyGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemPropertyGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemPropertyGroupResponseValidationError{
				field:  "ItemPropertyGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateItemPropertyGroupResponseMultiError(errors)
	}

	return nil
}

// CreateItemPropertyGroupResponseMultiError is an error wrapping multiple
// validation errors returned by CreateItemPropertyGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateItemPropertyGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemPropertyGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemPropertyGroupResponseMultiError) AllErrors() []error { return m }

// CreateItemPropertyGroupResponseValidationError is the validation error
// returned by CreateItemPropertyGroupResponse.Validate if the designated
// constraints aren't met.
type CreateItemPropertyGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemPropertyGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemPropertyGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemPropertyGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemPropertyGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemPropertyGroupResponseValidationError) ErrorName() string {
	return "CreateItemPropertyGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemPropertyGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemPropertyGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemPropertyGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemPropertyGroupResponseValidationError{}

// Validate checks the field values on ItemDimension with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemDimension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemDimension with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemDimensionMultiError, or
// nil if none found.
func (m *ItemDimension) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemDimension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AttributeId

	// no validation rules for Measure

	// no validation rules for Description

	// no validation rules for MinimumMeasure

	// no validation rules for MaximumMeasure

	// no validation rules for ItemId

	if len(errors) > 0 {
		return ItemDimensionMultiError(errors)
	}

	return nil
}

// ItemDimensionMultiError is an error wrapping multiple validation errors
// returned by ItemDimension.ValidateAll() if the designated constraints
// aren't met.
type ItemDimensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemDimensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemDimensionMultiError) AllErrors() []error { return m }

// ItemDimensionValidationError is the validation error returned by
// ItemDimension.Validate if the designated constraints aren't met.
type ItemDimensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemDimensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemDimensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemDimensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemDimensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemDimensionValidationError) ErrorName() string { return "ItemDimensionValidationError" }

// Error satisfies the builtin error interface
func (e ItemDimensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemDimension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemDimensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemDimensionValidationError{}

// Validate checks the field values on CreateItemDimensionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemDimensionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemDimensionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemDimensionRequestMultiError, or nil if none found.
func (m *CreateItemDimensionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemDimensionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttributeId

	// no validation rules for Measure

	// no validation rules for Description

	// no validation rules for MinimumMeasure

	// no validation rules for MaximumMeasure

	// no validation rules for ItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateItemDimensionRequestMultiError(errors)
	}

	return nil
}

// CreateItemDimensionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateItemDimensionRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateItemDimensionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemDimensionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemDimensionRequestMultiError) AllErrors() []error { return m }

// CreateItemDimensionRequestValidationError is the validation error returned
// by CreateItemDimensionRequest.Validate if the designated constraints aren't met.
type CreateItemDimensionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemDimensionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemDimensionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemDimensionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemDimensionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemDimensionRequestValidationError) ErrorName() string {
	return "CreateItemDimensionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemDimensionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemDimensionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemDimensionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemDimensionRequestValidationError{}

// Validate checks the field values on CreateItemDimensionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemDimensionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemDimensionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemDimensionResponseMultiError, or nil if none found.
func (m *CreateItemDimensionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemDimensionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItemDimension()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateItemDimensionResponseValidationError{
					field:  "ItemDimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateItemDimensionResponseValidationError{
					field:  "ItemDimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemDimension()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemDimensionResponseValidationError{
				field:  "ItemDimension",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateItemDimensionResponseMultiError(errors)
	}

	return nil
}

// CreateItemDimensionResponseMultiError is an error wrapping multiple
// validation errors returned by CreateItemDimensionResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateItemDimensionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemDimensionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemDimensionResponseMultiError) AllErrors() []error { return m }

// CreateItemDimensionResponseValidationError is the validation error returned
// by CreateItemDimensionResponse.Validate if the designated constraints
// aren't met.
type CreateItemDimensionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemDimensionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemDimensionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemDimensionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemDimensionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemDimensionResponseValidationError) ErrorName() string {
	return "CreateItemDimensionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemDimensionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemDimensionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemDimensionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemDimensionResponseValidationError{}

// Validate checks the field values on ItemCommodityClassification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ItemCommodityClassification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemCommodityClassification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ItemCommodityClassificationMultiError, or nil if none found.
func (m *ItemCommodityClassification) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemCommodityClassification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NatureCode

	// no validation rules for CargoTypeCode

	// no validation rules for CommodityCode

	// no validation rules for ItemClassificationCode

	// no validation rules for ItemId

	if len(errors) > 0 {
		return ItemCommodityClassificationMultiError(errors)
	}

	return nil
}

// ItemCommodityClassificationMultiError is an error wrapping multiple
// validation errors returned by ItemCommodityClassification.ValidateAll() if
// the designated constraints aren't met.
type ItemCommodityClassificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemCommodityClassificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemCommodityClassificationMultiError) AllErrors() []error { return m }

// ItemCommodityClassificationValidationError is the validation error returned
// by ItemCommodityClassification.Validate if the designated constraints
// aren't met.
type ItemCommodityClassificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemCommodityClassificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemCommodityClassificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemCommodityClassificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemCommodityClassificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemCommodityClassificationValidationError) ErrorName() string {
	return "ItemCommodityClassificationValidationError"
}

// Error satisfies the builtin error interface
func (e ItemCommodityClassificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemCommodityClassification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemCommodityClassificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemCommodityClassificationValidationError{}

// Validate checks the field values on CreateItemCommodityClassificationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateItemCommodityClassificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateItemCommodityClassificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateItemCommodityClassificationRequestMultiError, or nil if none found.
func (m *CreateItemCommodityClassificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemCommodityClassificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NatureCode

	// no validation rules for CargoTypeCode

	// no validation rules for CommodityCode

	// no validation rules for ItemClassificationCode

	// no validation rules for ItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateItemCommodityClassificationRequestMultiError(errors)
	}

	return nil
}

// CreateItemCommodityClassificationRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateItemCommodityClassificationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateItemCommodityClassificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemCommodityClassificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemCommodityClassificationRequestMultiError) AllErrors() []error { return m }

// CreateItemCommodityClassificationRequestValidationError is the validation
// error returned by CreateItemCommodityClassificationRequest.Validate if the
// designated constraints aren't met.
type CreateItemCommodityClassificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemCommodityClassificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemCommodityClassificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemCommodityClassificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemCommodityClassificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemCommodityClassificationRequestValidationError) ErrorName() string {
	return "CreateItemCommodityClassificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemCommodityClassificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemCommodityClassificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemCommodityClassificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemCommodityClassificationRequestValidationError{}

// Validate checks the field values on
// CreateItemCommodityClassificationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateItemCommodityClassificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateItemCommodityClassificationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateItemCommodityClassificationResponseMultiError, or nil if none found.
func (m *CreateItemCommodityClassificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemCommodityClassificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItemCommodityClassification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateItemCommodityClassificationResponseValidationError{
					field:  "ItemCommodityClassification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateItemCommodityClassificationResponseValidationError{
					field:  "ItemCommodityClassification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemCommodityClassification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemCommodityClassificationResponseValidationError{
				field:  "ItemCommodityClassification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateItemCommodityClassificationResponseMultiError(errors)
	}

	return nil
}

// CreateItemCommodityClassificationResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateItemCommodityClassificationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateItemCommodityClassificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemCommodityClassificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemCommodityClassificationResponseMultiError) AllErrors() []error { return m }

// CreateItemCommodityClassificationResponseValidationError is the validation
// error returned by CreateItemCommodityClassificationResponse.Validate if the
// designated constraints aren't met.
type CreateItemCommodityClassificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemCommodityClassificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemCommodityClassificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemCommodityClassificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemCommodityClassificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemCommodityClassificationResponseValidationError) ErrorName() string {
	return "CreateItemCommodityClassificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemCommodityClassificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemCommodityClassificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemCommodityClassificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemCommodityClassificationResponseValidationError{}

// Validate checks the field values on ItemCertificate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ItemCertificate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemCertificate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ItemCertificateMultiError, or nil if none found.
func (m *ItemCertificate) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemCertificate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CertId

	// no validation rules for CertificateTypeCode

	// no validation rules for CertificateType

	// no validation rules for Remarks

	// no validation rules for PartyId

	// no validation rules for ItemId

	if len(errors) > 0 {
		return ItemCertificateMultiError(errors)
	}

	return nil
}

// ItemCertificateMultiError is an error wrapping multiple validation errors
// returned by ItemCertificate.ValidateAll() if the designated constraints
// aren't met.
type ItemCertificateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemCertificateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemCertificateMultiError) AllErrors() []error { return m }

// ItemCertificateValidationError is the validation error returned by
// ItemCertificate.Validate if the designated constraints aren't met.
type ItemCertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemCertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemCertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemCertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemCertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemCertificateValidationError) ErrorName() string { return "ItemCertificateValidationError" }

// Error satisfies the builtin error interface
func (e ItemCertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemCertificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemCertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemCertificateValidationError{}

// Validate checks the field values on CreateItemCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemCertificateRequestMultiError, or nil if none found.
func (m *CreateItemCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CertId

	// no validation rules for CertificateTypeCode

	// no validation rules for CertificateType

	// no validation rules for Remarks

	// no validation rules for PartyId

	// no validation rules for ItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateItemCertificateRequestMultiError(errors)
	}

	return nil
}

// CreateItemCertificateRequestMultiError is an error wrapping multiple
// validation errors returned by CreateItemCertificateRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateItemCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemCertificateRequestMultiError) AllErrors() []error { return m }

// CreateItemCertificateRequestValidationError is the validation error returned
// by CreateItemCertificateRequest.Validate if the designated constraints
// aren't met.
type CreateItemCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemCertificateRequestValidationError) ErrorName() string {
	return "CreateItemCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemCertificateRequestValidationError{}

// Validate checks the field values on CreateItemCertificateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemCertificateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateItemCertificateResponseMultiError, or nil if none found.
func (m *CreateItemCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItemCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateItemCertificateResponseValidationError{
					field:  "ItemCertificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateItemCertificateResponseValidationError{
					field:  "ItemCertificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemCertificateResponseValidationError{
				field:  "ItemCertificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateItemCertificateResponseMultiError(errors)
	}

	return nil
}

// CreateItemCertificateResponseMultiError is an error wrapping multiple
// validation errors returned by CreateItemCertificateResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateItemCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemCertificateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemCertificateResponseMultiError) AllErrors() []error { return m }

// CreateItemCertificateResponseValidationError is the validation error
// returned by CreateItemCertificateResponse.Validate if the designated
// constraints aren't met.
type CreateItemCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemCertificateResponseValidationError) ErrorName() string {
	return "CreateItemCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemCertificateResponseValidationError{}

// Validate checks the field values on ItemInstance with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemInstance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemInstanceMultiError, or
// nil if none found.
func (m *ItemInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItemInstanceD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemInstanceValidationError{
					field:  "ItemInstanceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemInstanceValidationError{
					field:  "ItemInstanceD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemInstanceD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemInstanceValidationError{
				field:  "ItemInstanceD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetItemInstanceT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemInstanceValidationError{
					field:  "ItemInstanceT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemInstanceValidationError{
					field:  "ItemInstanceT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemInstanceT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemInstanceValidationError{
				field:  "ItemInstanceT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemInstanceValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemInstanceValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemInstanceValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemInstanceValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemInstanceValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemInstanceValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ItemInstanceMultiError(errors)
	}

	return nil
}

// ItemInstanceMultiError is an error wrapping multiple validation errors
// returned by ItemInstance.ValidateAll() if the designated constraints aren't met.
type ItemInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemInstanceMultiError) AllErrors() []error { return m }

// ItemInstanceValidationError is the validation error returned by
// ItemInstance.Validate if the designated constraints aren't met.
type ItemInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemInstanceValidationError) ErrorName() string { return "ItemInstanceValidationError" }

// Error satisfies the builtin error interface
func (e ItemInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemInstanceValidationError{}

// Validate checks the field values on ItemInstanceD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemInstanceD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemInstanceD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemInstanceDMultiError, or
// nil if none found.
func (m *ItemInstanceD) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemInstanceD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ProductTraceId

	// no validation rules for RegistrationId

	// no validation rules for SerialId

	// no validation rules for LotNumberId

	// no validation rules for ItemId

	if len(errors) > 0 {
		return ItemInstanceDMultiError(errors)
	}

	return nil
}

// ItemInstanceDMultiError is an error wrapping multiple validation errors
// returned by ItemInstanceD.ValidateAll() if the designated constraints
// aren't met.
type ItemInstanceDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemInstanceDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemInstanceDMultiError) AllErrors() []error { return m }

// ItemInstanceDValidationError is the validation error returned by
// ItemInstanceD.Validate if the designated constraints aren't met.
type ItemInstanceDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemInstanceDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemInstanceDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemInstanceDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemInstanceDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemInstanceDValidationError) ErrorName() string { return "ItemInstanceDValidationError" }

// Error satisfies the builtin error interface
func (e ItemInstanceDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemInstanceD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemInstanceDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemInstanceDValidationError{}

// Validate checks the field values on ItemInstanceT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemInstanceT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemInstanceT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemInstanceTMultiError, or
// nil if none found.
func (m *ItemInstanceT) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemInstanceT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetManufactureDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemInstanceTValidationError{
					field:  "ManufactureDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemInstanceTValidationError{
					field:  "ManufactureDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManufactureDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemInstanceTValidationError{
				field:  "ManufactureDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBestBeforeDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemInstanceTValidationError{
					field:  "BestBeforeDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemInstanceTValidationError{
					field:  "BestBeforeDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBestBeforeDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemInstanceTValidationError{
				field:  "BestBeforeDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLotExpiryDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemInstanceTValidationError{
					field:  "LotExpiryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemInstanceTValidationError{
					field:  "LotExpiryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLotExpiryDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemInstanceTValidationError{
				field:  "LotExpiryDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ItemInstanceTMultiError(errors)
	}

	return nil
}

// ItemInstanceTMultiError is an error wrapping multiple validation errors
// returned by ItemInstanceT.ValidateAll() if the designated constraints
// aren't met.
type ItemInstanceTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemInstanceTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemInstanceTMultiError) AllErrors() []error { return m }

// ItemInstanceTValidationError is the validation error returned by
// ItemInstanceT.Validate if the designated constraints aren't met.
type ItemInstanceTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemInstanceTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemInstanceTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemInstanceTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemInstanceTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemInstanceTValidationError) ErrorName() string { return "ItemInstanceTValidationError" }

// Error satisfies the builtin error interface
func (e ItemInstanceTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemInstanceT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemInstanceTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemInstanceTValidationError{}

// Validate checks the field values on CreateItemInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemInstanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemInstanceRequestMultiError, or nil if none found.
func (m *CreateItemInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductTraceId

	// no validation rules for ManufactureDate

	// no validation rules for BestBeforeDate

	// no validation rules for RegistrationId

	// no validation rules for SerialId

	// no validation rules for LotNumberId

	// no validation rules for LotExpiryDate

	// no validation rules for ItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateItemInstanceRequestMultiError(errors)
	}

	return nil
}

// CreateItemInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateItemInstanceRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateItemInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemInstanceRequestMultiError) AllErrors() []error { return m }

// CreateItemInstanceRequestValidationError is the validation error returned by
// CreateItemInstanceRequest.Validate if the designated constraints aren't met.
type CreateItemInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemInstanceRequestValidationError) ErrorName() string {
	return "CreateItemInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemInstanceRequestValidationError{}

// Validate checks the field values on CreateItemInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemInstanceResponseMultiError, or nil if none found.
func (m *CreateItemInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItemInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateItemInstanceResponseValidationError{
					field:  "ItemInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateItemInstanceResponseValidationError{
					field:  "ItemInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemInstanceResponseValidationError{
				field:  "ItemInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateItemInstanceResponseMultiError(errors)
	}

	return nil
}

// CreateItemInstanceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateItemInstanceResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateItemInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemInstanceResponseMultiError) AllErrors() []error { return m }

// CreateItemInstanceResponseValidationError is the validation error returned
// by CreateItemInstanceResponse.Validate if the designated constraints aren't met.
type CreateItemInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemInstanceResponseValidationError) ErrorName() string {
	return "CreateItemInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemInstanceResponseValidationError{}
