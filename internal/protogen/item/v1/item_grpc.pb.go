// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: item/v1/item.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ItemService_CreateItem_FullMethodName                        = "/item.v1.ItemService/CreateItem"
	ItemService_CreateItemProperty_FullMethodName                = "/item.v1.ItemService/CreateItemProperty"
	ItemService_CreateItemPropertyGroup_FullMethodName           = "/item.v1.ItemService/CreateItemPropertyGroup"
	ItemService_CreateItemDimension_FullMethodName               = "/item.v1.ItemService/CreateItemDimension"
	ItemService_CreateItemCommodityClassification_FullMethodName = "/item.v1.ItemService/CreateItemCommodityClassification"
	ItemService_CreateItemCertificate_FullMethodName             = "/item.v1.ItemService/CreateItemCertificate"
	ItemService_CreateItemInstance_FullMethodName                = "/item.v1.ItemService/CreateItemInstance"
)

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ItemService service definition.
type ItemServiceClient interface {
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	CreateItemProperty(ctx context.Context, in *CreateItemPropertyRequest, opts ...grpc.CallOption) (*CreateItemPropertyResponse, error)
	CreateItemPropertyGroup(ctx context.Context, in *CreateItemPropertyGroupRequest, opts ...grpc.CallOption) (*CreateItemPropertyGroupResponse, error)
	CreateItemDimension(ctx context.Context, in *CreateItemDimensionRequest, opts ...grpc.CallOption) (*CreateItemDimensionResponse, error)
	CreateItemCommodityClassification(ctx context.Context, in *CreateItemCommodityClassificationRequest, opts ...grpc.CallOption) (*CreateItemCommodityClassificationResponse, error)
	CreateItemCertificate(ctx context.Context, in *CreateItemCertificateRequest, opts ...grpc.CallOption) (*CreateItemCertificateResponse, error)
	CreateItemInstance(ctx context.Context, in *CreateItemInstanceRequest, opts ...grpc.CallOption) (*CreateItemInstanceResponse, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, ItemService_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) CreateItemProperty(ctx context.Context, in *CreateItemPropertyRequest, opts ...grpc.CallOption) (*CreateItemPropertyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemPropertyResponse)
	err := c.cc.Invoke(ctx, ItemService_CreateItemProperty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) CreateItemPropertyGroup(ctx context.Context, in *CreateItemPropertyGroupRequest, opts ...grpc.CallOption) (*CreateItemPropertyGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemPropertyGroupResponse)
	err := c.cc.Invoke(ctx, ItemService_CreateItemPropertyGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) CreateItemDimension(ctx context.Context, in *CreateItemDimensionRequest, opts ...grpc.CallOption) (*CreateItemDimensionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemDimensionResponse)
	err := c.cc.Invoke(ctx, ItemService_CreateItemDimension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) CreateItemCommodityClassification(ctx context.Context, in *CreateItemCommodityClassificationRequest, opts ...grpc.CallOption) (*CreateItemCommodityClassificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemCommodityClassificationResponse)
	err := c.cc.Invoke(ctx, ItemService_CreateItemCommodityClassification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) CreateItemCertificate(ctx context.Context, in *CreateItemCertificateRequest, opts ...grpc.CallOption) (*CreateItemCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemCertificateResponse)
	err := c.cc.Invoke(ctx, ItemService_CreateItemCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) CreateItemInstance(ctx context.Context, in *CreateItemInstanceRequest, opts ...grpc.CallOption) (*CreateItemInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemInstanceResponse)
	err := c.cc.Invoke(ctx, ItemService_CreateItemInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility.
//
// The ItemService service definition.
type ItemServiceServer interface {
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	CreateItemProperty(context.Context, *CreateItemPropertyRequest) (*CreateItemPropertyResponse, error)
	CreateItemPropertyGroup(context.Context, *CreateItemPropertyGroupRequest) (*CreateItemPropertyGroupResponse, error)
	CreateItemDimension(context.Context, *CreateItemDimensionRequest) (*CreateItemDimensionResponse, error)
	CreateItemCommodityClassification(context.Context, *CreateItemCommodityClassificationRequest) (*CreateItemCommodityClassificationResponse, error)
	CreateItemCertificate(context.Context, *CreateItemCertificateRequest) (*CreateItemCertificateResponse, error)
	CreateItemInstance(context.Context, *CreateItemInstanceRequest) (*CreateItemInstanceResponse, error)
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedItemServiceServer struct{}

func (UnimplementedItemServiceServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemServiceServer) CreateItemProperty(context.Context, *CreateItemPropertyRequest) (*CreateItemPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemProperty not implemented")
}
func (UnimplementedItemServiceServer) CreateItemPropertyGroup(context.Context, *CreateItemPropertyGroupRequest) (*CreateItemPropertyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemPropertyGroup not implemented")
}
func (UnimplementedItemServiceServer) CreateItemDimension(context.Context, *CreateItemDimensionRequest) (*CreateItemDimensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemDimension not implemented")
}
func (UnimplementedItemServiceServer) CreateItemCommodityClassification(context.Context, *CreateItemCommodityClassificationRequest) (*CreateItemCommodityClassificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemCommodityClassification not implemented")
}
func (UnimplementedItemServiceServer) CreateItemCertificate(context.Context, *CreateItemCertificateRequest) (*CreateItemCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemCertificate not implemented")
}
func (UnimplementedItemServiceServer) CreateItemInstance(context.Context, *CreateItemInstanceRequest) (*CreateItemInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemInstance not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}
func (UnimplementedItemServiceServer) testEmbeddedByValue()                     {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_CreateItemProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).CreateItemProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_CreateItemProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).CreateItemProperty(ctx, req.(*CreateItemPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_CreateItemPropertyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemPropertyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).CreateItemPropertyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_CreateItemPropertyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).CreateItemPropertyGroup(ctx, req.(*CreateItemPropertyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_CreateItemDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).CreateItemDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_CreateItemDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).CreateItemDimension(ctx, req.(*CreateItemDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_CreateItemCommodityClassification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemCommodityClassificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).CreateItemCommodityClassification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_CreateItemCommodityClassification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).CreateItemCommodityClassification(ctx, req.(*CreateItemCommodityClassificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_CreateItemCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).CreateItemCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_CreateItemCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).CreateItemCertificate(ctx, req.(*CreateItemCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_CreateItemInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).CreateItemInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_CreateItemInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).CreateItemInstance(ctx, req.(*CreateItemInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item.v1.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _ItemService_CreateItem_Handler,
		},
		{
			MethodName: "CreateItemProperty",
			Handler:    _ItemService_CreateItemProperty_Handler,
		},
		{
			MethodName: "CreateItemPropertyGroup",
			Handler:    _ItemService_CreateItemPropertyGroup_Handler,
		},
		{
			MethodName: "CreateItemDimension",
			Handler:    _ItemService_CreateItemDimension_Handler,
		},
		{
			MethodName: "CreateItemCommodityClassification",
			Handler:    _ItemService_CreateItemCommodityClassification_Handler,
		},
		{
			MethodName: "CreateItemCertificate",
			Handler:    _ItemService_CreateItemCertificate_Handler,
		},
		{
			MethodName: "CreateItemInstance",
			Handler:    _ItemService_CreateItemInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item/v1/item.proto",
}
