// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: logistics/v1/consignment.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Consignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsignmentD *ConsignmentD `protobuf:"bytes,1,opt,name=consignment_d,json=consignmentD,proto3" json:"consignment_d,omitempty"`
	CrUpdUser    *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime    *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Consignment) Reset() {
	*x = Consignment{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Consignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consignment) ProtoMessage() {}

func (x *Consignment) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consignment.ProtoReflect.Descriptor instead.
func (*Consignment) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{0}
}

func (x *Consignment) GetConsignmentD() *ConsignmentD {
	if x != nil {
		return x.ConsignmentD
	}
	return nil
}

func (x *Consignment) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Consignment) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ConsignmentD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                               []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                 string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ConsId                              string  `protobuf:"bytes,4,opt,name=cons_id,json=consId,proto3" json:"cons_id,omitempty"`
	CarrierAssignedId                   string  `protobuf:"bytes,5,opt,name=carrier_assigned_id,json=carrierAssignedId,proto3" json:"carrier_assigned_id,omitempty"`
	ConsigneeAssignedId                 string  `protobuf:"bytes,6,opt,name=consignee_assigned_id,json=consigneeAssignedId,proto3" json:"consignee_assigned_id,omitempty"`
	ConsignorAssignedId                 string  `protobuf:"bytes,7,opt,name=consignor_assigned_id,json=consignorAssignedId,proto3" json:"consignor_assigned_id,omitempty"`
	FreightForwarderAssignedId          string  `protobuf:"bytes,8,opt,name=freight_forwarder_assigned_id,json=freightForwarderAssignedId,proto3" json:"freight_forwarder_assigned_id,omitempty"`
	BrokerAssignedId                    string  `protobuf:"bytes,9,opt,name=broker_assigned_id,json=brokerAssignedId,proto3" json:"broker_assigned_id,omitempty"`
	ContractedCarrierAssignedId         string  `protobuf:"bytes,10,opt,name=contracted_carrier_assigned_id,json=contractedCarrierAssignedId,proto3" json:"contracted_carrier_assigned_id,omitempty"`
	PerformingCarrierAssignedId         string  `protobuf:"bytes,11,opt,name=performing_carrier_assigned_id,json=performingCarrierAssignedId,proto3" json:"performing_carrier_assigned_id,omitempty"`
	SummaryDescription                  string  `protobuf:"bytes,12,opt,name=summary_description,json=summaryDescription,proto3" json:"summary_description,omitempty"`
	TotalInvoiceAmount                  float64 `protobuf:"fixed64,13,opt,name=total_invoice_amount,json=totalInvoiceAmount,proto3" json:"total_invoice_amount,omitempty"`
	DeclaredCustomsValueAmount          float64 `protobuf:"fixed64,14,opt,name=declared_customs_value_amount,json=declaredCustomsValueAmount,proto3" json:"declared_customs_value_amount,omitempty"`
	TariffDescription                   string  `protobuf:"bytes,15,opt,name=tariff_description,json=tariffDescription,proto3" json:"tariff_description,omitempty"`
	TariffCode                          string  `protobuf:"bytes,16,opt,name=tariff_code,json=tariffCode,proto3" json:"tariff_code,omitempty"`
	InsurancePremiumAmount              float64 `protobuf:"fixed64,17,opt,name=insurance_premium_amount,json=insurancePremiumAmount,proto3" json:"insurance_premium_amount,omitempty"`
	GrossWeightMeasure                  float64 `protobuf:"fixed64,18,opt,name=gross_weight_measure,json=grossWeightMeasure,proto3" json:"gross_weight_measure,omitempty"`
	NetWeightMeasure                    float64 `protobuf:"fixed64,19,opt,name=net_weight_measure,json=netWeightMeasure,proto3" json:"net_weight_measure,omitempty"`
	NetNetWeightMeasure                 float64 `protobuf:"fixed64,20,opt,name=net_net_weight_measure,json=netNetWeightMeasure,proto3" json:"net_net_weight_measure,omitempty"`
	ChargeableWeightMeasure             float64 `protobuf:"fixed64,21,opt,name=chargeable_weight_measure,json=chargeableWeightMeasure,proto3" json:"chargeable_weight_measure,omitempty"`
	GrossVolumeMeasure                  float64 `protobuf:"fixed64,22,opt,name=gross_volume_measure,json=grossVolumeMeasure,proto3" json:"gross_volume_measure,omitempty"`
	NetVolumeMeasure                    float64 `protobuf:"fixed64,23,opt,name=net_volume_measure,json=netVolumeMeasure,proto3" json:"net_volume_measure,omitempty"`
	LoadingLengthMeasure                float64 `protobuf:"fixed64,24,opt,name=loading_length_measure,json=loadingLengthMeasure,proto3" json:"loading_length_measure,omitempty"`
	Remarks                             string  `protobuf:"bytes,25,opt,name=remarks,proto3" json:"remarks,omitempty"`
	HazardousRiskIndicator              bool    `protobuf:"varint,26,opt,name=hazardous_risk_indicator,json=hazardousRiskIndicator,proto3" json:"hazardous_risk_indicator,omitempty"`
	AnimalFoodIndicator                 bool    `protobuf:"varint,27,opt,name=animal_food_indicator,json=animalFoodIndicator,proto3" json:"animal_food_indicator,omitempty"`
	HumanFoodIndicator                  bool    `protobuf:"varint,28,opt,name=human_food_indicator,json=humanFoodIndicator,proto3" json:"human_food_indicator,omitempty"`
	LivestockIndicator                  bool    `protobuf:"varint,29,opt,name=livestock_indicator,json=livestockIndicator,proto3" json:"livestock_indicator,omitempty"`
	BulkCargoIndicator                  bool    `protobuf:"varint,30,opt,name=bulk_cargo_indicator,json=bulkCargoIndicator,proto3" json:"bulk_cargo_indicator,omitempty"`
	ContainerizedIndicator              bool    `protobuf:"varint,31,opt,name=containerized_indicator,json=containerizedIndicator,proto3" json:"containerized_indicator,omitempty"`
	GeneralCargoIndicator               bool    `protobuf:"varint,32,opt,name=general_cargo_indicator,json=generalCargoIndicator,proto3" json:"general_cargo_indicator,omitempty"`
	SpecialSecurityIndicator            bool    `protobuf:"varint,33,opt,name=special_security_indicator,json=specialSecurityIndicator,proto3" json:"special_security_indicator,omitempty"`
	ThirdPartyPayerIndicator            bool    `protobuf:"varint,34,opt,name=third_party_payer_indicator,json=thirdPartyPayerIndicator,proto3" json:"third_party_payer_indicator,omitempty"`
	CarrierServiceInstructions          string  `protobuf:"bytes,35,opt,name=carrier_service_instructions,json=carrierServiceInstructions,proto3" json:"carrier_service_instructions,omitempty"`
	CustomsClearanceServiceInstructions string  `protobuf:"bytes,36,opt,name=customs_clearance_service_instructions,json=customsClearanceServiceInstructions,proto3" json:"customs_clearance_service_instructions,omitempty"`
	ForwarderServiceInstructions        string  `protobuf:"bytes,37,opt,name=forwarder_service_instructions,json=forwarderServiceInstructions,proto3" json:"forwarder_service_instructions,omitempty"`
	SpecialServiceInstructions          string  `protobuf:"bytes,38,opt,name=special_service_instructions,json=specialServiceInstructions,proto3" json:"special_service_instructions,omitempty"`
	SequenceId                          uint32  `protobuf:"varint,39,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	ShippingPriorityLevelCode           string  `protobuf:"bytes,40,opt,name=shipping_priority_level_code,json=shippingPriorityLevelCode,proto3" json:"shipping_priority_level_code,omitempty"`
	HandlingCode                        string  `protobuf:"bytes,41,opt,name=handling_code,json=handlingCode,proto3" json:"handling_code,omitempty"`
	HandlingInstructions                string  `protobuf:"bytes,42,opt,name=handling_instructions,json=handlingInstructions,proto3" json:"handling_instructions,omitempty"`
	Information                         string  `protobuf:"bytes,43,opt,name=information,proto3" json:"information,omitempty"`
	TotalGoodsItemQuantity              uint32  `protobuf:"varint,44,opt,name=total_goods_item_quantity,json=totalGoodsItemQuantity,proto3" json:"total_goods_item_quantity,omitempty"`
	TotalTransportHandlingUnitQuantity  uint32  `protobuf:"varint,45,opt,name=total_transport_handling_unit_quantity,json=totalTransportHandlingUnitQuantity,proto3" json:"total_transport_handling_unit_quantity,omitempty"`
	InsuranceValueAmount                float64 `protobuf:"fixed64,46,opt,name=insurance_value_amount,json=insuranceValueAmount,proto3" json:"insurance_value_amount,omitempty"`
	DeclaredForCarriageValueAmount      float64 `protobuf:"fixed64,47,opt,name=declared_for_carriage_value_amount,json=declaredForCarriageValueAmount,proto3" json:"declared_for_carriage_value_amount,omitempty"`
	DeclaredStatisticsValueAmount       float64 `protobuf:"fixed64,48,opt,name=declared_statistics_value_amount,json=declaredStatisticsValueAmount,proto3" json:"declared_statistics_value_amount,omitempty"`
	FreeOnBoardValueAmount              float64 `protobuf:"fixed64,49,opt,name=free_on_board_value_amount,json=freeOnBoardValueAmount,proto3" json:"free_on_board_value_amount,omitempty"`
	SpecialInstructions                 string  `protobuf:"bytes,50,opt,name=special_instructions,json=specialInstructions,proto3" json:"special_instructions,omitempty"`
	SplitConsignmentIndicator           bool    `protobuf:"varint,51,opt,name=split_consignment_indicator,json=splitConsignmentIndicator,proto3" json:"split_consignment_indicator,omitempty"`
	DeliveryInstructions                string  `protobuf:"bytes,52,opt,name=delivery_instructions,json=deliveryInstructions,proto3" json:"delivery_instructions,omitempty"`
	ConsignmentQuantity                 float64 `protobuf:"fixed64,53,opt,name=consignment_quantity,json=consignmentQuantity,proto3" json:"consignment_quantity,omitempty"`
	ConsolidatableIndicator             bool    `protobuf:"varint,54,opt,name=consolidatable_indicator,json=consolidatableIndicator,proto3" json:"consolidatable_indicator,omitempty"`
	HaulageInstructions                 string  `protobuf:"bytes,55,opt,name=haulage_instructions,json=haulageInstructions,proto3" json:"haulage_instructions,omitempty"`
	LoadingSequenceId                   uint32  `protobuf:"varint,56,opt,name=loading_sequence_id,json=loadingSequenceId,proto3" json:"loading_sequence_id,omitempty"`
	ChildConsignmentQuantity            uint32  `protobuf:"varint,57,opt,name=child_consignment_quantity,json=childConsignmentQuantity,proto3" json:"child_consignment_quantity,omitempty"`
	TotalPackagesQuantity               uint32  `protobuf:"varint,58,opt,name=total_packages_quantity,json=totalPackagesQuantity,proto3" json:"total_packages_quantity,omitempty"`
	ConsigneePartyId                    uint32  `protobuf:"varint,59,opt,name=consignee_party_id,json=consigneePartyId,proto3" json:"consignee_party_id,omitempty"`
	ExporterPartyId                     uint32  `protobuf:"varint,60,opt,name=exporter_party_id,json=exporterPartyId,proto3" json:"exporter_party_id,omitempty"`
	ConsignorPartyId                    uint32  `protobuf:"varint,61,opt,name=consignor_party_id,json=consignorPartyId,proto3" json:"consignor_party_id,omitempty"`
	ImporterPartyId                     uint32  `protobuf:"varint,62,opt,name=importer_party_id,json=importerPartyId,proto3" json:"importer_party_id,omitempty"`
	CarrierPartyId                      uint32  `protobuf:"varint,63,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	FreightForwarderPartyId             uint32  `protobuf:"varint,64,opt,name=freight_forwarder_party_id,json=freightForwarderPartyId,proto3" json:"freight_forwarder_party_id,omitempty"`
	NotifyPartyId                       uint32  `protobuf:"varint,65,opt,name=notify_party_id,json=notifyPartyId,proto3" json:"notify_party_id,omitempty"`
	OriginalDespatchPartyId             uint32  `protobuf:"varint,66,opt,name=original_despatch_party_id,json=originalDespatchPartyId,proto3" json:"original_despatch_party_id,omitempty"`
	FinalDeliveryPartyId                uint32  `protobuf:"varint,67,opt,name=final_delivery_party_id,json=finalDeliveryPartyId,proto3" json:"final_delivery_party_id,omitempty"`
	PerformingCarrierPartyId            uint32  `protobuf:"varint,68,opt,name=performing_carrier_party_id,json=performingCarrierPartyId,proto3" json:"performing_carrier_party_id,omitempty"`
	SubstituteCarrierPartyId            uint32  `protobuf:"varint,69,opt,name=substitute_carrier_party_id,json=substituteCarrierPartyId,proto3" json:"substitute_carrier_party_id,omitempty"`
	LogisticsOperatorPartyId            uint32  `protobuf:"varint,70,opt,name=logistics_operator_party_id,json=logisticsOperatorPartyId,proto3" json:"logistics_operator_party_id,omitempty"`
	TransportAdvisorPartyId             uint32  `protobuf:"varint,71,opt,name=transport_advisor_party_id,json=transportAdvisorPartyId,proto3" json:"transport_advisor_party_id,omitempty"`
	HazardousItemNotificationPartyId    uint32  `protobuf:"varint,72,opt,name=hazardous_item_notification_party_id,json=hazardousItemNotificationPartyId,proto3" json:"hazardous_item_notification_party_id,omitempty"`
	InsurancePartyId                    uint32  `protobuf:"varint,73,opt,name=insurance_party_id,json=insurancePartyId,proto3" json:"insurance_party_id,omitempty"`
	MortgageHolderPartyId               uint32  `protobuf:"varint,74,opt,name=mortgage_holder_party_id,json=mortgageHolderPartyId,proto3" json:"mortgage_holder_party_id,omitempty"`
	BillOfLadingHolderPartyId           uint32  `protobuf:"varint,75,opt,name=bill_of_lading_holder_party_id,json=billOfLadingHolderPartyId,proto3" json:"bill_of_lading_holder_party_id,omitempty"`
	OriginalDepartureCountryIdCode      string  `protobuf:"bytes,76,opt,name=original_departure_country_id_code,json=originalDepartureCountryIdCode,proto3" json:"original_departure_country_id_code,omitempty"`
	OriginalDepartureCountryName        string  `protobuf:"bytes,77,opt,name=original_departure_country_name,json=originalDepartureCountryName,proto3" json:"original_departure_country_name,omitempty"`
	FinalDestinationCountryIdCode       string  `protobuf:"bytes,78,opt,name=final_destination_country_id_code,json=finalDestinationCountryIdCode,proto3" json:"final_destination_country_id_code,omitempty"`
	FinalDestinationCountryName         string  `protobuf:"bytes,79,opt,name=final_destination_country_name,json=finalDestinationCountryName,proto3" json:"final_destination_country_name,omitempty"`
	TransitCountryIdCode                string  `protobuf:"bytes,80,opt,name=transit_country_id_code,json=transitCountryIdCode,proto3" json:"transit_country_id_code,omitempty"`
	TransitCountryName                  string  `protobuf:"bytes,81,opt,name=transit_country_name,json=transitCountryName,proto3" json:"transit_country_name,omitempty"`
	DeliveryTermsId                     uint32  `protobuf:"varint,82,opt,name=delivery_terms_id,json=deliveryTermsId,proto3" json:"delivery_terms_id,omitempty"`
	PaymentTermsId                      uint32  `protobuf:"varint,83,opt,name=payment_terms_id,json=paymentTermsId,proto3" json:"payment_terms_id,omitempty"`
	CollectPaymentTermsId               uint32  `protobuf:"varint,84,opt,name=collect_payment_terms_id,json=collectPaymentTermsId,proto3" json:"collect_payment_terms_id,omitempty"`
	DisbursementPaymentTermsId          uint32  `protobuf:"varint,85,opt,name=disbursement_payment_terms_id,json=disbursementPaymentTermsId,proto3" json:"disbursement_payment_terms_id,omitempty"`
	PrepaidPaymentTermsId               uint32  `protobuf:"varint,86,opt,name=prepaid_payment_terms_id,json=prepaidPaymentTermsId,proto3" json:"prepaid_payment_terms_id,omitempty"`
	FirstArrivalPortAddressId           uint32  `protobuf:"varint,87,opt,name=first_arrival_port_address_id,json=firstArrivalPortAddressId,proto3" json:"first_arrival_port_address_id,omitempty"`
	LastExitPortLocationAddressId       uint32  `protobuf:"varint,88,opt,name=last_exit_port_location_address_id,json=lastExitPortLocationAddressId,proto3" json:"last_exit_port_location_address_id,omitempty"`
}

func (x *ConsignmentD) Reset() {
	*x = ConsignmentD{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsignmentD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsignmentD) ProtoMessage() {}

func (x *ConsignmentD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsignmentD.ProtoReflect.Descriptor instead.
func (*ConsignmentD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{1}
}

func (x *ConsignmentD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConsignmentD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ConsignmentD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ConsignmentD) GetConsId() string {
	if x != nil {
		return x.ConsId
	}
	return ""
}

func (x *ConsignmentD) GetCarrierAssignedId() string {
	if x != nil {
		return x.CarrierAssignedId
	}
	return ""
}

func (x *ConsignmentD) GetConsigneeAssignedId() string {
	if x != nil {
		return x.ConsigneeAssignedId
	}
	return ""
}

func (x *ConsignmentD) GetConsignorAssignedId() string {
	if x != nil {
		return x.ConsignorAssignedId
	}
	return ""
}

func (x *ConsignmentD) GetFreightForwarderAssignedId() string {
	if x != nil {
		return x.FreightForwarderAssignedId
	}
	return ""
}

func (x *ConsignmentD) GetBrokerAssignedId() string {
	if x != nil {
		return x.BrokerAssignedId
	}
	return ""
}

func (x *ConsignmentD) GetContractedCarrierAssignedId() string {
	if x != nil {
		return x.ContractedCarrierAssignedId
	}
	return ""
}

func (x *ConsignmentD) GetPerformingCarrierAssignedId() string {
	if x != nil {
		return x.PerformingCarrierAssignedId
	}
	return ""
}

func (x *ConsignmentD) GetSummaryDescription() string {
	if x != nil {
		return x.SummaryDescription
	}
	return ""
}

func (x *ConsignmentD) GetTotalInvoiceAmount() float64 {
	if x != nil {
		return x.TotalInvoiceAmount
	}
	return 0
}

func (x *ConsignmentD) GetDeclaredCustomsValueAmount() float64 {
	if x != nil {
		return x.DeclaredCustomsValueAmount
	}
	return 0
}

func (x *ConsignmentD) GetTariffDescription() string {
	if x != nil {
		return x.TariffDescription
	}
	return ""
}

func (x *ConsignmentD) GetTariffCode() string {
	if x != nil {
		return x.TariffCode
	}
	return ""
}

func (x *ConsignmentD) GetInsurancePremiumAmount() float64 {
	if x != nil {
		return x.InsurancePremiumAmount
	}
	return 0
}

func (x *ConsignmentD) GetGrossWeightMeasure() float64 {
	if x != nil {
		return x.GrossWeightMeasure
	}
	return 0
}

func (x *ConsignmentD) GetNetWeightMeasure() float64 {
	if x != nil {
		return x.NetWeightMeasure
	}
	return 0
}

func (x *ConsignmentD) GetNetNetWeightMeasure() float64 {
	if x != nil {
		return x.NetNetWeightMeasure
	}
	return 0
}

func (x *ConsignmentD) GetChargeableWeightMeasure() float64 {
	if x != nil {
		return x.ChargeableWeightMeasure
	}
	return 0
}

func (x *ConsignmentD) GetGrossVolumeMeasure() float64 {
	if x != nil {
		return x.GrossVolumeMeasure
	}
	return 0
}

func (x *ConsignmentD) GetNetVolumeMeasure() float64 {
	if x != nil {
		return x.NetVolumeMeasure
	}
	return 0
}

func (x *ConsignmentD) GetLoadingLengthMeasure() float64 {
	if x != nil {
		return x.LoadingLengthMeasure
	}
	return 0
}

func (x *ConsignmentD) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ConsignmentD) GetHazardousRiskIndicator() bool {
	if x != nil {
		return x.HazardousRiskIndicator
	}
	return false
}

func (x *ConsignmentD) GetAnimalFoodIndicator() bool {
	if x != nil {
		return x.AnimalFoodIndicator
	}
	return false
}

func (x *ConsignmentD) GetHumanFoodIndicator() bool {
	if x != nil {
		return x.HumanFoodIndicator
	}
	return false
}

func (x *ConsignmentD) GetLivestockIndicator() bool {
	if x != nil {
		return x.LivestockIndicator
	}
	return false
}

func (x *ConsignmentD) GetBulkCargoIndicator() bool {
	if x != nil {
		return x.BulkCargoIndicator
	}
	return false
}

func (x *ConsignmentD) GetContainerizedIndicator() bool {
	if x != nil {
		return x.ContainerizedIndicator
	}
	return false
}

func (x *ConsignmentD) GetGeneralCargoIndicator() bool {
	if x != nil {
		return x.GeneralCargoIndicator
	}
	return false
}

func (x *ConsignmentD) GetSpecialSecurityIndicator() bool {
	if x != nil {
		return x.SpecialSecurityIndicator
	}
	return false
}

func (x *ConsignmentD) GetThirdPartyPayerIndicator() bool {
	if x != nil {
		return x.ThirdPartyPayerIndicator
	}
	return false
}

func (x *ConsignmentD) GetCarrierServiceInstructions() string {
	if x != nil {
		return x.CarrierServiceInstructions
	}
	return ""
}

func (x *ConsignmentD) GetCustomsClearanceServiceInstructions() string {
	if x != nil {
		return x.CustomsClearanceServiceInstructions
	}
	return ""
}

func (x *ConsignmentD) GetForwarderServiceInstructions() string {
	if x != nil {
		return x.ForwarderServiceInstructions
	}
	return ""
}

func (x *ConsignmentD) GetSpecialServiceInstructions() string {
	if x != nil {
		return x.SpecialServiceInstructions
	}
	return ""
}

func (x *ConsignmentD) GetSequenceId() uint32 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *ConsignmentD) GetShippingPriorityLevelCode() string {
	if x != nil {
		return x.ShippingPriorityLevelCode
	}
	return ""
}

func (x *ConsignmentD) GetHandlingCode() string {
	if x != nil {
		return x.HandlingCode
	}
	return ""
}

func (x *ConsignmentD) GetHandlingInstructions() string {
	if x != nil {
		return x.HandlingInstructions
	}
	return ""
}

func (x *ConsignmentD) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *ConsignmentD) GetTotalGoodsItemQuantity() uint32 {
	if x != nil {
		return x.TotalGoodsItemQuantity
	}
	return 0
}

func (x *ConsignmentD) GetTotalTransportHandlingUnitQuantity() uint32 {
	if x != nil {
		return x.TotalTransportHandlingUnitQuantity
	}
	return 0
}

func (x *ConsignmentD) GetInsuranceValueAmount() float64 {
	if x != nil {
		return x.InsuranceValueAmount
	}
	return 0
}

func (x *ConsignmentD) GetDeclaredForCarriageValueAmount() float64 {
	if x != nil {
		return x.DeclaredForCarriageValueAmount
	}
	return 0
}

func (x *ConsignmentD) GetDeclaredStatisticsValueAmount() float64 {
	if x != nil {
		return x.DeclaredStatisticsValueAmount
	}
	return 0
}

func (x *ConsignmentD) GetFreeOnBoardValueAmount() float64 {
	if x != nil {
		return x.FreeOnBoardValueAmount
	}
	return 0
}

func (x *ConsignmentD) GetSpecialInstructions() string {
	if x != nil {
		return x.SpecialInstructions
	}
	return ""
}

func (x *ConsignmentD) GetSplitConsignmentIndicator() bool {
	if x != nil {
		return x.SplitConsignmentIndicator
	}
	return false
}

func (x *ConsignmentD) GetDeliveryInstructions() string {
	if x != nil {
		return x.DeliveryInstructions
	}
	return ""
}

func (x *ConsignmentD) GetConsignmentQuantity() float64 {
	if x != nil {
		return x.ConsignmentQuantity
	}
	return 0
}

func (x *ConsignmentD) GetConsolidatableIndicator() bool {
	if x != nil {
		return x.ConsolidatableIndicator
	}
	return false
}

func (x *ConsignmentD) GetHaulageInstructions() string {
	if x != nil {
		return x.HaulageInstructions
	}
	return ""
}

func (x *ConsignmentD) GetLoadingSequenceId() uint32 {
	if x != nil {
		return x.LoadingSequenceId
	}
	return 0
}

func (x *ConsignmentD) GetChildConsignmentQuantity() uint32 {
	if x != nil {
		return x.ChildConsignmentQuantity
	}
	return 0
}

func (x *ConsignmentD) GetTotalPackagesQuantity() uint32 {
	if x != nil {
		return x.TotalPackagesQuantity
	}
	return 0
}

func (x *ConsignmentD) GetConsigneePartyId() uint32 {
	if x != nil {
		return x.ConsigneePartyId
	}
	return 0
}

func (x *ConsignmentD) GetExporterPartyId() uint32 {
	if x != nil {
		return x.ExporterPartyId
	}
	return 0
}

func (x *ConsignmentD) GetConsignorPartyId() uint32 {
	if x != nil {
		return x.ConsignorPartyId
	}
	return 0
}

func (x *ConsignmentD) GetImporterPartyId() uint32 {
	if x != nil {
		return x.ImporterPartyId
	}
	return 0
}

func (x *ConsignmentD) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *ConsignmentD) GetFreightForwarderPartyId() uint32 {
	if x != nil {
		return x.FreightForwarderPartyId
	}
	return 0
}

func (x *ConsignmentD) GetNotifyPartyId() uint32 {
	if x != nil {
		return x.NotifyPartyId
	}
	return 0
}

func (x *ConsignmentD) GetOriginalDespatchPartyId() uint32 {
	if x != nil {
		return x.OriginalDespatchPartyId
	}
	return 0
}

func (x *ConsignmentD) GetFinalDeliveryPartyId() uint32 {
	if x != nil {
		return x.FinalDeliveryPartyId
	}
	return 0
}

func (x *ConsignmentD) GetPerformingCarrierPartyId() uint32 {
	if x != nil {
		return x.PerformingCarrierPartyId
	}
	return 0
}

func (x *ConsignmentD) GetSubstituteCarrierPartyId() uint32 {
	if x != nil {
		return x.SubstituteCarrierPartyId
	}
	return 0
}

func (x *ConsignmentD) GetLogisticsOperatorPartyId() uint32 {
	if x != nil {
		return x.LogisticsOperatorPartyId
	}
	return 0
}

func (x *ConsignmentD) GetTransportAdvisorPartyId() uint32 {
	if x != nil {
		return x.TransportAdvisorPartyId
	}
	return 0
}

func (x *ConsignmentD) GetHazardousItemNotificationPartyId() uint32 {
	if x != nil {
		return x.HazardousItemNotificationPartyId
	}
	return 0
}

func (x *ConsignmentD) GetInsurancePartyId() uint32 {
	if x != nil {
		return x.InsurancePartyId
	}
	return 0
}

func (x *ConsignmentD) GetMortgageHolderPartyId() uint32 {
	if x != nil {
		return x.MortgageHolderPartyId
	}
	return 0
}

func (x *ConsignmentD) GetBillOfLadingHolderPartyId() uint32 {
	if x != nil {
		return x.BillOfLadingHolderPartyId
	}
	return 0
}

func (x *ConsignmentD) GetOriginalDepartureCountryIdCode() string {
	if x != nil {
		return x.OriginalDepartureCountryIdCode
	}
	return ""
}

func (x *ConsignmentD) GetOriginalDepartureCountryName() string {
	if x != nil {
		return x.OriginalDepartureCountryName
	}
	return ""
}

func (x *ConsignmentD) GetFinalDestinationCountryIdCode() string {
	if x != nil {
		return x.FinalDestinationCountryIdCode
	}
	return ""
}

func (x *ConsignmentD) GetFinalDestinationCountryName() string {
	if x != nil {
		return x.FinalDestinationCountryName
	}
	return ""
}

func (x *ConsignmentD) GetTransitCountryIdCode() string {
	if x != nil {
		return x.TransitCountryIdCode
	}
	return ""
}

func (x *ConsignmentD) GetTransitCountryName() string {
	if x != nil {
		return x.TransitCountryName
	}
	return ""
}

func (x *ConsignmentD) GetDeliveryTermsId() uint32 {
	if x != nil {
		return x.DeliveryTermsId
	}
	return 0
}

func (x *ConsignmentD) GetPaymentTermsId() uint32 {
	if x != nil {
		return x.PaymentTermsId
	}
	return 0
}

func (x *ConsignmentD) GetCollectPaymentTermsId() uint32 {
	if x != nil {
		return x.CollectPaymentTermsId
	}
	return 0
}

func (x *ConsignmentD) GetDisbursementPaymentTermsId() uint32 {
	if x != nil {
		return x.DisbursementPaymentTermsId
	}
	return 0
}

func (x *ConsignmentD) GetPrepaidPaymentTermsId() uint32 {
	if x != nil {
		return x.PrepaidPaymentTermsId
	}
	return 0
}

func (x *ConsignmentD) GetFirstArrivalPortAddressId() uint32 {
	if x != nil {
		return x.FirstArrivalPortAddressId
	}
	return 0
}

func (x *ConsignmentD) GetLastExitPortLocationAddressId() uint32 {
	if x != nil {
		return x.LastExitPortLocationAddressId
	}
	return 0
}

type CreateConsignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsId                              string  `protobuf:"bytes,1,opt,name=cons_id,json=consId,proto3" json:"cons_id,omitempty"`
	CarrierAssignedId                   string  `protobuf:"bytes,2,opt,name=carrier_assigned_id,json=carrierAssignedId,proto3" json:"carrier_assigned_id,omitempty"`
	ConsigneeAssignedId                 string  `protobuf:"bytes,3,opt,name=consignee_assigned_id,json=consigneeAssignedId,proto3" json:"consignee_assigned_id,omitempty"`
	ConsignorAssignedId                 string  `protobuf:"bytes,4,opt,name=consignor_assigned_id,json=consignorAssignedId,proto3" json:"consignor_assigned_id,omitempty"`
	FreightForwarderAssignedId          string  `protobuf:"bytes,5,opt,name=freight_forwarder_assigned_id,json=freightForwarderAssignedId,proto3" json:"freight_forwarder_assigned_id,omitempty"`
	BrokerAssignedId                    string  `protobuf:"bytes,6,opt,name=broker_assigned_id,json=brokerAssignedId,proto3" json:"broker_assigned_id,omitempty"`
	ContractedCarrierAssignedId         string  `protobuf:"bytes,7,opt,name=contracted_carrier_assigned_id,json=contractedCarrierAssignedId,proto3" json:"contracted_carrier_assigned_id,omitempty"`
	PerformingCarrierAssignedId         string  `protobuf:"bytes,8,opt,name=performing_carrier_assigned_id,json=performingCarrierAssignedId,proto3" json:"performing_carrier_assigned_id,omitempty"`
	SummaryDescription                  string  `protobuf:"bytes,9,opt,name=summary_description,json=summaryDescription,proto3" json:"summary_description,omitempty"`
	TotalInvoiceAmount                  float64 `protobuf:"fixed64,10,opt,name=total_invoice_amount,json=totalInvoiceAmount,proto3" json:"total_invoice_amount,omitempty"`
	DeclaredCustomsValueAmount          float64 `protobuf:"fixed64,11,opt,name=declared_customs_value_amount,json=declaredCustomsValueAmount,proto3" json:"declared_customs_value_amount,omitempty"`
	TariffDescription                   string  `protobuf:"bytes,12,opt,name=tariff_description,json=tariffDescription,proto3" json:"tariff_description,omitempty"`
	TariffCode                          string  `protobuf:"bytes,13,opt,name=tariff_code,json=tariffCode,proto3" json:"tariff_code,omitempty"`
	InsurancePremiumAmount              float64 `protobuf:"fixed64,14,opt,name=insurance_premium_amount,json=insurancePremiumAmount,proto3" json:"insurance_premium_amount,omitempty"`
	GrossWeightMeasure                  float64 `protobuf:"fixed64,15,opt,name=gross_weight_measure,json=grossWeightMeasure,proto3" json:"gross_weight_measure,omitempty"`
	NetWeightMeasure                    float64 `protobuf:"fixed64,16,opt,name=net_weight_measure,json=netWeightMeasure,proto3" json:"net_weight_measure,omitempty"`
	NetNetWeightMeasure                 float64 `protobuf:"fixed64,17,opt,name=net_net_weight_measure,json=netNetWeightMeasure,proto3" json:"net_net_weight_measure,omitempty"`
	ChargeableWeightMeasure             float64 `protobuf:"fixed64,18,opt,name=chargeable_weight_measure,json=chargeableWeightMeasure,proto3" json:"chargeable_weight_measure,omitempty"`
	GrossVolumeMeasure                  float64 `protobuf:"fixed64,19,opt,name=gross_volume_measure,json=grossVolumeMeasure,proto3" json:"gross_volume_measure,omitempty"`
	NetVolumeMeasure                    float64 `protobuf:"fixed64,20,opt,name=net_volume_measure,json=netVolumeMeasure,proto3" json:"net_volume_measure,omitempty"`
	LoadingLengthMeasure                float64 `protobuf:"fixed64,21,opt,name=loading_length_measure,json=loadingLengthMeasure,proto3" json:"loading_length_measure,omitempty"`
	Remarks                             string  `protobuf:"bytes,22,opt,name=remarks,proto3" json:"remarks,omitempty"`
	HazardousRiskIndicator              bool    `protobuf:"varint,23,opt,name=hazardous_risk_indicator,json=hazardousRiskIndicator,proto3" json:"hazardous_risk_indicator,omitempty"`
	AnimalFoodIndicator                 bool    `protobuf:"varint,24,opt,name=animal_food_indicator,json=animalFoodIndicator,proto3" json:"animal_food_indicator,omitempty"`
	HumanFoodIndicator                  bool    `protobuf:"varint,25,opt,name=human_food_indicator,json=humanFoodIndicator,proto3" json:"human_food_indicator,omitempty"`
	LivestockIndicator                  bool    `protobuf:"varint,26,opt,name=livestock_indicator,json=livestockIndicator,proto3" json:"livestock_indicator,omitempty"`
	BulkCargoIndicator                  bool    `protobuf:"varint,27,opt,name=bulk_cargo_indicator,json=bulkCargoIndicator,proto3" json:"bulk_cargo_indicator,omitempty"`
	ContainerizedIndicator              bool    `protobuf:"varint,28,opt,name=containerized_indicator,json=containerizedIndicator,proto3" json:"containerized_indicator,omitempty"`
	GeneralCargoIndicator               bool    `protobuf:"varint,29,opt,name=general_cargo_indicator,json=generalCargoIndicator,proto3" json:"general_cargo_indicator,omitempty"`
	SpecialSecurityIndicator            bool    `protobuf:"varint,30,opt,name=special_security_indicator,json=specialSecurityIndicator,proto3" json:"special_security_indicator,omitempty"`
	ThirdPartyPayerIndicator            bool    `protobuf:"varint,31,opt,name=third_party_payer_indicator,json=thirdPartyPayerIndicator,proto3" json:"third_party_payer_indicator,omitempty"`
	CarrierServiceInstructions          string  `protobuf:"bytes,32,opt,name=carrier_service_instructions,json=carrierServiceInstructions,proto3" json:"carrier_service_instructions,omitempty"`
	CustomsClearanceServiceInstructions string  `protobuf:"bytes,33,opt,name=customs_clearance_service_instructions,json=customsClearanceServiceInstructions,proto3" json:"customs_clearance_service_instructions,omitempty"`
	ForwarderServiceInstructions        string  `protobuf:"bytes,34,opt,name=forwarder_service_instructions,json=forwarderServiceInstructions,proto3" json:"forwarder_service_instructions,omitempty"`
	SpecialServiceInstructions          string  `protobuf:"bytes,35,opt,name=special_service_instructions,json=specialServiceInstructions,proto3" json:"special_service_instructions,omitempty"`
	SequenceId                          uint32  `protobuf:"varint,36,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	ShippingPriorityLevelCode           string  `protobuf:"bytes,37,opt,name=shipping_priority_level_code,json=shippingPriorityLevelCode,proto3" json:"shipping_priority_level_code,omitempty"`
	HandlingCode                        string  `protobuf:"bytes,38,opt,name=handling_code,json=handlingCode,proto3" json:"handling_code,omitempty"`
	HandlingInstructions                string  `protobuf:"bytes,39,opt,name=handling_instructions,json=handlingInstructions,proto3" json:"handling_instructions,omitempty"`
	Information                         string  `protobuf:"bytes,40,opt,name=information,proto3" json:"information,omitempty"`
	TotalGoodsItemQuantity              uint32  `protobuf:"varint,41,opt,name=total_goods_item_quantity,json=totalGoodsItemQuantity,proto3" json:"total_goods_item_quantity,omitempty"`
	TotalTransportHandlingUnitQuantity  uint32  `protobuf:"varint,42,opt,name=total_transport_handling_unit_quantity,json=totalTransportHandlingUnitQuantity,proto3" json:"total_transport_handling_unit_quantity,omitempty"`
	InsuranceValueAmount                float64 `protobuf:"fixed64,43,opt,name=insurance_value_amount,json=insuranceValueAmount,proto3" json:"insurance_value_amount,omitempty"`
	DeclaredForCarriageValueAmount      float64 `protobuf:"fixed64,44,opt,name=declared_for_carriage_value_amount,json=declaredForCarriageValueAmount,proto3" json:"declared_for_carriage_value_amount,omitempty"`
	DeclaredStatisticsValueAmount       float64 `protobuf:"fixed64,45,opt,name=declared_statistics_value_amount,json=declaredStatisticsValueAmount,proto3" json:"declared_statistics_value_amount,omitempty"`
	FreeOnBoardValueAmount              float64 `protobuf:"fixed64,46,opt,name=free_on_board_value_amount,json=freeOnBoardValueAmount,proto3" json:"free_on_board_value_amount,omitempty"`
	SpecialInstructions                 string  `protobuf:"bytes,47,opt,name=special_instructions,json=specialInstructions,proto3" json:"special_instructions,omitempty"`
	SplitConsignmentIndicator           bool    `protobuf:"varint,48,opt,name=split_consignment_indicator,json=splitConsignmentIndicator,proto3" json:"split_consignment_indicator,omitempty"`
	DeliveryInstructions                string  `protobuf:"bytes,49,opt,name=delivery_instructions,json=deliveryInstructions,proto3" json:"delivery_instructions,omitempty"`
	ConsignmentQuantity                 float64 `protobuf:"fixed64,50,opt,name=consignment_quantity,json=consignmentQuantity,proto3" json:"consignment_quantity,omitempty"`
	ConsolidatableIndicator             bool    `protobuf:"varint,51,opt,name=consolidatable_indicator,json=consolidatableIndicator,proto3" json:"consolidatable_indicator,omitempty"`
	HaulageInstructions                 string  `protobuf:"bytes,52,opt,name=haulage_instructions,json=haulageInstructions,proto3" json:"haulage_instructions,omitempty"`
	LoadingSequenceId                   uint32  `protobuf:"varint,53,opt,name=loading_sequence_id,json=loadingSequenceId,proto3" json:"loading_sequence_id,omitempty"`
	ChildConsignmentQuantity            uint32  `protobuf:"varint,54,opt,name=child_consignment_quantity,json=childConsignmentQuantity,proto3" json:"child_consignment_quantity,omitempty"`
	TotalPackagesQuantity               uint32  `protobuf:"varint,55,opt,name=total_packages_quantity,json=totalPackagesQuantity,proto3" json:"total_packages_quantity,omitempty"`
	ConsigneePartyId                    uint32  `protobuf:"varint,56,opt,name=consignee_party_id,json=consigneePartyId,proto3" json:"consignee_party_id,omitempty"`
	ExporterPartyId                     uint32  `protobuf:"varint,57,opt,name=exporter_party_id,json=exporterPartyId,proto3" json:"exporter_party_id,omitempty"`
	ConsignorPartyId                    uint32  `protobuf:"varint,58,opt,name=consignor_party_id,json=consignorPartyId,proto3" json:"consignor_party_id,omitempty"`
	ImporterPartyId                     uint32  `protobuf:"varint,59,opt,name=importer_party_id,json=importerPartyId,proto3" json:"importer_party_id,omitempty"`
	CarrierPartyId                      uint32  `protobuf:"varint,60,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	FreightForwarderPartyId             uint32  `protobuf:"varint,61,opt,name=freight_forwarder_party_id,json=freightForwarderPartyId,proto3" json:"freight_forwarder_party_id,omitempty"`
	NotifyPartyId                       uint32  `protobuf:"varint,62,opt,name=notify_party_id,json=notifyPartyId,proto3" json:"notify_party_id,omitempty"`
	OriginalDespatchPartyId             uint32  `protobuf:"varint,63,opt,name=original_despatch_party_id,json=originalDespatchPartyId,proto3" json:"original_despatch_party_id,omitempty"`
	FinalDeliveryPartyId                uint32  `protobuf:"varint,64,opt,name=final_delivery_party_id,json=finalDeliveryPartyId,proto3" json:"final_delivery_party_id,omitempty"`
	PerformingCarrierPartyId            uint32  `protobuf:"varint,65,opt,name=performing_carrier_party_id,json=performingCarrierPartyId,proto3" json:"performing_carrier_party_id,omitempty"`
	SubstituteCarrierPartyId            uint32  `protobuf:"varint,66,opt,name=substitute_carrier_party_id,json=substituteCarrierPartyId,proto3" json:"substitute_carrier_party_id,omitempty"`
	LogisticsOperatorPartyId            uint32  `protobuf:"varint,67,opt,name=logistics_operator_party_id,json=logisticsOperatorPartyId,proto3" json:"logistics_operator_party_id,omitempty"`
	TransportAdvisorPartyId             uint32  `protobuf:"varint,68,opt,name=transport_advisor_party_id,json=transportAdvisorPartyId,proto3" json:"transport_advisor_party_id,omitempty"`
	HazardousItemNotificationPartyId    uint32  `protobuf:"varint,69,opt,name=hazardous_item_notification_party_id,json=hazardousItemNotificationPartyId,proto3" json:"hazardous_item_notification_party_id,omitempty"`
	InsurancePartyId                    uint32  `protobuf:"varint,70,opt,name=insurance_party_id,json=insurancePartyId,proto3" json:"insurance_party_id,omitempty"`
	MortgageHolderPartyId               uint32  `protobuf:"varint,71,opt,name=mortgage_holder_party_id,json=mortgageHolderPartyId,proto3" json:"mortgage_holder_party_id,omitempty"`
	BillOfLadingHolderPartyId           uint32  `protobuf:"varint,72,opt,name=bill_of_lading_holder_party_id,json=billOfLadingHolderPartyId,proto3" json:"bill_of_lading_holder_party_id,omitempty"`
	OriginalDepartureCountryIdCode      string  `protobuf:"bytes,73,opt,name=original_departure_country_id_code,json=originalDepartureCountryIdCode,proto3" json:"original_departure_country_id_code,omitempty"`
	OriginalDepartureCountryName        string  `protobuf:"bytes,74,opt,name=original_departure_country_name,json=originalDepartureCountryName,proto3" json:"original_departure_country_name,omitempty"`
	FinalDestinationCountryIdCode       string  `protobuf:"bytes,75,opt,name=final_destination_country_id_code,json=finalDestinationCountryIdCode,proto3" json:"final_destination_country_id_code,omitempty"`
	FinalDestinationCountryName         string  `protobuf:"bytes,76,opt,name=final_destination_country_name,json=finalDestinationCountryName,proto3" json:"final_destination_country_name,omitempty"`
	TransitCountryIdCode                string  `protobuf:"bytes,77,opt,name=transit_country_id_code,json=transitCountryIdCode,proto3" json:"transit_country_id_code,omitempty"`
	TransitCountryName                  string  `protobuf:"bytes,78,opt,name=transit_country_name,json=transitCountryName,proto3" json:"transit_country_name,omitempty"`
	DeliveryTermsId                     uint32  `protobuf:"varint,79,opt,name=delivery_terms_id,json=deliveryTermsId,proto3" json:"delivery_terms_id,omitempty"`
	PaymentTermsId                      uint32  `protobuf:"varint,80,opt,name=payment_terms_id,json=paymentTermsId,proto3" json:"payment_terms_id,omitempty"`
	CollectPaymentTermsId               uint32  `protobuf:"varint,81,opt,name=collect_payment_terms_id,json=collectPaymentTermsId,proto3" json:"collect_payment_terms_id,omitempty"`
	DisbursementPaymentTermsId          uint32  `protobuf:"varint,82,opt,name=disbursement_payment_terms_id,json=disbursementPaymentTermsId,proto3" json:"disbursement_payment_terms_id,omitempty"`
	PrepaidPaymentTermsId               uint32  `protobuf:"varint,83,opt,name=prepaid_payment_terms_id,json=prepaidPaymentTermsId,proto3" json:"prepaid_payment_terms_id,omitempty"`
	FirstArrivalPortAddressId           uint32  `protobuf:"varint,84,opt,name=first_arrival_port_address_id,json=firstArrivalPortAddressId,proto3" json:"first_arrival_port_address_id,omitempty"`
	LastExitPortLocationAddressId       uint32  `protobuf:"varint,85,opt,name=last_exit_port_location_address_id,json=lastExitPortLocationAddressId,proto3" json:"last_exit_port_location_address_id,omitempty"`
	UserId                              string  `protobuf:"bytes,86,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                           string  `protobuf:"bytes,87,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                           string  `protobuf:"bytes,88,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateConsignmentRequest) Reset() {
	*x = CreateConsignmentRequest{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsignmentRequest) ProtoMessage() {}

func (x *CreateConsignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsignmentRequest.ProtoReflect.Descriptor instead.
func (*CreateConsignmentRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{2}
}

func (x *CreateConsignmentRequest) GetConsId() string {
	if x != nil {
		return x.ConsId
	}
	return ""
}

func (x *CreateConsignmentRequest) GetCarrierAssignedId() string {
	if x != nil {
		return x.CarrierAssignedId
	}
	return ""
}

func (x *CreateConsignmentRequest) GetConsigneeAssignedId() string {
	if x != nil {
		return x.ConsigneeAssignedId
	}
	return ""
}

func (x *CreateConsignmentRequest) GetConsignorAssignedId() string {
	if x != nil {
		return x.ConsignorAssignedId
	}
	return ""
}

func (x *CreateConsignmentRequest) GetFreightForwarderAssignedId() string {
	if x != nil {
		return x.FreightForwarderAssignedId
	}
	return ""
}

func (x *CreateConsignmentRequest) GetBrokerAssignedId() string {
	if x != nil {
		return x.BrokerAssignedId
	}
	return ""
}

func (x *CreateConsignmentRequest) GetContractedCarrierAssignedId() string {
	if x != nil {
		return x.ContractedCarrierAssignedId
	}
	return ""
}

func (x *CreateConsignmentRequest) GetPerformingCarrierAssignedId() string {
	if x != nil {
		return x.PerformingCarrierAssignedId
	}
	return ""
}

func (x *CreateConsignmentRequest) GetSummaryDescription() string {
	if x != nil {
		return x.SummaryDescription
	}
	return ""
}

func (x *CreateConsignmentRequest) GetTotalInvoiceAmount() float64 {
	if x != nil {
		return x.TotalInvoiceAmount
	}
	return 0
}

func (x *CreateConsignmentRequest) GetDeclaredCustomsValueAmount() float64 {
	if x != nil {
		return x.DeclaredCustomsValueAmount
	}
	return 0
}

func (x *CreateConsignmentRequest) GetTariffDescription() string {
	if x != nil {
		return x.TariffDescription
	}
	return ""
}

func (x *CreateConsignmentRequest) GetTariffCode() string {
	if x != nil {
		return x.TariffCode
	}
	return ""
}

func (x *CreateConsignmentRequest) GetInsurancePremiumAmount() float64 {
	if x != nil {
		return x.InsurancePremiumAmount
	}
	return 0
}

func (x *CreateConsignmentRequest) GetGrossWeightMeasure() float64 {
	if x != nil {
		return x.GrossWeightMeasure
	}
	return 0
}

func (x *CreateConsignmentRequest) GetNetWeightMeasure() float64 {
	if x != nil {
		return x.NetWeightMeasure
	}
	return 0
}

func (x *CreateConsignmentRequest) GetNetNetWeightMeasure() float64 {
	if x != nil {
		return x.NetNetWeightMeasure
	}
	return 0
}

func (x *CreateConsignmentRequest) GetChargeableWeightMeasure() float64 {
	if x != nil {
		return x.ChargeableWeightMeasure
	}
	return 0
}

func (x *CreateConsignmentRequest) GetGrossVolumeMeasure() float64 {
	if x != nil {
		return x.GrossVolumeMeasure
	}
	return 0
}

func (x *CreateConsignmentRequest) GetNetVolumeMeasure() float64 {
	if x != nil {
		return x.NetVolumeMeasure
	}
	return 0
}

func (x *CreateConsignmentRequest) GetLoadingLengthMeasure() float64 {
	if x != nil {
		return x.LoadingLengthMeasure
	}
	return 0
}

func (x *CreateConsignmentRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CreateConsignmentRequest) GetHazardousRiskIndicator() bool {
	if x != nil {
		return x.HazardousRiskIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetAnimalFoodIndicator() bool {
	if x != nil {
		return x.AnimalFoodIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetHumanFoodIndicator() bool {
	if x != nil {
		return x.HumanFoodIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetLivestockIndicator() bool {
	if x != nil {
		return x.LivestockIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetBulkCargoIndicator() bool {
	if x != nil {
		return x.BulkCargoIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetContainerizedIndicator() bool {
	if x != nil {
		return x.ContainerizedIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetGeneralCargoIndicator() bool {
	if x != nil {
		return x.GeneralCargoIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetSpecialSecurityIndicator() bool {
	if x != nil {
		return x.SpecialSecurityIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetThirdPartyPayerIndicator() bool {
	if x != nil {
		return x.ThirdPartyPayerIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetCarrierServiceInstructions() string {
	if x != nil {
		return x.CarrierServiceInstructions
	}
	return ""
}

func (x *CreateConsignmentRequest) GetCustomsClearanceServiceInstructions() string {
	if x != nil {
		return x.CustomsClearanceServiceInstructions
	}
	return ""
}

func (x *CreateConsignmentRequest) GetForwarderServiceInstructions() string {
	if x != nil {
		return x.ForwarderServiceInstructions
	}
	return ""
}

func (x *CreateConsignmentRequest) GetSpecialServiceInstructions() string {
	if x != nil {
		return x.SpecialServiceInstructions
	}
	return ""
}

func (x *CreateConsignmentRequest) GetSequenceId() uint32 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetShippingPriorityLevelCode() string {
	if x != nil {
		return x.ShippingPriorityLevelCode
	}
	return ""
}

func (x *CreateConsignmentRequest) GetHandlingCode() string {
	if x != nil {
		return x.HandlingCode
	}
	return ""
}

func (x *CreateConsignmentRequest) GetHandlingInstructions() string {
	if x != nil {
		return x.HandlingInstructions
	}
	return ""
}

func (x *CreateConsignmentRequest) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *CreateConsignmentRequest) GetTotalGoodsItemQuantity() uint32 {
	if x != nil {
		return x.TotalGoodsItemQuantity
	}
	return 0
}

func (x *CreateConsignmentRequest) GetTotalTransportHandlingUnitQuantity() uint32 {
	if x != nil {
		return x.TotalTransportHandlingUnitQuantity
	}
	return 0
}

func (x *CreateConsignmentRequest) GetInsuranceValueAmount() float64 {
	if x != nil {
		return x.InsuranceValueAmount
	}
	return 0
}

func (x *CreateConsignmentRequest) GetDeclaredForCarriageValueAmount() float64 {
	if x != nil {
		return x.DeclaredForCarriageValueAmount
	}
	return 0
}

func (x *CreateConsignmentRequest) GetDeclaredStatisticsValueAmount() float64 {
	if x != nil {
		return x.DeclaredStatisticsValueAmount
	}
	return 0
}

func (x *CreateConsignmentRequest) GetFreeOnBoardValueAmount() float64 {
	if x != nil {
		return x.FreeOnBoardValueAmount
	}
	return 0
}

func (x *CreateConsignmentRequest) GetSpecialInstructions() string {
	if x != nil {
		return x.SpecialInstructions
	}
	return ""
}

func (x *CreateConsignmentRequest) GetSplitConsignmentIndicator() bool {
	if x != nil {
		return x.SplitConsignmentIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetDeliveryInstructions() string {
	if x != nil {
		return x.DeliveryInstructions
	}
	return ""
}

func (x *CreateConsignmentRequest) GetConsignmentQuantity() float64 {
	if x != nil {
		return x.ConsignmentQuantity
	}
	return 0
}

func (x *CreateConsignmentRequest) GetConsolidatableIndicator() bool {
	if x != nil {
		return x.ConsolidatableIndicator
	}
	return false
}

func (x *CreateConsignmentRequest) GetHaulageInstructions() string {
	if x != nil {
		return x.HaulageInstructions
	}
	return ""
}

func (x *CreateConsignmentRequest) GetLoadingSequenceId() uint32 {
	if x != nil {
		return x.LoadingSequenceId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetChildConsignmentQuantity() uint32 {
	if x != nil {
		return x.ChildConsignmentQuantity
	}
	return 0
}

func (x *CreateConsignmentRequest) GetTotalPackagesQuantity() uint32 {
	if x != nil {
		return x.TotalPackagesQuantity
	}
	return 0
}

func (x *CreateConsignmentRequest) GetConsigneePartyId() uint32 {
	if x != nil {
		return x.ConsigneePartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetExporterPartyId() uint32 {
	if x != nil {
		return x.ExporterPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetConsignorPartyId() uint32 {
	if x != nil {
		return x.ConsignorPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetImporterPartyId() uint32 {
	if x != nil {
		return x.ImporterPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetFreightForwarderPartyId() uint32 {
	if x != nil {
		return x.FreightForwarderPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetNotifyPartyId() uint32 {
	if x != nil {
		return x.NotifyPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetOriginalDespatchPartyId() uint32 {
	if x != nil {
		return x.OriginalDespatchPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetFinalDeliveryPartyId() uint32 {
	if x != nil {
		return x.FinalDeliveryPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetPerformingCarrierPartyId() uint32 {
	if x != nil {
		return x.PerformingCarrierPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetSubstituteCarrierPartyId() uint32 {
	if x != nil {
		return x.SubstituteCarrierPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetLogisticsOperatorPartyId() uint32 {
	if x != nil {
		return x.LogisticsOperatorPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetTransportAdvisorPartyId() uint32 {
	if x != nil {
		return x.TransportAdvisorPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetHazardousItemNotificationPartyId() uint32 {
	if x != nil {
		return x.HazardousItemNotificationPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetInsurancePartyId() uint32 {
	if x != nil {
		return x.InsurancePartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetMortgageHolderPartyId() uint32 {
	if x != nil {
		return x.MortgageHolderPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetBillOfLadingHolderPartyId() uint32 {
	if x != nil {
		return x.BillOfLadingHolderPartyId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetOriginalDepartureCountryIdCode() string {
	if x != nil {
		return x.OriginalDepartureCountryIdCode
	}
	return ""
}

func (x *CreateConsignmentRequest) GetOriginalDepartureCountryName() string {
	if x != nil {
		return x.OriginalDepartureCountryName
	}
	return ""
}

func (x *CreateConsignmentRequest) GetFinalDestinationCountryIdCode() string {
	if x != nil {
		return x.FinalDestinationCountryIdCode
	}
	return ""
}

func (x *CreateConsignmentRequest) GetFinalDestinationCountryName() string {
	if x != nil {
		return x.FinalDestinationCountryName
	}
	return ""
}

func (x *CreateConsignmentRequest) GetTransitCountryIdCode() string {
	if x != nil {
		return x.TransitCountryIdCode
	}
	return ""
}

func (x *CreateConsignmentRequest) GetTransitCountryName() string {
	if x != nil {
		return x.TransitCountryName
	}
	return ""
}

func (x *CreateConsignmentRequest) GetDeliveryTermsId() uint32 {
	if x != nil {
		return x.DeliveryTermsId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetPaymentTermsId() uint32 {
	if x != nil {
		return x.PaymentTermsId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetCollectPaymentTermsId() uint32 {
	if x != nil {
		return x.CollectPaymentTermsId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetDisbursementPaymentTermsId() uint32 {
	if x != nil {
		return x.DisbursementPaymentTermsId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetPrepaidPaymentTermsId() uint32 {
	if x != nil {
		return x.PrepaidPaymentTermsId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetFirstArrivalPortAddressId() uint32 {
	if x != nil {
		return x.FirstArrivalPortAddressId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetLastExitPortLocationAddressId() uint32 {
	if x != nil {
		return x.LastExitPortLocationAddressId
	}
	return 0
}

func (x *CreateConsignmentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateConsignmentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateConsignmentRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateConsignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consignment *Consignment `protobuf:"bytes,1,opt,name=consignment,proto3" json:"consignment,omitempty"`
}

func (x *CreateConsignmentResponse) Reset() {
	*x = CreateConsignmentResponse{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsignmentResponse) ProtoMessage() {}

func (x *CreateConsignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsignmentResponse.ProtoReflect.Descriptor instead.
func (*CreateConsignmentResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{3}
}

func (x *CreateConsignmentResponse) GetConsignment() *Consignment {
	if x != nil {
		return x.Consignment
	}
	return nil
}

type GetConsignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetConsignmentRequest) Reset() {
	*x = GetConsignmentRequest{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsignmentRequest) ProtoMessage() {}

func (x *GetConsignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsignmentRequest.ProtoReflect.Descriptor instead.
func (*GetConsignmentRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{4}
}

func (x *GetConsignmentRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetConsignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consignment *Consignment `protobuf:"bytes,1,opt,name=consignment,proto3" json:"consignment,omitempty"`
}

func (x *GetConsignmentResponse) Reset() {
	*x = GetConsignmentResponse{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsignmentResponse) ProtoMessage() {}

func (x *GetConsignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsignmentResponse.ProtoReflect.Descriptor instead.
func (*GetConsignmentResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{5}
}

func (x *GetConsignmentResponse) GetConsignment() *Consignment {
	if x != nil {
		return x.Consignment
	}
	return nil
}

type GetConsignmentByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetConsignmentByPkRequest) Reset() {
	*x = GetConsignmentByPkRequest{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsignmentByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsignmentByPkRequest) ProtoMessage() {}

func (x *GetConsignmentByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsignmentByPkRequest.ProtoReflect.Descriptor instead.
func (*GetConsignmentByPkRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{6}
}

func (x *GetConsignmentByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetConsignmentByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consignment *Consignment `protobuf:"bytes,1,opt,name=consignment,proto3" json:"consignment,omitempty"`
}

func (x *GetConsignmentByPkResponse) Reset() {
	*x = GetConsignmentByPkResponse{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsignmentByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsignmentByPkResponse) ProtoMessage() {}

func (x *GetConsignmentByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsignmentByPkResponse.ProtoReflect.Descriptor instead.
func (*GetConsignmentByPkResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{7}
}

func (x *GetConsignmentByPkResponse) GetConsignment() *Consignment {
	if x != nil {
		return x.Consignment
	}
	return nil
}

type GetConsignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetConsignmentsRequest) Reset() {
	*x = GetConsignmentsRequest{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsignmentsRequest) ProtoMessage() {}

func (x *GetConsignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsignmentsRequest.ProtoReflect.Descriptor instead.
func (*GetConsignmentsRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{8}
}

func (x *GetConsignmentsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetConsignmentsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetConsignmentsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetConsignmentsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetConsignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consignments []*Consignment `protobuf:"bytes,1,rep,name=consignments,proto3" json:"consignments,omitempty"`
	NextCursor   string         `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetConsignmentsResponse) Reset() {
	*x = GetConsignmentsResponse{}
	mi := &file_logistics_v1_consignment_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsignmentsResponse) ProtoMessage() {}

func (x *GetConsignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_consignment_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsignmentsResponse.ProtoReflect.Descriptor instead.
func (*GetConsignmentsResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_consignment_proto_rawDescGZIP(), []int{9}
}

func (x *GetConsignmentsResponse) GetConsignments() []*Consignment {
	if x != nil {
		return x.Consignments
	}
	return nil
}

func (x *GetConsignmentsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

var File_logistics_v1_consignment_proto protoreflect.FileDescriptor

var file_logistics_v1_consignment_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x16,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xe5, 0x25, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x1d, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e,
	0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x65, 0x74,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3a,
	0x0a, 0x19, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x17, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x72,
	0x6f, 0x73, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6e, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61,
	0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61,
	0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x66,
	0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x64, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x46, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x69,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x62,
	0x75, 0x6c, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x75, 0x6c, 0x6b, 0x43,
	0x61, 0x72, 0x67, 0x6f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a,
	0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x43, 0x61, 0x72, 0x67, 0x6f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c,
	0x0a, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x1b,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x1c, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a,
	0x26, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x33, 0x0a, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x26, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a,
	0x22, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1d, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x66, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x18, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x68, 0x61, 0x75, 0x6c, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x68, 0x61, 0x75, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66,
	0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x65, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4e,
	0x0a, 0x24, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x68, 0x61,
	0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1e, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66,
	0x5f, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x62,
	0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x62, 0x75,
	0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x1d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x49, 0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x8f, 0x26, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x73, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x72, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x1e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f,
	0x75, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f,
	0x75, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x32, 0x0a, 0x15, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x66, 0x6f, 0x6f,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x46, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x75, 0x6c, 0x6b, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x67, 0x6f,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x26, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a,
	0x1e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x15,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x52,
	0x0a, 0x26, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x1a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x66, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1b,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x15,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x31, 0x0a, 0x14, 0x68, 0x61, 0x75, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68,
	0x61, 0x75, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x72, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x24, 0x68, 0x61, 0x7a,
	0x61, 0x72, 0x64, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f,
	0x75, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x6f, 0x72, 0x74, 0x67,
	0x61, 0x67, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x6f, 0x72, 0x74, 0x67,
	0x61, 0x67, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x1e, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x66,
	0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x45, 0x0a, 0x1f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x43, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x1d, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x22, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x69,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x59, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x79, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x32, 0xa0, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x64, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75, 0x62, 0x6c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_logistics_v1_consignment_proto_rawDescOnce sync.Once
	file_logistics_v1_consignment_proto_rawDescData = file_logistics_v1_consignment_proto_rawDesc
)

func file_logistics_v1_consignment_proto_rawDescGZIP() []byte {
	file_logistics_v1_consignment_proto_rawDescOnce.Do(func() {
		file_logistics_v1_consignment_proto_rawDescData = protoimpl.X.CompressGZIP(file_logistics_v1_consignment_proto_rawDescData)
	})
	return file_logistics_v1_consignment_proto_rawDescData
}

var file_logistics_v1_consignment_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_logistics_v1_consignment_proto_goTypes = []any{
	(*Consignment)(nil),                // 0: logistics.v1.Consignment
	(*ConsignmentD)(nil),               // 1: logistics.v1.ConsignmentD
	(*CreateConsignmentRequest)(nil),   // 2: logistics.v1.CreateConsignmentRequest
	(*CreateConsignmentResponse)(nil),  // 3: logistics.v1.CreateConsignmentResponse
	(*GetConsignmentRequest)(nil),      // 4: logistics.v1.GetConsignmentRequest
	(*GetConsignmentResponse)(nil),     // 5: logistics.v1.GetConsignmentResponse
	(*GetConsignmentByPkRequest)(nil),  // 6: logistics.v1.GetConsignmentByPkRequest
	(*GetConsignmentByPkResponse)(nil), // 7: logistics.v1.GetConsignmentByPkResponse
	(*GetConsignmentsRequest)(nil),     // 8: logistics.v1.GetConsignmentsRequest
	(*GetConsignmentsResponse)(nil),    // 9: logistics.v1.GetConsignmentsResponse
	(*v1.CrUpdUser)(nil),               // 10: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),               // 11: common.v1.CrUpdTime
	(*v1.GetRequest)(nil),              // 12: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),          // 13: common.v1.GetByIdRequest
}
var file_logistics_v1_consignment_proto_depIdxs = []int32{
	1,  // 0: logistics.v1.Consignment.consignment_d:type_name -> logistics.v1.ConsignmentD
	10, // 1: logistics.v1.Consignment.cr_upd_user:type_name -> common.v1.CrUpdUser
	11, // 2: logistics.v1.Consignment.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 3: logistics.v1.CreateConsignmentResponse.consignment:type_name -> logistics.v1.Consignment
	12, // 4: logistics.v1.GetConsignmentRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 5: logistics.v1.GetConsignmentResponse.consignment:type_name -> logistics.v1.Consignment
	13, // 6: logistics.v1.GetConsignmentByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 7: logistics.v1.GetConsignmentByPkResponse.consignment:type_name -> logistics.v1.Consignment
	0,  // 8: logistics.v1.GetConsignmentsResponse.consignments:type_name -> logistics.v1.Consignment
	2,  // 9: logistics.v1.ConsignmentService.CreateConsignment:input_type -> logistics.v1.CreateConsignmentRequest
	8,  // 10: logistics.v1.ConsignmentService.GetConsignments:input_type -> logistics.v1.GetConsignmentsRequest
	4,  // 11: logistics.v1.ConsignmentService.GetConsignment:input_type -> logistics.v1.GetConsignmentRequest
	6,  // 12: logistics.v1.ConsignmentService.GetConsignmentByPk:input_type -> logistics.v1.GetConsignmentByPkRequest
	3,  // 13: logistics.v1.ConsignmentService.CreateConsignment:output_type -> logistics.v1.CreateConsignmentResponse
	9,  // 14: logistics.v1.ConsignmentService.GetConsignments:output_type -> logistics.v1.GetConsignmentsResponse
	5,  // 15: logistics.v1.ConsignmentService.GetConsignment:output_type -> logistics.v1.GetConsignmentResponse
	7,  // 16: logistics.v1.ConsignmentService.GetConsignmentByPk:output_type -> logistics.v1.GetConsignmentByPkResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_logistics_v1_consignment_proto_init() }
func file_logistics_v1_consignment_proto_init() {
	if File_logistics_v1_consignment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logistics_v1_consignment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logistics_v1_consignment_proto_goTypes,
		DependencyIndexes: file_logistics_v1_consignment_proto_depIdxs,
		MessageInfos:      file_logistics_v1_consignment_proto_msgTypes,
	}.Build()
	File_logistics_v1_consignment_proto = out.File
	file_logistics_v1_consignment_proto_rawDesc = nil
	file_logistics_v1_consignment_proto_goTypes = nil
	file_logistics_v1_consignment_proto_depIdxs = nil
}
