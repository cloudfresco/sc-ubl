// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logistics/v1/consignment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Consignment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Consignment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Consignment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsignmentMultiError, or
// nil if none found.
func (m *Consignment) ValidateAll() error {
	return m.validate(true)
}

func (m *Consignment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsignmentD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsignmentValidationError{
					field:  "ConsignmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsignmentValidationError{
					field:  "ConsignmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsignmentD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsignmentValidationError{
				field:  "ConsignmentD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsignmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsignmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsignmentValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsignmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsignmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsignmentValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConsignmentMultiError(errors)
	}

	return nil
}

// ConsignmentMultiError is an error wrapping multiple validation errors
// returned by Consignment.ValidateAll() if the designated constraints aren't met.
type ConsignmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsignmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsignmentMultiError) AllErrors() []error { return m }

// ConsignmentValidationError is the validation error returned by
// Consignment.Validate if the designated constraints aren't met.
type ConsignmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsignmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsignmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsignmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsignmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsignmentValidationError) ErrorName() string { return "ConsignmentValidationError" }

// Error satisfies the builtin error interface
func (e ConsignmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsignment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsignmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsignmentValidationError{}

// Validate checks the field values on ConsignmentD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConsignmentD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsignmentD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsignmentDMultiError, or
// nil if none found.
func (m *ConsignmentD) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsignmentD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ConsId

	// no validation rules for CarrierAssignedId

	// no validation rules for ConsigneeAssignedId

	// no validation rules for ConsignorAssignedId

	// no validation rules for FreightForwarderAssignedId

	// no validation rules for BrokerAssignedId

	// no validation rules for ContractedCarrierAssignedId

	// no validation rules for PerformingCarrierAssignedId

	// no validation rules for SummaryDescription

	// no validation rules for TotalInvoiceAmount

	// no validation rules for DeclaredCustomsValueAmount

	// no validation rules for TariffDescription

	// no validation rules for TariffCode

	// no validation rules for InsurancePremiumAmount

	// no validation rules for GrossWeightMeasure

	// no validation rules for NetWeightMeasure

	// no validation rules for NetNetWeightMeasure

	// no validation rules for ChargeableWeightMeasure

	// no validation rules for GrossVolumeMeasure

	// no validation rules for NetVolumeMeasure

	// no validation rules for LoadingLengthMeasure

	// no validation rules for Remarks

	// no validation rules for HazardousRiskIndicator

	// no validation rules for AnimalFoodIndicator

	// no validation rules for HumanFoodIndicator

	// no validation rules for LivestockIndicator

	// no validation rules for BulkCargoIndicator

	// no validation rules for ContainerizedIndicator

	// no validation rules for GeneralCargoIndicator

	// no validation rules for SpecialSecurityIndicator

	// no validation rules for ThirdPartyPayerIndicator

	// no validation rules for CarrierServiceInstructions

	// no validation rules for CustomsClearanceServiceInstructions

	// no validation rules for ForwarderServiceInstructions

	// no validation rules for SpecialServiceInstructions

	// no validation rules for SequenceId

	// no validation rules for ShippingPriorityLevelCode

	// no validation rules for HandlingCode

	// no validation rules for HandlingInstructions

	// no validation rules for Information

	// no validation rules for TotalGoodsItemQuantity

	// no validation rules for TotalTransportHandlingUnitQuantity

	// no validation rules for InsuranceValueAmount

	// no validation rules for DeclaredForCarriageValueAmount

	// no validation rules for DeclaredStatisticsValueAmount

	// no validation rules for FreeOnBoardValueAmount

	// no validation rules for SpecialInstructions

	// no validation rules for SplitConsignmentIndicator

	// no validation rules for DeliveryInstructions

	// no validation rules for ConsignmentQuantity

	// no validation rules for ConsolidatableIndicator

	// no validation rules for HaulageInstructions

	// no validation rules for LoadingSequenceId

	// no validation rules for ChildConsignmentQuantity

	// no validation rules for TotalPackagesQuantity

	// no validation rules for ConsigneePartyId

	// no validation rules for ExporterPartyId

	// no validation rules for ConsignorPartyId

	// no validation rules for ImporterPartyId

	// no validation rules for CarrierPartyId

	// no validation rules for FreightForwarderPartyId

	// no validation rules for NotifyPartyId

	// no validation rules for OriginalDespatchPartyId

	// no validation rules for FinalDeliveryPartyId

	// no validation rules for PerformingCarrierPartyId

	// no validation rules for SubstituteCarrierPartyId

	// no validation rules for LogisticsOperatorPartyId

	// no validation rules for TransportAdvisorPartyId

	// no validation rules for HazardousItemNotificationPartyId

	// no validation rules for InsurancePartyId

	// no validation rules for MortgageHolderPartyId

	// no validation rules for BillOfLadingHolderPartyId

	// no validation rules for OriginalDepartureCountryIdCode

	// no validation rules for OriginalDepartureCountryName

	// no validation rules for FinalDestinationCountryIdCode

	// no validation rules for FinalDestinationCountryName

	// no validation rules for TransitCountryIdCode

	// no validation rules for TransitCountryName

	// no validation rules for DeliveryTermsId

	// no validation rules for PaymentTermsId

	// no validation rules for CollectPaymentTermsId

	// no validation rules for DisbursementPaymentTermsId

	// no validation rules for PrepaidPaymentTermsId

	// no validation rules for FirstArrivalPortAddressId

	// no validation rules for LastExitPortLocationAddressId

	if len(errors) > 0 {
		return ConsignmentDMultiError(errors)
	}

	return nil
}

// ConsignmentDMultiError is an error wrapping multiple validation errors
// returned by ConsignmentD.ValidateAll() if the designated constraints aren't met.
type ConsignmentDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsignmentDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsignmentDMultiError) AllErrors() []error { return m }

// ConsignmentDValidationError is the validation error returned by
// ConsignmentD.Validate if the designated constraints aren't met.
type ConsignmentDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsignmentDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsignmentDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsignmentDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsignmentDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsignmentDValidationError) ErrorName() string { return "ConsignmentDValidationError" }

// Error satisfies the builtin error interface
func (e ConsignmentDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsignmentD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsignmentDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsignmentDValidationError{}

// Validate checks the field values on CreateConsignmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConsignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConsignmentRequestMultiError, or nil if none found.
func (m *CreateConsignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsId

	// no validation rules for CarrierAssignedId

	// no validation rules for ConsigneeAssignedId

	// no validation rules for ConsignorAssignedId

	// no validation rules for FreightForwarderAssignedId

	// no validation rules for BrokerAssignedId

	// no validation rules for ContractedCarrierAssignedId

	// no validation rules for PerformingCarrierAssignedId

	// no validation rules for SummaryDescription

	// no validation rules for TotalInvoiceAmount

	// no validation rules for DeclaredCustomsValueAmount

	// no validation rules for TariffDescription

	// no validation rules for TariffCode

	// no validation rules for InsurancePremiumAmount

	// no validation rules for GrossWeightMeasure

	// no validation rules for NetWeightMeasure

	// no validation rules for NetNetWeightMeasure

	// no validation rules for ChargeableWeightMeasure

	// no validation rules for GrossVolumeMeasure

	// no validation rules for NetVolumeMeasure

	// no validation rules for LoadingLengthMeasure

	// no validation rules for Remarks

	// no validation rules for HazardousRiskIndicator

	// no validation rules for AnimalFoodIndicator

	// no validation rules for HumanFoodIndicator

	// no validation rules for LivestockIndicator

	// no validation rules for BulkCargoIndicator

	// no validation rules for ContainerizedIndicator

	// no validation rules for GeneralCargoIndicator

	// no validation rules for SpecialSecurityIndicator

	// no validation rules for ThirdPartyPayerIndicator

	// no validation rules for CarrierServiceInstructions

	// no validation rules for CustomsClearanceServiceInstructions

	// no validation rules for ForwarderServiceInstructions

	// no validation rules for SpecialServiceInstructions

	// no validation rules for SequenceId

	// no validation rules for ShippingPriorityLevelCode

	// no validation rules for HandlingCode

	// no validation rules for HandlingInstructions

	// no validation rules for Information

	// no validation rules for TotalGoodsItemQuantity

	// no validation rules for TotalTransportHandlingUnitQuantity

	// no validation rules for InsuranceValueAmount

	// no validation rules for DeclaredForCarriageValueAmount

	// no validation rules for DeclaredStatisticsValueAmount

	// no validation rules for FreeOnBoardValueAmount

	// no validation rules for SpecialInstructions

	// no validation rules for SplitConsignmentIndicator

	// no validation rules for DeliveryInstructions

	// no validation rules for ConsignmentQuantity

	// no validation rules for ConsolidatableIndicator

	// no validation rules for HaulageInstructions

	// no validation rules for LoadingSequenceId

	// no validation rules for ChildConsignmentQuantity

	// no validation rules for TotalPackagesQuantity

	// no validation rules for ConsigneePartyId

	// no validation rules for ExporterPartyId

	// no validation rules for ConsignorPartyId

	// no validation rules for ImporterPartyId

	// no validation rules for CarrierPartyId

	// no validation rules for FreightForwarderPartyId

	// no validation rules for NotifyPartyId

	// no validation rules for OriginalDespatchPartyId

	// no validation rules for FinalDeliveryPartyId

	// no validation rules for PerformingCarrierPartyId

	// no validation rules for SubstituteCarrierPartyId

	// no validation rules for LogisticsOperatorPartyId

	// no validation rules for TransportAdvisorPartyId

	// no validation rules for HazardousItemNotificationPartyId

	// no validation rules for InsurancePartyId

	// no validation rules for MortgageHolderPartyId

	// no validation rules for BillOfLadingHolderPartyId

	// no validation rules for OriginalDepartureCountryIdCode

	// no validation rules for OriginalDepartureCountryName

	// no validation rules for FinalDestinationCountryIdCode

	// no validation rules for FinalDestinationCountryName

	// no validation rules for TransitCountryIdCode

	// no validation rules for TransitCountryName

	// no validation rules for DeliveryTermsId

	// no validation rules for PaymentTermsId

	// no validation rules for CollectPaymentTermsId

	// no validation rules for DisbursementPaymentTermsId

	// no validation rules for PrepaidPaymentTermsId

	// no validation rules for FirstArrivalPortAddressId

	// no validation rules for LastExitPortLocationAddressId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateConsignmentRequestMultiError(errors)
	}

	return nil
}

// CreateConsignmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateConsignmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateConsignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsignmentRequestMultiError) AllErrors() []error { return m }

// CreateConsignmentRequestValidationError is the validation error returned by
// CreateConsignmentRequest.Validate if the designated constraints aren't met.
type CreateConsignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsignmentRequestValidationError) ErrorName() string {
	return "CreateConsignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsignmentRequestValidationError{}

// Validate checks the field values on CreateConsignmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConsignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConsignmentResponseMultiError, or nil if none found.
func (m *CreateConsignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConsignmentResponseValidationError{
					field:  "Consignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConsignmentResponseValidationError{
					field:  "Consignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConsignmentResponseValidationError{
				field:  "Consignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateConsignmentResponseMultiError(errors)
	}

	return nil
}

// CreateConsignmentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateConsignmentResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateConsignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsignmentResponseMultiError) AllErrors() []error { return m }

// CreateConsignmentResponseValidationError is the validation error returned by
// CreateConsignmentResponse.Validate if the designated constraints aren't met.
type CreateConsignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsignmentResponseValidationError) ErrorName() string {
	return "CreateConsignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsignmentResponseValidationError{}

// Validate checks the field values on GetConsignmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsignmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsignmentRequestMultiError, or nil if none found.
func (m *GetConsignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConsignmentRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConsignmentRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConsignmentRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConsignmentRequestMultiError(errors)
	}

	return nil
}

// GetConsignmentRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsignmentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsignmentRequestMultiError) AllErrors() []error { return m }

// GetConsignmentRequestValidationError is the validation error returned by
// GetConsignmentRequest.Validate if the designated constraints aren't met.
type GetConsignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsignmentRequestValidationError) ErrorName() string {
	return "GetConsignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsignmentRequestValidationError{}

// Validate checks the field values on GetConsignmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsignmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsignmentResponseMultiError, or nil if none found.
func (m *GetConsignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConsignmentResponseValidationError{
					field:  "Consignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConsignmentResponseValidationError{
					field:  "Consignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConsignmentResponseValidationError{
				field:  "Consignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConsignmentResponseMultiError(errors)
	}

	return nil
}

// GetConsignmentResponseMultiError is an error wrapping multiple validation
// errors returned by GetConsignmentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConsignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsignmentResponseMultiError) AllErrors() []error { return m }

// GetConsignmentResponseValidationError is the validation error returned by
// GetConsignmentResponse.Validate if the designated constraints aren't met.
type GetConsignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsignmentResponseValidationError) ErrorName() string {
	return "GetConsignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsignmentResponseValidationError{}

// Validate checks the field values on GetConsignmentByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsignmentByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsignmentByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsignmentByPkRequestMultiError, or nil if none found.
func (m *GetConsignmentByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsignmentByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConsignmentByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConsignmentByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConsignmentByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConsignmentByPkRequestMultiError(errors)
	}

	return nil
}

// GetConsignmentByPkRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsignmentByPkRequest.ValidateAll() if the
// designated constraints aren't met.
type GetConsignmentByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsignmentByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsignmentByPkRequestMultiError) AllErrors() []error { return m }

// GetConsignmentByPkRequestValidationError is the validation error returned by
// GetConsignmentByPkRequest.Validate if the designated constraints aren't met.
type GetConsignmentByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsignmentByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsignmentByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsignmentByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsignmentByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsignmentByPkRequestValidationError) ErrorName() string {
	return "GetConsignmentByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsignmentByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsignmentByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsignmentByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsignmentByPkRequestValidationError{}

// Validate checks the field values on GetConsignmentByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsignmentByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsignmentByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsignmentByPkResponseMultiError, or nil if none found.
func (m *GetConsignmentByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsignmentByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConsignmentByPkResponseValidationError{
					field:  "Consignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConsignmentByPkResponseValidationError{
					field:  "Consignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConsignmentByPkResponseValidationError{
				field:  "Consignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConsignmentByPkResponseMultiError(errors)
	}

	return nil
}

// GetConsignmentByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetConsignmentByPkResponse.ValidateAll() if
// the designated constraints aren't met.
type GetConsignmentByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsignmentByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsignmentByPkResponseMultiError) AllErrors() []error { return m }

// GetConsignmentByPkResponseValidationError is the validation error returned
// by GetConsignmentByPkResponse.Validate if the designated constraints aren't met.
type GetConsignmentByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsignmentByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsignmentByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsignmentByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsignmentByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsignmentByPkResponseValidationError) ErrorName() string {
	return "GetConsignmentByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsignmentByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsignmentByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsignmentByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsignmentByPkResponseValidationError{}

// Validate checks the field values on GetConsignmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsignmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsignmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsignmentsRequestMultiError, or nil if none found.
func (m *GetConsignmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsignmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetConsignmentsRequestMultiError(errors)
	}

	return nil
}

// GetConsignmentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsignmentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsignmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsignmentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsignmentsRequestMultiError) AllErrors() []error { return m }

// GetConsignmentsRequestValidationError is the validation error returned by
// GetConsignmentsRequest.Validate if the designated constraints aren't met.
type GetConsignmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsignmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsignmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsignmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsignmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsignmentsRequestValidationError) ErrorName() string {
	return "GetConsignmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsignmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsignmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsignmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsignmentsRequestValidationError{}

// Validate checks the field values on GetConsignmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsignmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsignmentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsignmentsResponseMultiError, or nil if none found.
func (m *GetConsignmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsignmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConsignments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsignmentsResponseValidationError{
						field:  fmt.Sprintf("Consignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsignmentsResponseValidationError{
						field:  fmt.Sprintf("Consignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsignmentsResponseValidationError{
					field:  fmt.Sprintf("Consignments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetConsignmentsResponseMultiError(errors)
	}

	return nil
}

// GetConsignmentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetConsignmentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConsignmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsignmentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsignmentsResponseMultiError) AllErrors() []error { return m }

// GetConsignmentsResponseValidationError is the validation error returned by
// GetConsignmentsResponse.Validate if the designated constraints aren't met.
type GetConsignmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsignmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsignmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsignmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsignmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsignmentsResponseValidationError) ErrorName() string {
	return "GetConsignmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsignmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsignmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsignmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsignmentsResponseValidationError{}
