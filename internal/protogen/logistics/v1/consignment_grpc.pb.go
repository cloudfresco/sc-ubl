// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: logistics/v1/consignment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsignmentService_CreateConsignment_FullMethodName  = "/logistics.v1.ConsignmentService/CreateConsignment"
	ConsignmentService_GetConsignments_FullMethodName    = "/logistics.v1.ConsignmentService/GetConsignments"
	ConsignmentService_GetConsignment_FullMethodName     = "/logistics.v1.ConsignmentService/GetConsignment"
	ConsignmentService_GetConsignmentByPk_FullMethodName = "/logistics.v1.ConsignmentService/GetConsignmentByPk"
)

// ConsignmentServiceClient is the client API for ConsignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ConsignmentService service definition.
type ConsignmentServiceClient interface {
	CreateConsignment(ctx context.Context, in *CreateConsignmentRequest, opts ...grpc.CallOption) (*CreateConsignmentResponse, error)
	GetConsignments(ctx context.Context, in *GetConsignmentsRequest, opts ...grpc.CallOption) (*GetConsignmentsResponse, error)
	GetConsignment(ctx context.Context, in *GetConsignmentRequest, opts ...grpc.CallOption) (*GetConsignmentResponse, error)
	GetConsignmentByPk(ctx context.Context, in *GetConsignmentByPkRequest, opts ...grpc.CallOption) (*GetConsignmentByPkResponse, error)
}

type consignmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsignmentServiceClient(cc grpc.ClientConnInterface) ConsignmentServiceClient {
	return &consignmentServiceClient{cc}
}

func (c *consignmentServiceClient) CreateConsignment(ctx context.Context, in *CreateConsignmentRequest, opts ...grpc.CallOption) (*CreateConsignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsignmentResponse)
	err := c.cc.Invoke(ctx, ConsignmentService_CreateConsignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consignmentServiceClient) GetConsignments(ctx context.Context, in *GetConsignmentsRequest, opts ...grpc.CallOption) (*GetConsignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsignmentsResponse)
	err := c.cc.Invoke(ctx, ConsignmentService_GetConsignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consignmentServiceClient) GetConsignment(ctx context.Context, in *GetConsignmentRequest, opts ...grpc.CallOption) (*GetConsignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsignmentResponse)
	err := c.cc.Invoke(ctx, ConsignmentService_GetConsignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consignmentServiceClient) GetConsignmentByPk(ctx context.Context, in *GetConsignmentByPkRequest, opts ...grpc.CallOption) (*GetConsignmentByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsignmentByPkResponse)
	err := c.cc.Invoke(ctx, ConsignmentService_GetConsignmentByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsignmentServiceServer is the server API for ConsignmentService service.
// All implementations must embed UnimplementedConsignmentServiceServer
// for forward compatibility.
//
// The ConsignmentService service definition.
type ConsignmentServiceServer interface {
	CreateConsignment(context.Context, *CreateConsignmentRequest) (*CreateConsignmentResponse, error)
	GetConsignments(context.Context, *GetConsignmentsRequest) (*GetConsignmentsResponse, error)
	GetConsignment(context.Context, *GetConsignmentRequest) (*GetConsignmentResponse, error)
	GetConsignmentByPk(context.Context, *GetConsignmentByPkRequest) (*GetConsignmentByPkResponse, error)
	mustEmbedUnimplementedConsignmentServiceServer()
}

// UnimplementedConsignmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsignmentServiceServer struct{}

func (UnimplementedConsignmentServiceServer) CreateConsignment(context.Context, *CreateConsignmentRequest) (*CreateConsignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsignment not implemented")
}
func (UnimplementedConsignmentServiceServer) GetConsignments(context.Context, *GetConsignmentsRequest) (*GetConsignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsignments not implemented")
}
func (UnimplementedConsignmentServiceServer) GetConsignment(context.Context, *GetConsignmentRequest) (*GetConsignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsignment not implemented")
}
func (UnimplementedConsignmentServiceServer) GetConsignmentByPk(context.Context, *GetConsignmentByPkRequest) (*GetConsignmentByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsignmentByPk not implemented")
}
func (UnimplementedConsignmentServiceServer) mustEmbedUnimplementedConsignmentServiceServer() {}
func (UnimplementedConsignmentServiceServer) testEmbeddedByValue()                            {}

// UnsafeConsignmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsignmentServiceServer will
// result in compilation errors.
type UnsafeConsignmentServiceServer interface {
	mustEmbedUnimplementedConsignmentServiceServer()
}

func RegisterConsignmentServiceServer(s grpc.ServiceRegistrar, srv ConsignmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsignmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsignmentService_ServiceDesc, srv)
}

func _ConsignmentService_CreateConsignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsignmentServiceServer).CreateConsignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsignmentService_CreateConsignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsignmentServiceServer).CreateConsignment(ctx, req.(*CreateConsignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsignmentService_GetConsignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsignmentServiceServer).GetConsignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsignmentService_GetConsignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsignmentServiceServer).GetConsignments(ctx, req.(*GetConsignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsignmentService_GetConsignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsignmentServiceServer).GetConsignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsignmentService_GetConsignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsignmentServiceServer).GetConsignment(ctx, req.(*GetConsignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsignmentService_GetConsignmentByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsignmentByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsignmentServiceServer).GetConsignmentByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsignmentService_GetConsignmentByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsignmentServiceServer).GetConsignmentByPk(ctx, req.(*GetConsignmentByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsignmentService_ServiceDesc is the grpc.ServiceDesc for ConsignmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsignmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.v1.ConsignmentService",
	HandlerType: (*ConsignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConsignment",
			Handler:    _ConsignmentService_CreateConsignment_Handler,
		},
		{
			MethodName: "GetConsignments",
			Handler:    _ConsignmentService_GetConsignments_Handler,
		},
		{
			MethodName: "GetConsignment",
			Handler:    _ConsignmentService_GetConsignment_Handler,
		},
		{
			MethodName: "GetConsignmentByPk",
			Handler:    _ConsignmentService_GetConsignmentByPk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistics/v1/consignment.proto",
}
