// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: logistics/v1/despatch.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DespatchHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchHeaderD *DespatchHeaderD `protobuf:"bytes,1,opt,name=despatch_header_d,json=despatchHeaderD,proto3" json:"despatch_header_d,omitempty"`
	DespatchHeaderT *DespatchHeaderT `protobuf:"bytes,2,opt,name=despatch_header_t,json=despatchHeaderT,proto3" json:"despatch_header_t,omitempty"`
	CrUpdUser       *v1.CrUpdUser    `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime       *v1.CrUpdTime    `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DespatchHeader) Reset() {
	*x = DespatchHeader{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchHeader) ProtoMessage() {}

func (x *DespatchHeader) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchHeader.ProtoReflect.Descriptor instead.
func (*DespatchHeader) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{0}
}

func (x *DespatchHeader) GetDespatchHeaderD() *DespatchHeaderD {
	if x != nil {
		return x.DespatchHeaderD
	}
	return nil
}

func (x *DespatchHeader) GetDespatchHeaderT() *DespatchHeaderT {
	if x != nil {
		return x.DespatchHeaderT
	}
	return nil
}

func (x *DespatchHeader) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DespatchHeader) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DespatchHeaderD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	DesphId                   string `protobuf:"bytes,4,opt,name=desph_id,json=desphId,proto3" json:"desph_id,omitempty"`
	DocumentStatusCode        string `protobuf:"bytes,5,opt,name=document_status_code,json=documentStatusCode,proto3" json:"document_status_code,omitempty"`
	DespatchAdviceTypeCode    string `protobuf:"bytes,6,opt,name=despatch_advice_type_code,json=despatchAdviceTypeCode,proto3" json:"despatch_advice_type_code,omitempty"`
	Note                      string `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	LineCountNumeric          uint32 `protobuf:"varint,8,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	OrderId                   uint32 `protobuf:"varint,9,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	DespatchSupplierPartyId   uint32 `protobuf:"varint,10,opt,name=despatch_supplier_party_id,json=despatchSupplierPartyId,proto3" json:"despatch_supplier_party_id,omitempty"`
	DeliveryCustomerPartyId   uint32 `protobuf:"varint,11,opt,name=delivery_customer_party_id,json=deliveryCustomerPartyId,proto3" json:"delivery_customer_party_id,omitempty"`
	BuyerCustomerPartyId      uint32 `protobuf:"varint,12,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId     uint32 `protobuf:"varint,13,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	OriginatorCustomerPartyId uint32 `protobuf:"varint,14,opt,name=originator_customer_party_id,json=originatorCustomerPartyId,proto3" json:"originator_customer_party_id,omitempty"`
	ShipmentId                uint32 `protobuf:"varint,15,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
}

func (x *DespatchHeaderD) Reset() {
	*x = DespatchHeaderD{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchHeaderD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchHeaderD) ProtoMessage() {}

func (x *DespatchHeaderD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchHeaderD.ProtoReflect.Descriptor instead.
func (*DespatchHeaderD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{1}
}

func (x *DespatchHeaderD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DespatchHeaderD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DespatchHeaderD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DespatchHeaderD) GetDesphId() string {
	if x != nil {
		return x.DesphId
	}
	return ""
}

func (x *DespatchHeaderD) GetDocumentStatusCode() string {
	if x != nil {
		return x.DocumentStatusCode
	}
	return ""
}

func (x *DespatchHeaderD) GetDespatchAdviceTypeCode() string {
	if x != nil {
		return x.DespatchAdviceTypeCode
	}
	return ""
}

func (x *DespatchHeaderD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *DespatchHeaderD) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *DespatchHeaderD) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DespatchHeaderD) GetDespatchSupplierPartyId() uint32 {
	if x != nil {
		return x.DespatchSupplierPartyId
	}
	return 0
}

func (x *DespatchHeaderD) GetDeliveryCustomerPartyId() uint32 {
	if x != nil {
		return x.DeliveryCustomerPartyId
	}
	return 0
}

func (x *DespatchHeaderD) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *DespatchHeaderD) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *DespatchHeaderD) GetOriginatorCustomerPartyId() uint32 {
	if x != nil {
		return x.OriginatorCustomerPartyId
	}
	return 0
}

func (x *DespatchHeaderD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

type DespatchHeaderT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
}

func (x *DespatchHeaderT) Reset() {
	*x = DespatchHeaderT{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchHeaderT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchHeaderT) ProtoMessage() {}

func (x *DespatchHeaderT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchHeaderT.ProtoReflect.Descriptor instead.
func (*DespatchHeaderT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{2}
}

func (x *DespatchHeaderT) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

type CreateDespatchHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesphId                   string                       `protobuf:"bytes,1,opt,name=desph_id,json=desphId,proto3" json:"desph_id,omitempty"`
	IssueDate                 string                       `protobuf:"bytes,2,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	DocumentStatusCode        string                       `protobuf:"bytes,3,opt,name=document_status_code,json=documentStatusCode,proto3" json:"document_status_code,omitempty"`
	DespatchAdviceTypeCode    string                       `protobuf:"bytes,4,opt,name=despatch_advice_type_code,json=despatchAdviceTypeCode,proto3" json:"despatch_advice_type_code,omitempty"`
	Note                      string                       `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	LineCountNumeric          uint32                       `protobuf:"varint,6,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	OrderId                   uint32                       `protobuf:"varint,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	DespatchSupplierPartyId   uint32                       `protobuf:"varint,8,opt,name=despatch_supplier_party_id,json=despatchSupplierPartyId,proto3" json:"despatch_supplier_party_id,omitempty"`
	DeliveryCustomerPartyId   uint32                       `protobuf:"varint,9,opt,name=delivery_customer_party_id,json=deliveryCustomerPartyId,proto3" json:"delivery_customer_party_id,omitempty"`
	BuyerCustomerPartyId      uint32                       `protobuf:"varint,10,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId     uint32                       `protobuf:"varint,11,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	OriginatorCustomerPartyId uint32                       `protobuf:"varint,12,opt,name=originator_customer_party_id,json=originatorCustomerPartyId,proto3" json:"originator_customer_party_id,omitempty"`
	ShipmentId                uint32                       `protobuf:"varint,13,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	UserId                    string                       `protobuf:"bytes,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string                       `protobuf:"bytes,15,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string                       `protobuf:"bytes,16,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DespatchLines             []*CreateDespatchLineRequest `protobuf:"bytes,17,rep,name=despatch_lines,json=despatchLines,proto3" json:"despatch_lines,omitempty"`
}

func (x *CreateDespatchHeaderRequest) Reset() {
	*x = CreateDespatchHeaderRequest{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchHeaderRequest) ProtoMessage() {}

func (x *CreateDespatchHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchHeaderRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchHeaderRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDespatchHeaderRequest) GetDesphId() string {
	if x != nil {
		return x.DesphId
	}
	return ""
}

func (x *CreateDespatchHeaderRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *CreateDespatchHeaderRequest) GetDocumentStatusCode() string {
	if x != nil {
		return x.DocumentStatusCode
	}
	return ""
}

func (x *CreateDespatchHeaderRequest) GetDespatchAdviceTypeCode() string {
	if x != nil {
		return x.DespatchAdviceTypeCode
	}
	return ""
}

func (x *CreateDespatchHeaderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateDespatchHeaderRequest) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *CreateDespatchHeaderRequest) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreateDespatchHeaderRequest) GetDespatchSupplierPartyId() uint32 {
	if x != nil {
		return x.DespatchSupplierPartyId
	}
	return 0
}

func (x *CreateDespatchHeaderRequest) GetDeliveryCustomerPartyId() uint32 {
	if x != nil {
		return x.DeliveryCustomerPartyId
	}
	return 0
}

func (x *CreateDespatchHeaderRequest) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *CreateDespatchHeaderRequest) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *CreateDespatchHeaderRequest) GetOriginatorCustomerPartyId() uint32 {
	if x != nil {
		return x.OriginatorCustomerPartyId
	}
	return 0
}

func (x *CreateDespatchHeaderRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateDespatchHeaderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchHeaderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchHeaderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateDespatchHeaderRequest) GetDespatchLines() []*CreateDespatchLineRequest {
	if x != nil {
		return x.DespatchLines
	}
	return nil
}

type CreateDespatchHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchHeader *DespatchHeader `protobuf:"bytes,1,opt,name=despatch_header,json=despatchHeader,proto3" json:"despatch_header,omitempty"`
}

func (x *CreateDespatchHeaderResponse) Reset() {
	*x = CreateDespatchHeaderResponse{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchHeaderResponse) ProtoMessage() {}

func (x *CreateDespatchHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchHeaderResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchHeaderResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDespatchHeaderResponse) GetDespatchHeader() *DespatchHeader {
	if x != nil {
		return x.DespatchHeader
	}
	return nil
}

type GetDespatchHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetDespatchHeaderRequest) Reset() {
	*x = GetDespatchHeaderRequest{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchHeaderRequest) ProtoMessage() {}

func (x *GetDespatchHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetDespatchHeaderRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{5}
}

func (x *GetDespatchHeaderRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetDespatchHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchHeader *DespatchHeader `protobuf:"bytes,1,opt,name=despatch_header,json=despatchHeader,proto3" json:"despatch_header,omitempty"`
}

func (x *GetDespatchHeaderResponse) Reset() {
	*x = GetDespatchHeaderResponse{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchHeaderResponse) ProtoMessage() {}

func (x *GetDespatchHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetDespatchHeaderResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{6}
}

func (x *GetDespatchHeaderResponse) GetDespatchHeader() *DespatchHeader {
	if x != nil {
		return x.DespatchHeader
	}
	return nil
}

type GetDespatchHeaderByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetDespatchHeaderByPkRequest) Reset() {
	*x = GetDespatchHeaderByPkRequest{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchHeaderByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchHeaderByPkRequest) ProtoMessage() {}

func (x *GetDespatchHeaderByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchHeaderByPkRequest.ProtoReflect.Descriptor instead.
func (*GetDespatchHeaderByPkRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{7}
}

func (x *GetDespatchHeaderByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetDespatchHeaderByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchHeader *DespatchHeader `protobuf:"bytes,1,opt,name=despatch_header,json=despatchHeader,proto3" json:"despatch_header,omitempty"`
}

func (x *GetDespatchHeaderByPkResponse) Reset() {
	*x = GetDespatchHeaderByPkResponse{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchHeaderByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchHeaderByPkResponse) ProtoMessage() {}

func (x *GetDespatchHeaderByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchHeaderByPkResponse.ProtoReflect.Descriptor instead.
func (*GetDespatchHeaderByPkResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{8}
}

func (x *GetDespatchHeaderByPkResponse) GetDespatchHeader() *DespatchHeader {
	if x != nil {
		return x.DespatchHeader
	}
	return nil
}

type GetDespatchHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetDespatchHeadersRequest) Reset() {
	*x = GetDespatchHeadersRequest{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchHeadersRequest) ProtoMessage() {}

func (x *GetDespatchHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchHeadersRequest.ProtoReflect.Descriptor instead.
func (*GetDespatchHeadersRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{9}
}

func (x *GetDespatchHeadersRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetDespatchHeadersRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetDespatchHeadersRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetDespatchHeadersRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetDespatchHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchHeaders []*DespatchHeader `protobuf:"bytes,1,rep,name=despatch_headers,json=despatchHeaders,proto3" json:"despatch_headers,omitempty"`
	NextCursor      string            `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetDespatchHeadersResponse) Reset() {
	*x = GetDespatchHeadersResponse{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchHeadersResponse) ProtoMessage() {}

func (x *GetDespatchHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchHeadersResponse.ProtoReflect.Descriptor instead.
func (*GetDespatchHeadersResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{10}
}

func (x *GetDespatchHeadersResponse) GetDespatchHeaders() []*DespatchHeader {
	if x != nil {
		return x.DespatchHeaders
	}
	return nil
}

func (x *GetDespatchHeadersResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type DespatchLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchLineD *DespatchLineD `protobuf:"bytes,1,opt,name=despatch_line_d,json=despatchLineD,proto3" json:"despatch_line_d,omitempty"`
	CrUpdUser     *v1.CrUpdUser  `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime     *v1.CrUpdTime  `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DespatchLine) Reset() {
	*x = DespatchLine{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchLine) ProtoMessage() {}

func (x *DespatchLine) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchLine.ProtoReflect.Descriptor instead.
func (*DespatchLine) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{11}
}

func (x *DespatchLine) GetDespatchLineD() *DespatchLineD {
	if x != nil {
		return x.DespatchLineD
	}
	return nil
}

func (x *DespatchLine) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DespatchLine) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DespatchLineD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4               []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                 string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	DesplId             string  `protobuf:"bytes,4,opt,name=despl_id,json=desplId,proto3" json:"despl_id,omitempty"`
	Note                string  `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	LineStatusCode      string  `protobuf:"bytes,6,opt,name=line_status_code,json=lineStatusCode,proto3" json:"line_status_code,omitempty"`
	DeliveredQuantity   float64 `protobuf:"fixed64,7,opt,name=delivered_quantity,json=deliveredQuantity,proto3" json:"delivered_quantity,omitempty"`
	BackorderQuantity   float64 `protobuf:"fixed64,8,opt,name=backorder_quantity,json=backorderQuantity,proto3" json:"backorder_quantity,omitempty"`
	BackorderReason     string  `protobuf:"bytes,9,opt,name=backorder_reason,json=backorderReason,proto3" json:"backorder_reason,omitempty"`
	OutstandingQuantity float64 `protobuf:"fixed64,10,opt,name=outstanding_quantity,json=outstandingQuantity,proto3" json:"outstanding_quantity,omitempty"`
	OutstandingReason   string  `protobuf:"bytes,11,opt,name=outstanding_reason,json=outstandingReason,proto3" json:"outstanding_reason,omitempty"`
	OversupplyQuantity  float64 `protobuf:"fixed64,12,opt,name=oversupply_quantity,json=oversupplyQuantity,proto3" json:"oversupply_quantity,omitempty"`
	OrderLineId         uint32  `protobuf:"varint,13,opt,name=order_line_id,json=orderLineId,proto3" json:"order_line_id,omitempty"`
	ItemId              uint32  `protobuf:"varint,14,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ShipmentId          uint32  `protobuf:"varint,15,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	DespatchHeaderId    uint32  `protobuf:"varint,16,opt,name=despatch_header_id,json=despatchHeaderId,proto3" json:"despatch_header_id,omitempty"`
}

func (x *DespatchLineD) Reset() {
	*x = DespatchLineD{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchLineD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchLineD) ProtoMessage() {}

func (x *DespatchLineD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchLineD.ProtoReflect.Descriptor instead.
func (*DespatchLineD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{12}
}

func (x *DespatchLineD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DespatchLineD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DespatchLineD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DespatchLineD) GetDesplId() string {
	if x != nil {
		return x.DesplId
	}
	return ""
}

func (x *DespatchLineD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *DespatchLineD) GetLineStatusCode() string {
	if x != nil {
		return x.LineStatusCode
	}
	return ""
}

func (x *DespatchLineD) GetDeliveredQuantity() float64 {
	if x != nil {
		return x.DeliveredQuantity
	}
	return 0
}

func (x *DespatchLineD) GetBackorderQuantity() float64 {
	if x != nil {
		return x.BackorderQuantity
	}
	return 0
}

func (x *DespatchLineD) GetBackorderReason() string {
	if x != nil {
		return x.BackorderReason
	}
	return ""
}

func (x *DespatchLineD) GetOutstandingQuantity() float64 {
	if x != nil {
		return x.OutstandingQuantity
	}
	return 0
}

func (x *DespatchLineD) GetOutstandingReason() string {
	if x != nil {
		return x.OutstandingReason
	}
	return ""
}

func (x *DespatchLineD) GetOversupplyQuantity() float64 {
	if x != nil {
		return x.OversupplyQuantity
	}
	return 0
}

func (x *DespatchLineD) GetOrderLineId() uint32 {
	if x != nil {
		return x.OrderLineId
	}
	return 0
}

func (x *DespatchLineD) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DespatchLineD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *DespatchLineD) GetDespatchHeaderId() uint32 {
	if x != nil {
		return x.DespatchHeaderId
	}
	return 0
}

type CreateDespatchLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesplId             string  `protobuf:"bytes,1,opt,name=despl_id,json=desplId,proto3" json:"despl_id,omitempty"`
	Note                string  `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	LineStatusCode      string  `protobuf:"bytes,3,opt,name=line_status_code,json=lineStatusCode,proto3" json:"line_status_code,omitempty"`
	DeliveredQuantity   float64 `protobuf:"fixed64,4,opt,name=delivered_quantity,json=deliveredQuantity,proto3" json:"delivered_quantity,omitempty"`
	BackorderQuantity   float64 `protobuf:"fixed64,5,opt,name=backorder_quantity,json=backorderQuantity,proto3" json:"backorder_quantity,omitempty"`
	BackorderReason     string  `protobuf:"bytes,6,opt,name=backorder_reason,json=backorderReason,proto3" json:"backorder_reason,omitempty"`
	OutstandingQuantity float64 `protobuf:"fixed64,7,opt,name=outstanding_quantity,json=outstandingQuantity,proto3" json:"outstanding_quantity,omitempty"`
	OutstandingReason   string  `protobuf:"bytes,8,opt,name=outstanding_reason,json=outstandingReason,proto3" json:"outstanding_reason,omitempty"`
	OversupplyQuantity  float64 `protobuf:"fixed64,9,opt,name=oversupply_quantity,json=oversupplyQuantity,proto3" json:"oversupply_quantity,omitempty"`
	OrderLineId         uint32  `protobuf:"varint,10,opt,name=order_line_id,json=orderLineId,proto3" json:"order_line_id,omitempty"`
	ItemId              uint32  `protobuf:"varint,11,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ShipmentId          uint32  `protobuf:"varint,12,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	DespatchHeaderId    uint32  `protobuf:"varint,13,opt,name=despatch_header_id,json=despatchHeaderId,proto3" json:"despatch_header_id,omitempty"`
	UserId              string  `protobuf:"bytes,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail           string  `protobuf:"bytes,15,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId           string  `protobuf:"bytes,16,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDespatchLineRequest) Reset() {
	*x = CreateDespatchLineRequest{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchLineRequest) ProtoMessage() {}

func (x *CreateDespatchLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchLineRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchLineRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{13}
}

func (x *CreateDespatchLineRequest) GetDesplId() string {
	if x != nil {
		return x.DesplId
	}
	return ""
}

func (x *CreateDespatchLineRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateDespatchLineRequest) GetLineStatusCode() string {
	if x != nil {
		return x.LineStatusCode
	}
	return ""
}

func (x *CreateDespatchLineRequest) GetDeliveredQuantity() float64 {
	if x != nil {
		return x.DeliveredQuantity
	}
	return 0
}

func (x *CreateDespatchLineRequest) GetBackorderQuantity() float64 {
	if x != nil {
		return x.BackorderQuantity
	}
	return 0
}

func (x *CreateDespatchLineRequest) GetBackorderReason() string {
	if x != nil {
		return x.BackorderReason
	}
	return ""
}

func (x *CreateDespatchLineRequest) GetOutstandingQuantity() float64 {
	if x != nil {
		return x.OutstandingQuantity
	}
	return 0
}

func (x *CreateDespatchLineRequest) GetOutstandingReason() string {
	if x != nil {
		return x.OutstandingReason
	}
	return ""
}

func (x *CreateDespatchLineRequest) GetOversupplyQuantity() float64 {
	if x != nil {
		return x.OversupplyQuantity
	}
	return 0
}

func (x *CreateDespatchLineRequest) GetOrderLineId() uint32 {
	if x != nil {
		return x.OrderLineId
	}
	return 0
}

func (x *CreateDespatchLineRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateDespatchLineRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateDespatchLineRequest) GetDespatchHeaderId() uint32 {
	if x != nil {
		return x.DespatchHeaderId
	}
	return 0
}

func (x *CreateDespatchLineRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchLineRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchLineRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDespatchLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchLine *DespatchLine `protobuf:"bytes,1,opt,name=despatch_line,json=despatchLine,proto3" json:"despatch_line,omitempty"`
}

func (x *CreateDespatchLineResponse) Reset() {
	*x = CreateDespatchLineResponse{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchLineResponse) ProtoMessage() {}

func (x *CreateDespatchLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchLineResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchLineResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{14}
}

func (x *CreateDespatchLineResponse) GetDespatchLine() *DespatchLine {
	if x != nil {
		return x.DespatchLine
	}
	return nil
}

type GetDespatchLinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetDespatchLinesRequest) Reset() {
	*x = GetDespatchLinesRequest{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchLinesRequest) ProtoMessage() {}

func (x *GetDespatchLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchLinesRequest.ProtoReflect.Descriptor instead.
func (*GetDespatchLinesRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{15}
}

func (x *GetDespatchLinesRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetDespatchLinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchLines []*DespatchLine `protobuf:"bytes,1,rep,name=despatch_lines,json=despatchLines,proto3" json:"despatch_lines,omitempty"`
}

func (x *GetDespatchLinesResponse) Reset() {
	*x = GetDespatchLinesResponse{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDespatchLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDespatchLinesResponse) ProtoMessage() {}

func (x *GetDespatchLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDespatchLinesResponse.ProtoReflect.Descriptor instead.
func (*GetDespatchLinesResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{16}
}

func (x *GetDespatchLinesResponse) GetDespatchLines() []*DespatchLine {
	if x != nil {
		return x.DespatchLines
	}
	return nil
}

type UpdateDespatchHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatusCode     string `protobuf:"bytes,1,opt,name=document_status_code,json=documentStatusCode,proto3" json:"document_status_code,omitempty"`
	DespatchAdviceTypeCode string `protobuf:"bytes,2,opt,name=despatch_advice_type_code,json=despatchAdviceTypeCode,proto3" json:"despatch_advice_type_code,omitempty"`
	Note                   string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	Id                     string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	UserId                 string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateDespatchHeaderRequest) Reset() {
	*x = UpdateDespatchHeaderRequest{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDespatchHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDespatchHeaderRequest) ProtoMessage() {}

func (x *UpdateDespatchHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDespatchHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateDespatchHeaderRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateDespatchHeaderRequest) GetDocumentStatusCode() string {
	if x != nil {
		return x.DocumentStatusCode
	}
	return ""
}

func (x *UpdateDespatchHeaderRequest) GetDespatchAdviceTypeCode() string {
	if x != nil {
		return x.DespatchAdviceTypeCode
	}
	return ""
}

func (x *UpdateDespatchHeaderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateDespatchHeaderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDespatchHeaderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateDespatchHeaderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateDespatchHeaderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateDespatchHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDespatchHeaderResponse) Reset() {
	*x = UpdateDespatchHeaderResponse{}
	mi := &file_logistics_v1_despatch_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDespatchHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDespatchHeaderResponse) ProtoMessage() {}

func (x *UpdateDespatchHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_despatch_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDespatchHeaderResponse.ProtoReflect.Descriptor instead.
func (*UpdateDespatchHeaderResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_despatch_proto_rawDescGZIP(), []int{18}
}

var File_logistics_v1_despatch_proto protoreflect.FileDescriptor

var file_logistics_v1_despatch_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x44, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x44, 0x12, 0x49, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x52, 0x0f, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfb, 0x04, 0x0a, 0x0f, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x70, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x70, 0x68, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x94, 0x06, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x70, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x70, 0x68, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x64, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x66, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x52, 0x0d, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x04, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12,
	0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x70, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x70, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x61,
	0x63, 0x6b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xf3, 0x04, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x70, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x70, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xfc, 0x05, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x2a, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75,
	0x62, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logistics_v1_despatch_proto_rawDescOnce sync.Once
	file_logistics_v1_despatch_proto_rawDescData = file_logistics_v1_despatch_proto_rawDesc
)

func file_logistics_v1_despatch_proto_rawDescGZIP() []byte {
	file_logistics_v1_despatch_proto_rawDescOnce.Do(func() {
		file_logistics_v1_despatch_proto_rawDescData = protoimpl.X.CompressGZIP(file_logistics_v1_despatch_proto_rawDescData)
	})
	return file_logistics_v1_despatch_proto_rawDescData
}

var file_logistics_v1_despatch_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_logistics_v1_despatch_proto_goTypes = []any{
	(*DespatchHeader)(nil),                // 0: logistics.v1.DespatchHeader
	(*DespatchHeaderD)(nil),               // 1: logistics.v1.DespatchHeaderD
	(*DespatchHeaderT)(nil),               // 2: logistics.v1.DespatchHeaderT
	(*CreateDespatchHeaderRequest)(nil),   // 3: logistics.v1.CreateDespatchHeaderRequest
	(*CreateDespatchHeaderResponse)(nil),  // 4: logistics.v1.CreateDespatchHeaderResponse
	(*GetDespatchHeaderRequest)(nil),      // 5: logistics.v1.GetDespatchHeaderRequest
	(*GetDespatchHeaderResponse)(nil),     // 6: logistics.v1.GetDespatchHeaderResponse
	(*GetDespatchHeaderByPkRequest)(nil),  // 7: logistics.v1.GetDespatchHeaderByPkRequest
	(*GetDespatchHeaderByPkResponse)(nil), // 8: logistics.v1.GetDespatchHeaderByPkResponse
	(*GetDespatchHeadersRequest)(nil),     // 9: logistics.v1.GetDespatchHeadersRequest
	(*GetDespatchHeadersResponse)(nil),    // 10: logistics.v1.GetDespatchHeadersResponse
	(*DespatchLine)(nil),                  // 11: logistics.v1.DespatchLine
	(*DespatchLineD)(nil),                 // 12: logistics.v1.DespatchLineD
	(*CreateDespatchLineRequest)(nil),     // 13: logistics.v1.CreateDespatchLineRequest
	(*CreateDespatchLineResponse)(nil),    // 14: logistics.v1.CreateDespatchLineResponse
	(*GetDespatchLinesRequest)(nil),       // 15: logistics.v1.GetDespatchLinesRequest
	(*GetDespatchLinesResponse)(nil),      // 16: logistics.v1.GetDespatchLinesResponse
	(*UpdateDespatchHeaderRequest)(nil),   // 17: logistics.v1.UpdateDespatchHeaderRequest
	(*UpdateDespatchHeaderResponse)(nil),  // 18: logistics.v1.UpdateDespatchHeaderResponse
	(*v1.CrUpdUser)(nil),                  // 19: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                  // 20: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),         // 21: google.protobuf.Timestamp
	(*v1.GetRequest)(nil),                 // 22: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),             // 23: common.v1.GetByIdRequest
}
var file_logistics_v1_despatch_proto_depIdxs = []int32{
	1,  // 0: logistics.v1.DespatchHeader.despatch_header_d:type_name -> logistics.v1.DespatchHeaderD
	2,  // 1: logistics.v1.DespatchHeader.despatch_header_t:type_name -> logistics.v1.DespatchHeaderT
	19, // 2: logistics.v1.DespatchHeader.cr_upd_user:type_name -> common.v1.CrUpdUser
	20, // 3: logistics.v1.DespatchHeader.cr_upd_time:type_name -> common.v1.CrUpdTime
	21, // 4: logistics.v1.DespatchHeaderT.issue_date:type_name -> google.protobuf.Timestamp
	13, // 5: logistics.v1.CreateDespatchHeaderRequest.despatch_lines:type_name -> logistics.v1.CreateDespatchLineRequest
	0,  // 6: logistics.v1.CreateDespatchHeaderResponse.despatch_header:type_name -> logistics.v1.DespatchHeader
	22, // 7: logistics.v1.GetDespatchHeaderRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 8: logistics.v1.GetDespatchHeaderResponse.despatch_header:type_name -> logistics.v1.DespatchHeader
	23, // 9: logistics.v1.GetDespatchHeaderByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 10: logistics.v1.GetDespatchHeaderByPkResponse.despatch_header:type_name -> logistics.v1.DespatchHeader
	0,  // 11: logistics.v1.GetDespatchHeadersResponse.despatch_headers:type_name -> logistics.v1.DespatchHeader
	12, // 12: logistics.v1.DespatchLine.despatch_line_d:type_name -> logistics.v1.DespatchLineD
	19, // 13: logistics.v1.DespatchLine.cr_upd_user:type_name -> common.v1.CrUpdUser
	20, // 14: logistics.v1.DespatchLine.cr_upd_time:type_name -> common.v1.CrUpdTime
	11, // 15: logistics.v1.CreateDespatchLineResponse.despatch_line:type_name -> logistics.v1.DespatchLine
	22, // 16: logistics.v1.GetDespatchLinesRequest.get_request:type_name -> common.v1.GetRequest
	11, // 17: logistics.v1.GetDespatchLinesResponse.despatch_lines:type_name -> logistics.v1.DespatchLine
	3,  // 18: logistics.v1.DespatchService.CreateDespatchHeader:input_type -> logistics.v1.CreateDespatchHeaderRequest
	9,  // 19: logistics.v1.DespatchService.GetDespatchHeaders:input_type -> logistics.v1.GetDespatchHeadersRequest
	5,  // 20: logistics.v1.DespatchService.GetDespatchHeader:input_type -> logistics.v1.GetDespatchHeaderRequest
	7,  // 21: logistics.v1.DespatchService.GetDespatchHeaderByPk:input_type -> logistics.v1.GetDespatchHeaderByPkRequest
	13, // 22: logistics.v1.DespatchService.CreateDespatchLine:input_type -> logistics.v1.CreateDespatchLineRequest
	15, // 23: logistics.v1.DespatchService.GetDespatchLines:input_type -> logistics.v1.GetDespatchLinesRequest
	17, // 24: logistics.v1.DespatchService.UpdateDespatchHeader:input_type -> logistics.v1.UpdateDespatchHeaderRequest
	4,  // 25: logistics.v1.DespatchService.CreateDespatchHeader:output_type -> logistics.v1.CreateDespatchHeaderResponse
	10, // 26: logistics.v1.DespatchService.GetDespatchHeaders:output_type -> logistics.v1.GetDespatchHeadersResponse
	6,  // 27: logistics.v1.DespatchService.GetDespatchHeader:output_type -> logistics.v1.GetDespatchHeaderResponse
	8,  // 28: logistics.v1.DespatchService.GetDespatchHeaderByPk:output_type -> logistics.v1.GetDespatchHeaderByPkResponse
	14, // 29: logistics.v1.DespatchService.CreateDespatchLine:output_type -> logistics.v1.CreateDespatchLineResponse
	16, // 30: logistics.v1.DespatchService.GetDespatchLines:output_type -> logistics.v1.GetDespatchLinesResponse
	18, // 31: logistics.v1.DespatchService.UpdateDespatchHeader:output_type -> logistics.v1.UpdateDespatchHeaderResponse
	25, // [25:32] is the sub-list for method output_type
	18, // [18:25] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_logistics_v1_despatch_proto_init() }
func file_logistics_v1_despatch_proto_init() {
	if File_logistics_v1_despatch_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logistics_v1_despatch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logistics_v1_despatch_proto_goTypes,
		DependencyIndexes: file_logistics_v1_despatch_proto_depIdxs,
		MessageInfos:      file_logistics_v1_despatch_proto_msgTypes,
	}.Build()
	File_logistics_v1_despatch_proto = out.File
	file_logistics_v1_despatch_proto_rawDesc = nil
	file_logistics_v1_despatch_proto_goTypes = nil
	file_logistics_v1_despatch_proto_depIdxs = nil
}
