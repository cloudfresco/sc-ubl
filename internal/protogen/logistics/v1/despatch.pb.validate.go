// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logistics/v1/despatch.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DespatchHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DespatchHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchHeader with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DespatchHeaderMultiError,
// or nil if none found.
func (m *DespatchHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchHeaderD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchHeaderValidationError{
					field:  "DespatchHeaderD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchHeaderValidationError{
					field:  "DespatchHeaderD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchHeaderD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchHeaderValidationError{
				field:  "DespatchHeaderD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDespatchHeaderT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchHeaderValidationError{
					field:  "DespatchHeaderT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchHeaderValidationError{
					field:  "DespatchHeaderT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchHeaderT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchHeaderValidationError{
				field:  "DespatchHeaderT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchHeaderValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchHeaderValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchHeaderValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchHeaderValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchHeaderValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchHeaderValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchHeaderMultiError(errors)
	}

	return nil
}

// DespatchHeaderMultiError is an error wrapping multiple validation errors
// returned by DespatchHeader.ValidateAll() if the designated constraints
// aren't met.
type DespatchHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchHeaderMultiError) AllErrors() []error { return m }

// DespatchHeaderValidationError is the validation error returned by
// DespatchHeader.Validate if the designated constraints aren't met.
type DespatchHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchHeaderValidationError) ErrorName() string { return "DespatchHeaderValidationError" }

// Error satisfies the builtin error interface
func (e DespatchHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchHeaderValidationError{}

// Validate checks the field values on DespatchHeaderD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DespatchHeaderD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchHeaderD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchHeaderDMultiError, or nil if none found.
func (m *DespatchHeaderD) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchHeaderD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for DesphId

	// no validation rules for DocumentStatusCode

	// no validation rules for DespatchAdviceTypeCode

	// no validation rules for Note

	// no validation rules for LineCountNumeric

	// no validation rules for OrderId

	// no validation rules for DespatchSupplierPartyId

	// no validation rules for DeliveryCustomerPartyId

	// no validation rules for BuyerCustomerPartyId

	// no validation rules for SellerSupplierPartyId

	// no validation rules for OriginatorCustomerPartyId

	// no validation rules for ShipmentId

	if len(errors) > 0 {
		return DespatchHeaderDMultiError(errors)
	}

	return nil
}

// DespatchHeaderDMultiError is an error wrapping multiple validation errors
// returned by DespatchHeaderD.ValidateAll() if the designated constraints
// aren't met.
type DespatchHeaderDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchHeaderDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchHeaderDMultiError) AllErrors() []error { return m }

// DespatchHeaderDValidationError is the validation error returned by
// DespatchHeaderD.Validate if the designated constraints aren't met.
type DespatchHeaderDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchHeaderDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchHeaderDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchHeaderDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchHeaderDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchHeaderDValidationError) ErrorName() string { return "DespatchHeaderDValidationError" }

// Error satisfies the builtin error interface
func (e DespatchHeaderDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchHeaderD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchHeaderDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchHeaderDValidationError{}

// Validate checks the field values on DespatchHeaderT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DespatchHeaderT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchHeaderT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DespatchHeaderTMultiError, or nil if none found.
func (m *DespatchHeaderT) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchHeaderT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchHeaderTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchHeaderTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchHeaderTValidationError{
				field:  "IssueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchHeaderTMultiError(errors)
	}

	return nil
}

// DespatchHeaderTMultiError is an error wrapping multiple validation errors
// returned by DespatchHeaderT.ValidateAll() if the designated constraints
// aren't met.
type DespatchHeaderTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchHeaderTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchHeaderTMultiError) AllErrors() []error { return m }

// DespatchHeaderTValidationError is the validation error returned by
// DespatchHeaderT.Validate if the designated constraints aren't met.
type DespatchHeaderTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchHeaderTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchHeaderTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchHeaderTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchHeaderTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchHeaderTValidationError) ErrorName() string { return "DespatchHeaderTValidationError" }

// Error satisfies the builtin error interface
func (e DespatchHeaderTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchHeaderT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchHeaderTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchHeaderTValidationError{}

// Validate checks the field values on CreateDespatchHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDespatchHeaderRequestMultiError, or nil if none found.
func (m *CreateDespatchHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DesphId

	// no validation rules for IssueDate

	// no validation rules for DocumentStatusCode

	// no validation rules for DespatchAdviceTypeCode

	// no validation rules for Note

	// no validation rules for LineCountNumeric

	// no validation rules for OrderId

	// no validation rules for DespatchSupplierPartyId

	// no validation rules for DeliveryCustomerPartyId

	// no validation rules for BuyerCustomerPartyId

	// no validation rules for SellerSupplierPartyId

	// no validation rules for OriginatorCustomerPartyId

	// no validation rules for ShipmentId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetDespatchLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDespatchHeaderRequestValidationError{
						field:  fmt.Sprintf("DespatchLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDespatchHeaderRequestValidationError{
						field:  fmt.Sprintf("DespatchLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDespatchHeaderRequestValidationError{
					field:  fmt.Sprintf("DespatchLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDespatchHeaderRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchHeaderRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDespatchHeaderRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateDespatchHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchHeaderRequestMultiError) AllErrors() []error { return m }

// CreateDespatchHeaderRequestValidationError is the validation error returned
// by CreateDespatchHeaderRequest.Validate if the designated constraints
// aren't met.
type CreateDespatchHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchHeaderRequestValidationError) ErrorName() string {
	return "CreateDespatchHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchHeaderRequestValidationError{}

// Validate checks the field values on CreateDespatchHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDespatchHeaderResponseMultiError, or nil if none found.
func (m *CreateDespatchHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchHeaderResponseValidationError{
					field:  "DespatchHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchHeaderResponseValidationError{
					field:  "DespatchHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchHeaderResponseValidationError{
				field:  "DespatchHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchHeaderResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchHeaderResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDespatchHeaderResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateDespatchHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchHeaderResponseMultiError) AllErrors() []error { return m }

// CreateDespatchHeaderResponseValidationError is the validation error returned
// by CreateDespatchHeaderResponse.Validate if the designated constraints
// aren't met.
type CreateDespatchHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchHeaderResponseValidationError) ErrorName() string {
	return "CreateDespatchHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchHeaderResponseValidationError{}

// Validate checks the field values on GetDespatchHeaderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchHeaderRequestMultiError, or nil if none found.
func (m *GetDespatchHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchHeaderRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchHeaderRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchHeaderRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchHeaderRequestMultiError(errors)
	}

	return nil
}

// GetDespatchHeaderRequestMultiError is an error wrapping multiple validation
// errors returned by GetDespatchHeaderRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDespatchHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchHeaderRequestMultiError) AllErrors() []error { return m }

// GetDespatchHeaderRequestValidationError is the validation error returned by
// GetDespatchHeaderRequest.Validate if the designated constraints aren't met.
type GetDespatchHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchHeaderRequestValidationError) ErrorName() string {
	return "GetDespatchHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchHeaderRequestValidationError{}

// Validate checks the field values on GetDespatchHeaderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchHeaderResponseMultiError, or nil if none found.
func (m *GetDespatchHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchHeaderResponseValidationError{
					field:  "DespatchHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchHeaderResponseValidationError{
					field:  "DespatchHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchHeaderResponseValidationError{
				field:  "DespatchHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchHeaderResponseMultiError(errors)
	}

	return nil
}

// GetDespatchHeaderResponseMultiError is an error wrapping multiple validation
// errors returned by GetDespatchHeaderResponse.ValidateAll() if the
// designated constraints aren't met.
type GetDespatchHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchHeaderResponseMultiError) AllErrors() []error { return m }

// GetDespatchHeaderResponseValidationError is the validation error returned by
// GetDespatchHeaderResponse.Validate if the designated constraints aren't met.
type GetDespatchHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchHeaderResponseValidationError) ErrorName() string {
	return "GetDespatchHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchHeaderResponseValidationError{}

// Validate checks the field values on GetDespatchHeaderByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchHeaderByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchHeaderByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchHeaderByPkRequestMultiError, or nil if none found.
func (m *GetDespatchHeaderByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchHeaderByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchHeaderByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchHeaderByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchHeaderByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchHeaderByPkRequestMultiError(errors)
	}

	return nil
}

// GetDespatchHeaderByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetDespatchHeaderByPkRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDespatchHeaderByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchHeaderByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchHeaderByPkRequestMultiError) AllErrors() []error { return m }

// GetDespatchHeaderByPkRequestValidationError is the validation error returned
// by GetDespatchHeaderByPkRequest.Validate if the designated constraints
// aren't met.
type GetDespatchHeaderByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchHeaderByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchHeaderByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchHeaderByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchHeaderByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchHeaderByPkRequestValidationError) ErrorName() string {
	return "GetDespatchHeaderByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchHeaderByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchHeaderByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchHeaderByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchHeaderByPkRequestValidationError{}

// Validate checks the field values on GetDespatchHeaderByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchHeaderByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchHeaderByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDespatchHeaderByPkResponseMultiError, or nil if none found.
func (m *GetDespatchHeaderByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchHeaderByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchHeaderByPkResponseValidationError{
					field:  "DespatchHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchHeaderByPkResponseValidationError{
					field:  "DespatchHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchHeaderByPkResponseValidationError{
				field:  "DespatchHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchHeaderByPkResponseMultiError(errors)
	}

	return nil
}

// GetDespatchHeaderByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetDespatchHeaderByPkResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDespatchHeaderByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchHeaderByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchHeaderByPkResponseMultiError) AllErrors() []error { return m }

// GetDespatchHeaderByPkResponseValidationError is the validation error
// returned by GetDespatchHeaderByPkResponse.Validate if the designated
// constraints aren't met.
type GetDespatchHeaderByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchHeaderByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchHeaderByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchHeaderByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchHeaderByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchHeaderByPkResponseValidationError) ErrorName() string {
	return "GetDespatchHeaderByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchHeaderByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchHeaderByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchHeaderByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchHeaderByPkResponseValidationError{}

// Validate checks the field values on GetDespatchHeadersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchHeadersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchHeadersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchHeadersRequestMultiError, or nil if none found.
func (m *GetDespatchHeadersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchHeadersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetDespatchHeadersRequestMultiError(errors)
	}

	return nil
}

// GetDespatchHeadersRequestMultiError is an error wrapping multiple validation
// errors returned by GetDespatchHeadersRequest.ValidateAll() if the
// designated constraints aren't met.
type GetDespatchHeadersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchHeadersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchHeadersRequestMultiError) AllErrors() []error { return m }

// GetDespatchHeadersRequestValidationError is the validation error returned by
// GetDespatchHeadersRequest.Validate if the designated constraints aren't met.
type GetDespatchHeadersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchHeadersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchHeadersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchHeadersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchHeadersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchHeadersRequestValidationError) ErrorName() string {
	return "GetDespatchHeadersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchHeadersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchHeadersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchHeadersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchHeadersRequestValidationError{}

// Validate checks the field values on GetDespatchHeadersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchHeadersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchHeadersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchHeadersResponseMultiError, or nil if none found.
func (m *GetDespatchHeadersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchHeadersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDespatchHeaders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDespatchHeadersResponseValidationError{
						field:  fmt.Sprintf("DespatchHeaders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDespatchHeadersResponseValidationError{
						field:  fmt.Sprintf("DespatchHeaders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDespatchHeadersResponseValidationError{
					field:  fmt.Sprintf("DespatchHeaders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetDespatchHeadersResponseMultiError(errors)
	}

	return nil
}

// GetDespatchHeadersResponseMultiError is an error wrapping multiple
// validation errors returned by GetDespatchHeadersResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDespatchHeadersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchHeadersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchHeadersResponseMultiError) AllErrors() []error { return m }

// GetDespatchHeadersResponseValidationError is the validation error returned
// by GetDespatchHeadersResponse.Validate if the designated constraints aren't met.
type GetDespatchHeadersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchHeadersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchHeadersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchHeadersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchHeadersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchHeadersResponseValidationError) ErrorName() string {
	return "GetDespatchHeadersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchHeadersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchHeadersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchHeadersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchHeadersResponseValidationError{}

// Validate checks the field values on DespatchLine with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DespatchLine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchLine with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DespatchLineMultiError, or
// nil if none found.
func (m *DespatchLine) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchLine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchLineD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchLineValidationError{
					field:  "DespatchLineD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchLineValidationError{
					field:  "DespatchLineD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchLineD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchLineValidationError{
				field:  "DespatchLineD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchLineValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchLineValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchLineValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DespatchLineValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DespatchLineValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DespatchLineValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DespatchLineMultiError(errors)
	}

	return nil
}

// DespatchLineMultiError is an error wrapping multiple validation errors
// returned by DespatchLine.ValidateAll() if the designated constraints aren't met.
type DespatchLineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchLineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchLineMultiError) AllErrors() []error { return m }

// DespatchLineValidationError is the validation error returned by
// DespatchLine.Validate if the designated constraints aren't met.
type DespatchLineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchLineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchLineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchLineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchLineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchLineValidationError) ErrorName() string { return "DespatchLineValidationError" }

// Error satisfies the builtin error interface
func (e DespatchLineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchLine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchLineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchLineValidationError{}

// Validate checks the field values on DespatchLineD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DespatchLineD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DespatchLineD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DespatchLineDMultiError, or
// nil if none found.
func (m *DespatchLineD) ValidateAll() error {
	return m.validate(true)
}

func (m *DespatchLineD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for DesplId

	// no validation rules for Note

	// no validation rules for LineStatusCode

	// no validation rules for DeliveredQuantity

	// no validation rules for BackorderQuantity

	// no validation rules for BackorderReason

	// no validation rules for OutstandingQuantity

	// no validation rules for OutstandingReason

	// no validation rules for OversupplyQuantity

	// no validation rules for OrderLineId

	// no validation rules for ItemId

	// no validation rules for ShipmentId

	// no validation rules for DespatchHeaderId

	if len(errors) > 0 {
		return DespatchLineDMultiError(errors)
	}

	return nil
}

// DespatchLineDMultiError is an error wrapping multiple validation errors
// returned by DespatchLineD.ValidateAll() if the designated constraints
// aren't met.
type DespatchLineDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DespatchLineDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DespatchLineDMultiError) AllErrors() []error { return m }

// DespatchLineDValidationError is the validation error returned by
// DespatchLineD.Validate if the designated constraints aren't met.
type DespatchLineDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DespatchLineDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DespatchLineDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DespatchLineDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DespatchLineDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DespatchLineDValidationError) ErrorName() string { return "DespatchLineDValidationError" }

// Error satisfies the builtin error interface
func (e DespatchLineDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDespatchLineD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DespatchLineDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DespatchLineDValidationError{}

// Validate checks the field values on CreateDespatchLineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchLineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchLineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDespatchLineRequestMultiError, or nil if none found.
func (m *CreateDespatchLineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchLineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DesplId

	// no validation rules for Note

	// no validation rules for LineStatusCode

	// no validation rules for DeliveredQuantity

	// no validation rules for BackorderQuantity

	// no validation rules for BackorderReason

	// no validation rules for OutstandingQuantity

	// no validation rules for OutstandingReason

	// no validation rules for OversupplyQuantity

	// no validation rules for OrderLineId

	// no validation rules for ItemId

	// no validation rules for ShipmentId

	// no validation rules for DespatchHeaderId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDespatchLineRequestMultiError(errors)
	}

	return nil
}

// CreateDespatchLineRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDespatchLineRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateDespatchLineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchLineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchLineRequestMultiError) AllErrors() []error { return m }

// CreateDespatchLineRequestValidationError is the validation error returned by
// CreateDespatchLineRequest.Validate if the designated constraints aren't met.
type CreateDespatchLineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchLineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchLineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchLineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchLineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchLineRequestValidationError) ErrorName() string {
	return "CreateDespatchLineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchLineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchLineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchLineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchLineRequestValidationError{}

// Validate checks the field values on CreateDespatchLineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDespatchLineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDespatchLineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDespatchLineResponseMultiError, or nil if none found.
func (m *CreateDespatchLineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDespatchLineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDespatchLine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDespatchLineResponseValidationError{
					field:  "DespatchLine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDespatchLineResponseValidationError{
					field:  "DespatchLine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDespatchLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDespatchLineResponseValidationError{
				field:  "DespatchLine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDespatchLineResponseMultiError(errors)
	}

	return nil
}

// CreateDespatchLineResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDespatchLineResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateDespatchLineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDespatchLineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDespatchLineResponseMultiError) AllErrors() []error { return m }

// CreateDespatchLineResponseValidationError is the validation error returned
// by CreateDespatchLineResponse.Validate if the designated constraints aren't met.
type CreateDespatchLineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDespatchLineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDespatchLineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDespatchLineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDespatchLineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDespatchLineResponseValidationError) ErrorName() string {
	return "CreateDespatchLineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDespatchLineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDespatchLineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDespatchLineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDespatchLineResponseValidationError{}

// Validate checks the field values on GetDespatchLinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchLinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchLinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchLinesRequestMultiError, or nil if none found.
func (m *GetDespatchLinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchLinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDespatchLinesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDespatchLinesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDespatchLinesRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDespatchLinesRequestMultiError(errors)
	}

	return nil
}

// GetDespatchLinesRequestMultiError is an error wrapping multiple validation
// errors returned by GetDespatchLinesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDespatchLinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchLinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchLinesRequestMultiError) AllErrors() []error { return m }

// GetDespatchLinesRequestValidationError is the validation error returned by
// GetDespatchLinesRequest.Validate if the designated constraints aren't met.
type GetDespatchLinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchLinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchLinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchLinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchLinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchLinesRequestValidationError) ErrorName() string {
	return "GetDespatchLinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchLinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchLinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchLinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchLinesRequestValidationError{}

// Validate checks the field values on GetDespatchLinesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDespatchLinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDespatchLinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDespatchLinesResponseMultiError, or nil if none found.
func (m *GetDespatchLinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDespatchLinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDespatchLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDespatchLinesResponseValidationError{
						field:  fmt.Sprintf("DespatchLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDespatchLinesResponseValidationError{
						field:  fmt.Sprintf("DespatchLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDespatchLinesResponseValidationError{
					field:  fmt.Sprintf("DespatchLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDespatchLinesResponseMultiError(errors)
	}

	return nil
}

// GetDespatchLinesResponseMultiError is an error wrapping multiple validation
// errors returned by GetDespatchLinesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDespatchLinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDespatchLinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDespatchLinesResponseMultiError) AllErrors() []error { return m }

// GetDespatchLinesResponseValidationError is the validation error returned by
// GetDespatchLinesResponse.Validate if the designated constraints aren't met.
type GetDespatchLinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDespatchLinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDespatchLinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDespatchLinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDespatchLinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDespatchLinesResponseValidationError) ErrorName() string {
	return "GetDespatchLinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDespatchLinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDespatchLinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDespatchLinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDespatchLinesResponseValidationError{}

// Validate checks the field values on UpdateDespatchHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDespatchHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDespatchHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDespatchHeaderRequestMultiError, or nil if none found.
func (m *UpdateDespatchHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDespatchHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentStatusCode

	// no validation rules for DespatchAdviceTypeCode

	// no validation rules for Note

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateDespatchHeaderRequestMultiError(errors)
	}

	return nil
}

// UpdateDespatchHeaderRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDespatchHeaderRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateDespatchHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDespatchHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDespatchHeaderRequestMultiError) AllErrors() []error { return m }

// UpdateDespatchHeaderRequestValidationError is the validation error returned
// by UpdateDespatchHeaderRequest.Validate if the designated constraints
// aren't met.
type UpdateDespatchHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDespatchHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDespatchHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDespatchHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDespatchHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDespatchHeaderRequestValidationError) ErrorName() string {
	return "UpdateDespatchHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDespatchHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDespatchHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDespatchHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDespatchHeaderRequestValidationError{}

// Validate checks the field values on UpdateDespatchHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDespatchHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDespatchHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDespatchHeaderResponseMultiError, or nil if none found.
func (m *UpdateDespatchHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDespatchHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDespatchHeaderResponseMultiError(errors)
	}

	return nil
}

// UpdateDespatchHeaderResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDespatchHeaderResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateDespatchHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDespatchHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDespatchHeaderResponseMultiError) AllErrors() []error { return m }

// UpdateDespatchHeaderResponseValidationError is the validation error returned
// by UpdateDespatchHeaderResponse.Validate if the designated constraints
// aren't met.
type UpdateDespatchHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDespatchHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDespatchHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDespatchHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDespatchHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDespatchHeaderResponseValidationError) ErrorName() string {
	return "UpdateDespatchHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDespatchHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDespatchHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDespatchHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDespatchHeaderResponseValidationError{}
