// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: logistics/v1/despatch.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DespatchService_CreateDespatchHeader_FullMethodName  = "/logistics.v1.DespatchService/CreateDespatchHeader"
	DespatchService_GetDespatchHeaders_FullMethodName    = "/logistics.v1.DespatchService/GetDespatchHeaders"
	DespatchService_GetDespatchHeader_FullMethodName     = "/logistics.v1.DespatchService/GetDespatchHeader"
	DespatchService_GetDespatchHeaderByPk_FullMethodName = "/logistics.v1.DespatchService/GetDespatchHeaderByPk"
	DespatchService_CreateDespatchLine_FullMethodName    = "/logistics.v1.DespatchService/CreateDespatchLine"
	DespatchService_GetDespatchLines_FullMethodName      = "/logistics.v1.DespatchService/GetDespatchLines"
	DespatchService_UpdateDespatchHeader_FullMethodName  = "/logistics.v1.DespatchService/UpdateDespatchHeader"
)

// DespatchServiceClient is the client API for DespatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The DespatchService service definition.
type DespatchServiceClient interface {
	CreateDespatchHeader(ctx context.Context, in *CreateDespatchHeaderRequest, opts ...grpc.CallOption) (*CreateDespatchHeaderResponse, error)
	GetDespatchHeaders(ctx context.Context, in *GetDespatchHeadersRequest, opts ...grpc.CallOption) (*GetDespatchHeadersResponse, error)
	GetDespatchHeader(ctx context.Context, in *GetDespatchHeaderRequest, opts ...grpc.CallOption) (*GetDespatchHeaderResponse, error)
	GetDespatchHeaderByPk(ctx context.Context, in *GetDespatchHeaderByPkRequest, opts ...grpc.CallOption) (*GetDespatchHeaderByPkResponse, error)
	CreateDespatchLine(ctx context.Context, in *CreateDespatchLineRequest, opts ...grpc.CallOption) (*CreateDespatchLineResponse, error)
	GetDespatchLines(ctx context.Context, in *GetDespatchLinesRequest, opts ...grpc.CallOption) (*GetDespatchLinesResponse, error)
	UpdateDespatchHeader(ctx context.Context, in *UpdateDespatchHeaderRequest, opts ...grpc.CallOption) (*UpdateDespatchHeaderResponse, error)
}

type despatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDespatchServiceClient(cc grpc.ClientConnInterface) DespatchServiceClient {
	return &despatchServiceClient{cc}
}

func (c *despatchServiceClient) CreateDespatchHeader(ctx context.Context, in *CreateDespatchHeaderRequest, opts ...grpc.CallOption) (*CreateDespatchHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDespatchHeaderResponse)
	err := c.cc.Invoke(ctx, DespatchService_CreateDespatchHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *despatchServiceClient) GetDespatchHeaders(ctx context.Context, in *GetDespatchHeadersRequest, opts ...grpc.CallOption) (*GetDespatchHeadersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDespatchHeadersResponse)
	err := c.cc.Invoke(ctx, DespatchService_GetDespatchHeaders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *despatchServiceClient) GetDespatchHeader(ctx context.Context, in *GetDespatchHeaderRequest, opts ...grpc.CallOption) (*GetDespatchHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDespatchHeaderResponse)
	err := c.cc.Invoke(ctx, DespatchService_GetDespatchHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *despatchServiceClient) GetDespatchHeaderByPk(ctx context.Context, in *GetDespatchHeaderByPkRequest, opts ...grpc.CallOption) (*GetDespatchHeaderByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDespatchHeaderByPkResponse)
	err := c.cc.Invoke(ctx, DespatchService_GetDespatchHeaderByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *despatchServiceClient) CreateDespatchLine(ctx context.Context, in *CreateDespatchLineRequest, opts ...grpc.CallOption) (*CreateDespatchLineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDespatchLineResponse)
	err := c.cc.Invoke(ctx, DespatchService_CreateDespatchLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *despatchServiceClient) GetDespatchLines(ctx context.Context, in *GetDespatchLinesRequest, opts ...grpc.CallOption) (*GetDespatchLinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDespatchLinesResponse)
	err := c.cc.Invoke(ctx, DespatchService_GetDespatchLines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *despatchServiceClient) UpdateDespatchHeader(ctx context.Context, in *UpdateDespatchHeaderRequest, opts ...grpc.CallOption) (*UpdateDespatchHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDespatchHeaderResponse)
	err := c.cc.Invoke(ctx, DespatchService_UpdateDespatchHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DespatchServiceServer is the server API for DespatchService service.
// All implementations must embed UnimplementedDespatchServiceServer
// for forward compatibility.
//
// The DespatchService service definition.
type DespatchServiceServer interface {
	CreateDespatchHeader(context.Context, *CreateDespatchHeaderRequest) (*CreateDespatchHeaderResponse, error)
	GetDespatchHeaders(context.Context, *GetDespatchHeadersRequest) (*GetDespatchHeadersResponse, error)
	GetDespatchHeader(context.Context, *GetDespatchHeaderRequest) (*GetDespatchHeaderResponse, error)
	GetDespatchHeaderByPk(context.Context, *GetDespatchHeaderByPkRequest) (*GetDespatchHeaderByPkResponse, error)
	CreateDespatchLine(context.Context, *CreateDespatchLineRequest) (*CreateDespatchLineResponse, error)
	GetDespatchLines(context.Context, *GetDespatchLinesRequest) (*GetDespatchLinesResponse, error)
	UpdateDespatchHeader(context.Context, *UpdateDespatchHeaderRequest) (*UpdateDespatchHeaderResponse, error)
	mustEmbedUnimplementedDespatchServiceServer()
}

// UnimplementedDespatchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDespatchServiceServer struct{}

func (UnimplementedDespatchServiceServer) CreateDespatchHeader(context.Context, *CreateDespatchHeaderRequest) (*CreateDespatchHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDespatchHeader not implemented")
}
func (UnimplementedDespatchServiceServer) GetDespatchHeaders(context.Context, *GetDespatchHeadersRequest) (*GetDespatchHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDespatchHeaders not implemented")
}
func (UnimplementedDespatchServiceServer) GetDespatchHeader(context.Context, *GetDespatchHeaderRequest) (*GetDespatchHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDespatchHeader not implemented")
}
func (UnimplementedDespatchServiceServer) GetDespatchHeaderByPk(context.Context, *GetDespatchHeaderByPkRequest) (*GetDespatchHeaderByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDespatchHeaderByPk not implemented")
}
func (UnimplementedDespatchServiceServer) CreateDespatchLine(context.Context, *CreateDespatchLineRequest) (*CreateDespatchLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDespatchLine not implemented")
}
func (UnimplementedDespatchServiceServer) GetDespatchLines(context.Context, *GetDespatchLinesRequest) (*GetDespatchLinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDespatchLines not implemented")
}
func (UnimplementedDespatchServiceServer) UpdateDespatchHeader(context.Context, *UpdateDespatchHeaderRequest) (*UpdateDespatchHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDespatchHeader not implemented")
}
func (UnimplementedDespatchServiceServer) mustEmbedUnimplementedDespatchServiceServer() {}
func (UnimplementedDespatchServiceServer) testEmbeddedByValue()                         {}

// UnsafeDespatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DespatchServiceServer will
// result in compilation errors.
type UnsafeDespatchServiceServer interface {
	mustEmbedUnimplementedDespatchServiceServer()
}

func RegisterDespatchServiceServer(s grpc.ServiceRegistrar, srv DespatchServiceServer) {
	// If the following call pancis, it indicates UnimplementedDespatchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DespatchService_ServiceDesc, srv)
}

func _DespatchService_CreateDespatchHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDespatchHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DespatchServiceServer).CreateDespatchHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DespatchService_CreateDespatchHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DespatchServiceServer).CreateDespatchHeader(ctx, req.(*CreateDespatchHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DespatchService_GetDespatchHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDespatchHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DespatchServiceServer).GetDespatchHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DespatchService_GetDespatchHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DespatchServiceServer).GetDespatchHeaders(ctx, req.(*GetDespatchHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DespatchService_GetDespatchHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDespatchHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DespatchServiceServer).GetDespatchHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DespatchService_GetDespatchHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DespatchServiceServer).GetDespatchHeader(ctx, req.(*GetDespatchHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DespatchService_GetDespatchHeaderByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDespatchHeaderByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DespatchServiceServer).GetDespatchHeaderByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DespatchService_GetDespatchHeaderByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DespatchServiceServer).GetDespatchHeaderByPk(ctx, req.(*GetDespatchHeaderByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DespatchService_CreateDespatchLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDespatchLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DespatchServiceServer).CreateDespatchLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DespatchService_CreateDespatchLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DespatchServiceServer).CreateDespatchLine(ctx, req.(*CreateDespatchLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DespatchService_GetDespatchLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDespatchLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DespatchServiceServer).GetDespatchLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DespatchService_GetDespatchLines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DespatchServiceServer).GetDespatchLines(ctx, req.(*GetDespatchLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DespatchService_UpdateDespatchHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDespatchHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DespatchServiceServer).UpdateDespatchHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DespatchService_UpdateDespatchHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DespatchServiceServer).UpdateDespatchHeader(ctx, req.(*UpdateDespatchHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DespatchService_ServiceDesc is the grpc.ServiceDesc for DespatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DespatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.v1.DespatchService",
	HandlerType: (*DespatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDespatchHeader",
			Handler:    _DespatchService_CreateDespatchHeader_Handler,
		},
		{
			MethodName: "GetDespatchHeaders",
			Handler:    _DespatchService_GetDespatchHeaders_Handler,
		},
		{
			MethodName: "GetDespatchHeader",
			Handler:    _DespatchService_GetDespatchHeader_Handler,
		},
		{
			MethodName: "GetDespatchHeaderByPk",
			Handler:    _DespatchService_GetDespatchHeaderByPk_Handler,
		},
		{
			MethodName: "CreateDespatchLine",
			Handler:    _DespatchService_CreateDespatchLine_Handler,
		},
		{
			MethodName: "GetDespatchLines",
			Handler:    _DespatchService_GetDespatchLines_Handler,
		},
		{
			MethodName: "UpdateDespatchHeader",
			Handler:    _DespatchService_UpdateDespatchHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistics/v1/despatch.proto",
}
