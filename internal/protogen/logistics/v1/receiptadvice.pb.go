// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: logistics/v1/receiptadvice.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReceiptAdviceHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptAdviceHeaderD *ReceiptAdviceHeaderD `protobuf:"bytes,1,opt,name=receipt_advice_header_d,json=receiptAdviceHeaderD,proto3" json:"receipt_advice_header_d,omitempty"`
	ReceiptAdviceHeaderT *ReceiptAdviceHeaderT `protobuf:"bytes,2,opt,name=receipt_advice_header_t,json=receiptAdviceHeaderT,proto3" json:"receipt_advice_header_t,omitempty"`
	CrUpdUser            *v1.CrUpdUser         `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime            *v1.CrUpdTime         `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *ReceiptAdviceHeader) Reset() {
	*x = ReceiptAdviceHeader{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptAdviceHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAdviceHeader) ProtoMessage() {}

func (x *ReceiptAdviceHeader) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAdviceHeader.ProtoReflect.Descriptor instead.
func (*ReceiptAdviceHeader) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{0}
}

func (x *ReceiptAdviceHeader) GetReceiptAdviceHeaderD() *ReceiptAdviceHeaderD {
	if x != nil {
		return x.ReceiptAdviceHeaderD
	}
	return nil
}

func (x *ReceiptAdviceHeader) GetReceiptAdviceHeaderT() *ReceiptAdviceHeaderT {
	if x != nil {
		return x.ReceiptAdviceHeaderT
	}
	return nil
}

func (x *ReceiptAdviceHeader) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ReceiptAdviceHeader) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ReceiptAdviceHeaderD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                   []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                     string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	RcpthId                 string `protobuf:"bytes,4,opt,name=rcpth_id,json=rcpthId,proto3" json:"rcpth_id,omitempty"`
	ReceiptAdviceTypeCode   string `protobuf:"bytes,5,opt,name=receipt_advice_type_code,json=receiptAdviceTypeCode,proto3" json:"receipt_advice_type_code,omitempty"`
	Note                    string `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	LineCountNumeric        uint32 `protobuf:"varint,7,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	OrderId                 uint32 `protobuf:"varint,8,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	DespatchId              uint32 `protobuf:"varint,9,opt,name=despatch_id,json=despatchId,proto3" json:"despatch_id,omitempty"`
	DeliveryCustomerPartyId uint32 `protobuf:"varint,10,opt,name=delivery_customer_party_id,json=deliveryCustomerPartyId,proto3" json:"delivery_customer_party_id,omitempty"`
	DespatchSupplierPartyId uint32 `protobuf:"varint,11,opt,name=despatch_supplier_party_id,json=despatchSupplierPartyId,proto3" json:"despatch_supplier_party_id,omitempty"`
	BuyerCustomerPartyId    uint32 `protobuf:"varint,12,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId   uint32 `protobuf:"varint,13,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	ShipmentId              uint32 `protobuf:"varint,14,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
}

func (x *ReceiptAdviceHeaderD) Reset() {
	*x = ReceiptAdviceHeaderD{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptAdviceHeaderD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAdviceHeaderD) ProtoMessage() {}

func (x *ReceiptAdviceHeaderD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAdviceHeaderD.ProtoReflect.Descriptor instead.
func (*ReceiptAdviceHeaderD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{1}
}

func (x *ReceiptAdviceHeaderD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceiptAdviceHeaderD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ReceiptAdviceHeaderD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ReceiptAdviceHeaderD) GetRcpthId() string {
	if x != nil {
		return x.RcpthId
	}
	return ""
}

func (x *ReceiptAdviceHeaderD) GetReceiptAdviceTypeCode() string {
	if x != nil {
		return x.ReceiptAdviceTypeCode
	}
	return ""
}

func (x *ReceiptAdviceHeaderD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ReceiptAdviceHeaderD) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *ReceiptAdviceHeaderD) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ReceiptAdviceHeaderD) GetDespatchId() uint32 {
	if x != nil {
		return x.DespatchId
	}
	return 0
}

func (x *ReceiptAdviceHeaderD) GetDeliveryCustomerPartyId() uint32 {
	if x != nil {
		return x.DeliveryCustomerPartyId
	}
	return 0
}

func (x *ReceiptAdviceHeaderD) GetDespatchSupplierPartyId() uint32 {
	if x != nil {
		return x.DespatchSupplierPartyId
	}
	return 0
}

func (x *ReceiptAdviceHeaderD) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *ReceiptAdviceHeaderD) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *ReceiptAdviceHeaderD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

type ReceiptAdviceHeaderT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
}

func (x *ReceiptAdviceHeaderT) Reset() {
	*x = ReceiptAdviceHeaderT{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptAdviceHeaderT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAdviceHeaderT) ProtoMessage() {}

func (x *ReceiptAdviceHeaderT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAdviceHeaderT.ProtoReflect.Descriptor instead.
func (*ReceiptAdviceHeaderT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{2}
}

func (x *ReceiptAdviceHeaderT) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

type CreateReceiptAdviceHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RcpthId                 string                            `protobuf:"bytes,1,opt,name=rcpth_id,json=rcpthId,proto3" json:"rcpth_id,omitempty"`
	IssueDate               string                            `protobuf:"bytes,2,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ReceiptAdviceTypeCode   string                            `protobuf:"bytes,3,opt,name=receipt_advice_type_code,json=receiptAdviceTypeCode,proto3" json:"receipt_advice_type_code,omitempty"`
	Note                    string                            `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	LineCountNumeric        uint32                            `protobuf:"varint,5,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	OrderId                 uint32                            `protobuf:"varint,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	DespatchId              uint32                            `protobuf:"varint,7,opt,name=despatch_id,json=despatchId,proto3" json:"despatch_id,omitempty"`
	DeliveryCustomerPartyId uint32                            `protobuf:"varint,8,opt,name=delivery_customer_party_id,json=deliveryCustomerPartyId,proto3" json:"delivery_customer_party_id,omitempty"`
	DespatchSupplierPartyId uint32                            `protobuf:"varint,9,opt,name=despatch_supplier_party_id,json=despatchSupplierPartyId,proto3" json:"despatch_supplier_party_id,omitempty"`
	BuyerCustomerPartyId    uint32                            `protobuf:"varint,10,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId   uint32                            `protobuf:"varint,11,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	ShipmentId              uint32                            `protobuf:"varint,12,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	UserId                  string                            `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail               string                            `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId               string                            `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ReceiptAdviceLines      []*CreateReceiptAdviceLineRequest `protobuf:"bytes,16,rep,name=receipt_advice_lines,json=receiptAdviceLines,proto3" json:"receipt_advice_lines,omitempty"`
}

func (x *CreateReceiptAdviceHeaderRequest) Reset() {
	*x = CreateReceiptAdviceHeaderRequest{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReceiptAdviceHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceiptAdviceHeaderRequest) ProtoMessage() {}

func (x *CreateReceiptAdviceHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceiptAdviceHeaderRequest.ProtoReflect.Descriptor instead.
func (*CreateReceiptAdviceHeaderRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{3}
}

func (x *CreateReceiptAdviceHeaderRequest) GetRcpthId() string {
	if x != nil {
		return x.RcpthId
	}
	return ""
}

func (x *CreateReceiptAdviceHeaderRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *CreateReceiptAdviceHeaderRequest) GetReceiptAdviceTypeCode() string {
	if x != nil {
		return x.ReceiptAdviceTypeCode
	}
	return ""
}

func (x *CreateReceiptAdviceHeaderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateReceiptAdviceHeaderRequest) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *CreateReceiptAdviceHeaderRequest) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreateReceiptAdviceHeaderRequest) GetDespatchId() uint32 {
	if x != nil {
		return x.DespatchId
	}
	return 0
}

func (x *CreateReceiptAdviceHeaderRequest) GetDeliveryCustomerPartyId() uint32 {
	if x != nil {
		return x.DeliveryCustomerPartyId
	}
	return 0
}

func (x *CreateReceiptAdviceHeaderRequest) GetDespatchSupplierPartyId() uint32 {
	if x != nil {
		return x.DespatchSupplierPartyId
	}
	return 0
}

func (x *CreateReceiptAdviceHeaderRequest) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *CreateReceiptAdviceHeaderRequest) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *CreateReceiptAdviceHeaderRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateReceiptAdviceHeaderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateReceiptAdviceHeaderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateReceiptAdviceHeaderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateReceiptAdviceHeaderRequest) GetReceiptAdviceLines() []*CreateReceiptAdviceLineRequest {
	if x != nil {
		return x.ReceiptAdviceLines
	}
	return nil
}

type CreateReceiptAdviceHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptAdviceHeader *ReceiptAdviceHeader `protobuf:"bytes,1,opt,name=receipt_advice_header,json=receiptAdviceHeader,proto3" json:"receipt_advice_header,omitempty"`
}

func (x *CreateReceiptAdviceHeaderResponse) Reset() {
	*x = CreateReceiptAdviceHeaderResponse{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReceiptAdviceHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceiptAdviceHeaderResponse) ProtoMessage() {}

func (x *CreateReceiptAdviceHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceiptAdviceHeaderResponse.ProtoReflect.Descriptor instead.
func (*CreateReceiptAdviceHeaderResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{4}
}

func (x *CreateReceiptAdviceHeaderResponse) GetReceiptAdviceHeader() *ReceiptAdviceHeader {
	if x != nil {
		return x.ReceiptAdviceHeader
	}
	return nil
}

type GetReceiptAdviceHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetReceiptAdviceHeaderRequest) Reset() {
	*x = GetReceiptAdviceHeaderRequest{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptAdviceHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptAdviceHeaderRequest) ProtoMessage() {}

func (x *GetReceiptAdviceHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptAdviceHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetReceiptAdviceHeaderRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{5}
}

func (x *GetReceiptAdviceHeaderRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetReceiptAdviceHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptAdviceHeader *ReceiptAdviceHeader `protobuf:"bytes,1,opt,name=receipt_advice_header,json=receiptAdviceHeader,proto3" json:"receipt_advice_header,omitempty"`
}

func (x *GetReceiptAdviceHeaderResponse) Reset() {
	*x = GetReceiptAdviceHeaderResponse{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptAdviceHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptAdviceHeaderResponse) ProtoMessage() {}

func (x *GetReceiptAdviceHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptAdviceHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetReceiptAdviceHeaderResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{6}
}

func (x *GetReceiptAdviceHeaderResponse) GetReceiptAdviceHeader() *ReceiptAdviceHeader {
	if x != nil {
		return x.ReceiptAdviceHeader
	}
	return nil
}

type GetReceiptAdviceHeaderByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetReceiptAdviceHeaderByPkRequest) Reset() {
	*x = GetReceiptAdviceHeaderByPkRequest{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptAdviceHeaderByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptAdviceHeaderByPkRequest) ProtoMessage() {}

func (x *GetReceiptAdviceHeaderByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptAdviceHeaderByPkRequest.ProtoReflect.Descriptor instead.
func (*GetReceiptAdviceHeaderByPkRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{7}
}

func (x *GetReceiptAdviceHeaderByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetReceiptAdviceHeaderByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptAdviceHeader *ReceiptAdviceHeader `protobuf:"bytes,1,opt,name=receipt_advice_header,json=receiptAdviceHeader,proto3" json:"receipt_advice_header,omitempty"`
}

func (x *GetReceiptAdviceHeaderByPkResponse) Reset() {
	*x = GetReceiptAdviceHeaderByPkResponse{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptAdviceHeaderByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptAdviceHeaderByPkResponse) ProtoMessage() {}

func (x *GetReceiptAdviceHeaderByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptAdviceHeaderByPkResponse.ProtoReflect.Descriptor instead.
func (*GetReceiptAdviceHeaderByPkResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{8}
}

func (x *GetReceiptAdviceHeaderByPkResponse) GetReceiptAdviceHeader() *ReceiptAdviceHeader {
	if x != nil {
		return x.ReceiptAdviceHeader
	}
	return nil
}

type GetReceiptAdviceHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptAdviceHeaders []*ReceiptAdviceHeader `protobuf:"bytes,1,rep,name=receipt_advice_headers,json=receiptAdviceHeaders,proto3" json:"receipt_advice_headers,omitempty"`
	NextCursor           string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetReceiptAdviceHeadersResponse) Reset() {
	*x = GetReceiptAdviceHeadersResponse{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptAdviceHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptAdviceHeadersResponse) ProtoMessage() {}

func (x *GetReceiptAdviceHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptAdviceHeadersResponse.ProtoReflect.Descriptor instead.
func (*GetReceiptAdviceHeadersResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{9}
}

func (x *GetReceiptAdviceHeadersResponse) GetReceiptAdviceHeaders() []*ReceiptAdviceHeader {
	if x != nil {
		return x.ReceiptAdviceHeaders
	}
	return nil
}

func (x *GetReceiptAdviceHeadersResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetReceiptAdviceHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetReceiptAdviceHeadersRequest) Reset() {
	*x = GetReceiptAdviceHeadersRequest{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptAdviceHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptAdviceHeadersRequest) ProtoMessage() {}

func (x *GetReceiptAdviceHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptAdviceHeadersRequest.ProtoReflect.Descriptor instead.
func (*GetReceiptAdviceHeadersRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{10}
}

func (x *GetReceiptAdviceHeadersRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetReceiptAdviceHeadersRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetReceiptAdviceHeadersRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetReceiptAdviceHeadersRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ReceiptAdviceLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptAdviceLineD *ReceiptAdviceLineD `protobuf:"bytes,1,opt,name=receipt_advice_line_d,json=receiptAdviceLineD,proto3" json:"receipt_advice_line_d,omitempty"`
	ReceiptAdviceLineT *ReceiptAdviceLineT `protobuf:"bytes,2,opt,name=receipt_advice_line_t,json=receiptAdviceLineT,proto3" json:"receipt_advice_line_t,omitempty"`
	CrUpdUser          *v1.CrUpdUser       `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime          *v1.CrUpdTime       `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *ReceiptAdviceLine) Reset() {
	*x = ReceiptAdviceLine{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptAdviceLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAdviceLine) ProtoMessage() {}

func (x *ReceiptAdviceLine) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAdviceLine.ProtoReflect.Descriptor instead.
func (*ReceiptAdviceLine) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{11}
}

func (x *ReceiptAdviceLine) GetReceiptAdviceLineD() *ReceiptAdviceLineD {
	if x != nil {
		return x.ReceiptAdviceLineD
	}
	return nil
}

func (x *ReceiptAdviceLine) GetReceiptAdviceLineT() *ReceiptAdviceLineT {
	if x != nil {
		return x.ReceiptAdviceLineT
	}
	return nil
}

func (x *ReceiptAdviceLine) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ReceiptAdviceLine) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ReceiptAdviceLineD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                   []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                     string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	RcptlId                 string `protobuf:"bytes,4,opt,name=rcptl_id,json=rcptlId,proto3" json:"rcptl_id,omitempty"`
	Note                    string `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	ReceivedQuantity        uint32 `protobuf:"varint,6,opt,name=received_quantity,json=receivedQuantity,proto3" json:"received_quantity,omitempty"`
	ShortQuantity           uint32 `protobuf:"varint,7,opt,name=short_quantity,json=shortQuantity,proto3" json:"short_quantity,omitempty"`
	ShortageActionCode      string `protobuf:"bytes,8,opt,name=shortage_action_code,json=shortageActionCode,proto3" json:"shortage_action_code,omitempty"`
	RejectedQuantity        uint32 `protobuf:"varint,9,opt,name=rejected_quantity,json=rejectedQuantity,proto3" json:"rejected_quantity,omitempty"`
	RejectReasonCode        string `protobuf:"bytes,10,opt,name=reject_reason_code,json=rejectReasonCode,proto3" json:"reject_reason_code,omitempty"`
	RejectReason            string `protobuf:"bytes,11,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	RejectActionCode        string `protobuf:"bytes,12,opt,name=reject_action_code,json=rejectActionCode,proto3" json:"reject_action_code,omitempty"`
	QuantityDiscrepancyCode string `protobuf:"bytes,13,opt,name=quantity_discrepancy_code,json=quantityDiscrepancyCode,proto3" json:"quantity_discrepancy_code,omitempty"`
	OversupplyQuantity      uint32 `protobuf:"varint,14,opt,name=oversupply_quantity,json=oversupplyQuantity,proto3" json:"oversupply_quantity,omitempty"`
	TimingComplaintCode     string `protobuf:"bytes,15,opt,name=timing_complaint_code,json=timingComplaintCode,proto3" json:"timing_complaint_code,omitempty"`
	TimingComplaint         string `protobuf:"bytes,16,opt,name=timing_complaint,json=timingComplaint,proto3" json:"timing_complaint,omitempty"`
	OrderLineId             uint32 `protobuf:"varint,17,opt,name=order_line_id,json=orderLineId,proto3" json:"order_line_id,omitempty"`
	DespatchLineId          uint32 `protobuf:"varint,18,opt,name=despatch_line_id,json=despatchLineId,proto3" json:"despatch_line_id,omitempty"`
	ItemId                  uint32 `protobuf:"varint,19,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ShipmentId              uint32 `protobuf:"varint,20,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	ReceiptAdviceHeaderId   uint32 `protobuf:"varint,21,opt,name=receipt_advice_header_id,json=receiptAdviceHeaderId,proto3" json:"receipt_advice_header_id,omitempty"`
}

func (x *ReceiptAdviceLineD) Reset() {
	*x = ReceiptAdviceLineD{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptAdviceLineD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAdviceLineD) ProtoMessage() {}

func (x *ReceiptAdviceLineD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAdviceLineD.ProtoReflect.Descriptor instead.
func (*ReceiptAdviceLineD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{12}
}

func (x *ReceiptAdviceLineD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceiptAdviceLineD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ReceiptAdviceLineD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetRcptlId() string {
	if x != nil {
		return x.RcptlId
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetReceivedQuantity() uint32 {
	if x != nil {
		return x.ReceivedQuantity
	}
	return 0
}

func (x *ReceiptAdviceLineD) GetShortQuantity() uint32 {
	if x != nil {
		return x.ShortQuantity
	}
	return 0
}

func (x *ReceiptAdviceLineD) GetShortageActionCode() string {
	if x != nil {
		return x.ShortageActionCode
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetRejectedQuantity() uint32 {
	if x != nil {
		return x.RejectedQuantity
	}
	return 0
}

func (x *ReceiptAdviceLineD) GetRejectReasonCode() string {
	if x != nil {
		return x.RejectReasonCode
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetRejectActionCode() string {
	if x != nil {
		return x.RejectActionCode
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetQuantityDiscrepancyCode() string {
	if x != nil {
		return x.QuantityDiscrepancyCode
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetOversupplyQuantity() uint32 {
	if x != nil {
		return x.OversupplyQuantity
	}
	return 0
}

func (x *ReceiptAdviceLineD) GetTimingComplaintCode() string {
	if x != nil {
		return x.TimingComplaintCode
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetTimingComplaint() string {
	if x != nil {
		return x.TimingComplaint
	}
	return ""
}

func (x *ReceiptAdviceLineD) GetOrderLineId() uint32 {
	if x != nil {
		return x.OrderLineId
	}
	return 0
}

func (x *ReceiptAdviceLineD) GetDespatchLineId() uint32 {
	if x != nil {
		return x.DespatchLineId
	}
	return 0
}

func (x *ReceiptAdviceLineD) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ReceiptAdviceLineD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *ReceiptAdviceLineD) GetReceiptAdviceHeaderId() uint32 {
	if x != nil {
		return x.ReceiptAdviceHeaderId
	}
	return 0
}

type ReceiptAdviceLineT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=received_date,json=receivedDate,proto3" json:"received_date,omitempty"`
}

func (x *ReceiptAdviceLineT) Reset() {
	*x = ReceiptAdviceLineT{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptAdviceLineT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAdviceLineT) ProtoMessage() {}

func (x *ReceiptAdviceLineT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAdviceLineT.ProtoReflect.Descriptor instead.
func (*ReceiptAdviceLineT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{13}
}

func (x *ReceiptAdviceLineT) GetReceivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedDate
	}
	return nil
}

type CreateReceiptAdviceLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RcptlId                 string `protobuf:"bytes,1,opt,name=rcptl_id,json=rcptlId,proto3" json:"rcptl_id,omitempty"`
	Note                    string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	ReceivedQuantity        uint32 `protobuf:"varint,3,opt,name=received_quantity,json=receivedQuantity,proto3" json:"received_quantity,omitempty"`
	ShortQuantity           uint32 `protobuf:"varint,4,opt,name=short_quantity,json=shortQuantity,proto3" json:"short_quantity,omitempty"`
	ShortageActionCode      string `protobuf:"bytes,5,opt,name=shortage_action_code,json=shortageActionCode,proto3" json:"shortage_action_code,omitempty"`
	RejectedQuantity        uint32 `protobuf:"varint,6,opt,name=rejected_quantity,json=rejectedQuantity,proto3" json:"rejected_quantity,omitempty"`
	RejectReasonCode        string `protobuf:"bytes,7,opt,name=reject_reason_code,json=rejectReasonCode,proto3" json:"reject_reason_code,omitempty"`
	RejectReason            string `protobuf:"bytes,8,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	RejectActionCode        string `protobuf:"bytes,9,opt,name=reject_action_code,json=rejectActionCode,proto3" json:"reject_action_code,omitempty"`
	QuantityDiscrepancyCode string `protobuf:"bytes,10,opt,name=quantity_discrepancy_code,json=quantityDiscrepancyCode,proto3" json:"quantity_discrepancy_code,omitempty"`
	OversupplyQuantity      uint32 `protobuf:"varint,11,opt,name=oversupply_quantity,json=oversupplyQuantity,proto3" json:"oversupply_quantity,omitempty"`
	ReceivedDate            string `protobuf:"bytes,12,opt,name=received_date,json=receivedDate,proto3" json:"received_date,omitempty"`
	TimingComplaintCode     string `protobuf:"bytes,13,opt,name=timing_complaint_code,json=timingComplaintCode,proto3" json:"timing_complaint_code,omitempty"`
	TimingComplaint         string `protobuf:"bytes,14,opt,name=timing_complaint,json=timingComplaint,proto3" json:"timing_complaint,omitempty"`
	OrderLineId             uint32 `protobuf:"varint,15,opt,name=order_line_id,json=orderLineId,proto3" json:"order_line_id,omitempty"`
	DespatchLineId          uint32 `protobuf:"varint,16,opt,name=despatch_line_id,json=despatchLineId,proto3" json:"despatch_line_id,omitempty"`
	ItemId                  uint32 `protobuf:"varint,17,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ShipmentId              uint32 `protobuf:"varint,18,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	ReceiptAdviceHeaderId   uint32 `protobuf:"varint,19,opt,name=receipt_advice_header_id,json=receiptAdviceHeaderId,proto3" json:"receipt_advice_header_id,omitempty"`
	UserId                  string `protobuf:"bytes,20,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail               string `protobuf:"bytes,21,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId               string `protobuf:"bytes,22,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateReceiptAdviceLineRequest) Reset() {
	*x = CreateReceiptAdviceLineRequest{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReceiptAdviceLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceiptAdviceLineRequest) ProtoMessage() {}

func (x *CreateReceiptAdviceLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceiptAdviceLineRequest.ProtoReflect.Descriptor instead.
func (*CreateReceiptAdviceLineRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{14}
}

func (x *CreateReceiptAdviceLineRequest) GetRcptlId() string {
	if x != nil {
		return x.RcptlId
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetReceivedQuantity() uint32 {
	if x != nil {
		return x.ReceivedQuantity
	}
	return 0
}

func (x *CreateReceiptAdviceLineRequest) GetShortQuantity() uint32 {
	if x != nil {
		return x.ShortQuantity
	}
	return 0
}

func (x *CreateReceiptAdviceLineRequest) GetShortageActionCode() string {
	if x != nil {
		return x.ShortageActionCode
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetRejectedQuantity() uint32 {
	if x != nil {
		return x.RejectedQuantity
	}
	return 0
}

func (x *CreateReceiptAdviceLineRequest) GetRejectReasonCode() string {
	if x != nil {
		return x.RejectReasonCode
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetRejectActionCode() string {
	if x != nil {
		return x.RejectActionCode
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetQuantityDiscrepancyCode() string {
	if x != nil {
		return x.QuantityDiscrepancyCode
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetOversupplyQuantity() uint32 {
	if x != nil {
		return x.OversupplyQuantity
	}
	return 0
}

func (x *CreateReceiptAdviceLineRequest) GetReceivedDate() string {
	if x != nil {
		return x.ReceivedDate
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetTimingComplaintCode() string {
	if x != nil {
		return x.TimingComplaintCode
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetTimingComplaint() string {
	if x != nil {
		return x.TimingComplaint
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetOrderLineId() uint32 {
	if x != nil {
		return x.OrderLineId
	}
	return 0
}

func (x *CreateReceiptAdviceLineRequest) GetDespatchLineId() uint32 {
	if x != nil {
		return x.DespatchLineId
	}
	return 0
}

func (x *CreateReceiptAdviceLineRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateReceiptAdviceLineRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateReceiptAdviceLineRequest) GetReceiptAdviceHeaderId() uint32 {
	if x != nil {
		return x.ReceiptAdviceHeaderId
	}
	return 0
}

func (x *CreateReceiptAdviceLineRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateReceiptAdviceLineRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateReceiptAdviceLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptAdviceLine *ReceiptAdviceLine `protobuf:"bytes,1,opt,name=receipt_advice_line,json=receiptAdviceLine,proto3" json:"receipt_advice_line,omitempty"`
}

func (x *CreateReceiptAdviceLineResponse) Reset() {
	*x = CreateReceiptAdviceLineResponse{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReceiptAdviceLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceiptAdviceLineResponse) ProtoMessage() {}

func (x *CreateReceiptAdviceLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceiptAdviceLineResponse.ProtoReflect.Descriptor instead.
func (*CreateReceiptAdviceLineResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{15}
}

func (x *CreateReceiptAdviceLineResponse) GetReceiptAdviceLine() *ReceiptAdviceLine {
	if x != nil {
		return x.ReceiptAdviceLine
	}
	return nil
}

type GetReceiptAdviceLinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetReceiptAdviceLinesRequest) Reset() {
	*x = GetReceiptAdviceLinesRequest{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptAdviceLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptAdviceLinesRequest) ProtoMessage() {}

func (x *GetReceiptAdviceLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptAdviceLinesRequest.ProtoReflect.Descriptor instead.
func (*GetReceiptAdviceLinesRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{16}
}

func (x *GetReceiptAdviceLinesRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetReceiptAdviceLinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptAdviceLines []*ReceiptAdviceLine `protobuf:"bytes,1,rep,name=receipt_advice_lines,json=receiptAdviceLines,proto3" json:"receipt_advice_lines,omitempty"`
}

func (x *GetReceiptAdviceLinesResponse) Reset() {
	*x = GetReceiptAdviceLinesResponse{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceiptAdviceLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiptAdviceLinesResponse) ProtoMessage() {}

func (x *GetReceiptAdviceLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiptAdviceLinesResponse.ProtoReflect.Descriptor instead.
func (*GetReceiptAdviceLinesResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{17}
}

func (x *GetReceiptAdviceLinesResponse) GetReceiptAdviceLines() []*ReceiptAdviceLine {
	if x != nil {
		return x.ReceiptAdviceLines
	}
	return nil
}

type UpdateReceiptAdviceHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptAdviceTypeCode string `protobuf:"bytes,1,opt,name=receipt_advice_type_code,json=receiptAdviceTypeCode,proto3" json:"receipt_advice_type_code,omitempty"`
	Note                  string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	LineCountNumeric      uint32 `protobuf:"varint,3,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	Id                    string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	UserId                string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateReceiptAdviceHeaderRequest) Reset() {
	*x = UpdateReceiptAdviceHeaderRequest{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReceiptAdviceHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceiptAdviceHeaderRequest) ProtoMessage() {}

func (x *UpdateReceiptAdviceHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceiptAdviceHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateReceiptAdviceHeaderRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateReceiptAdviceHeaderRequest) GetReceiptAdviceTypeCode() string {
	if x != nil {
		return x.ReceiptAdviceTypeCode
	}
	return ""
}

func (x *UpdateReceiptAdviceHeaderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateReceiptAdviceHeaderRequest) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *UpdateReceiptAdviceHeaderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateReceiptAdviceHeaderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateReceiptAdviceHeaderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateReceiptAdviceHeaderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateReceiptAdviceHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateReceiptAdviceHeaderResponse) Reset() {
	*x = UpdateReceiptAdviceHeaderResponse{}
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReceiptAdviceHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceiptAdviceHeaderResponse) ProtoMessage() {}

func (x *UpdateReceiptAdviceHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_receiptadvice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceiptAdviceHeaderResponse.ProtoReflect.Descriptor instead.
func (*UpdateReceiptAdviceHeaderResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_receiptadvice_proto_rawDescGZIP(), []int{19}
}

var File_logistics_v1_receiptadvice_proto protoreflect.FileDescriptor

var file_logistics_v1_receiptadvice_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02, 0x0a, 0x13, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x59, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x12, 0x59, 0x0a, 0x17,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x54, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xac, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x63, 0x70, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x63, 0x70, 0x74, 0x68, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x51, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xd5, 0x05, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x63,
	0x70, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x63,
	0x70, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a,
	0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x7a, 0x0a,
	0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x77, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x15,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x13,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x9b, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x22, 0x95, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x11, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x53, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44,
	0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x44, 0x12, 0x53, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x54, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbd, 0x06, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x63, 0x70, 0x74, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x63, 0x70, 0x74, 0x6c, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x12, 0x3f, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x07, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x63, 0x70, 0x74, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x63, 0x70, 0x74, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x22,
	0x56, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf0, 0x06, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x2c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x12,
	0x2f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75, 0x62, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_logistics_v1_receiptadvice_proto_rawDescOnce sync.Once
	file_logistics_v1_receiptadvice_proto_rawDescData = file_logistics_v1_receiptadvice_proto_rawDesc
)

func file_logistics_v1_receiptadvice_proto_rawDescGZIP() []byte {
	file_logistics_v1_receiptadvice_proto_rawDescOnce.Do(func() {
		file_logistics_v1_receiptadvice_proto_rawDescData = protoimpl.X.CompressGZIP(file_logistics_v1_receiptadvice_proto_rawDescData)
	})
	return file_logistics_v1_receiptadvice_proto_rawDescData
}

var file_logistics_v1_receiptadvice_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_logistics_v1_receiptadvice_proto_goTypes = []any{
	(*ReceiptAdviceHeader)(nil),                // 0: logistics.v1.ReceiptAdviceHeader
	(*ReceiptAdviceHeaderD)(nil),               // 1: logistics.v1.ReceiptAdviceHeaderD
	(*ReceiptAdviceHeaderT)(nil),               // 2: logistics.v1.ReceiptAdviceHeaderT
	(*CreateReceiptAdviceHeaderRequest)(nil),   // 3: logistics.v1.CreateReceiptAdviceHeaderRequest
	(*CreateReceiptAdviceHeaderResponse)(nil),  // 4: logistics.v1.CreateReceiptAdviceHeaderResponse
	(*GetReceiptAdviceHeaderRequest)(nil),      // 5: logistics.v1.GetReceiptAdviceHeaderRequest
	(*GetReceiptAdviceHeaderResponse)(nil),     // 6: logistics.v1.GetReceiptAdviceHeaderResponse
	(*GetReceiptAdviceHeaderByPkRequest)(nil),  // 7: logistics.v1.GetReceiptAdviceHeaderByPkRequest
	(*GetReceiptAdviceHeaderByPkResponse)(nil), // 8: logistics.v1.GetReceiptAdviceHeaderByPkResponse
	(*GetReceiptAdviceHeadersResponse)(nil),    // 9: logistics.v1.GetReceiptAdviceHeadersResponse
	(*GetReceiptAdviceHeadersRequest)(nil),     // 10: logistics.v1.GetReceiptAdviceHeadersRequest
	(*ReceiptAdviceLine)(nil),                  // 11: logistics.v1.ReceiptAdviceLine
	(*ReceiptAdviceLineD)(nil),                 // 12: logistics.v1.ReceiptAdviceLineD
	(*ReceiptAdviceLineT)(nil),                 // 13: logistics.v1.ReceiptAdviceLineT
	(*CreateReceiptAdviceLineRequest)(nil),     // 14: logistics.v1.CreateReceiptAdviceLineRequest
	(*CreateReceiptAdviceLineResponse)(nil),    // 15: logistics.v1.CreateReceiptAdviceLineResponse
	(*GetReceiptAdviceLinesRequest)(nil),       // 16: logistics.v1.GetReceiptAdviceLinesRequest
	(*GetReceiptAdviceLinesResponse)(nil),      // 17: logistics.v1.GetReceiptAdviceLinesResponse
	(*UpdateReceiptAdviceHeaderRequest)(nil),   // 18: logistics.v1.UpdateReceiptAdviceHeaderRequest
	(*UpdateReceiptAdviceHeaderResponse)(nil),  // 19: logistics.v1.UpdateReceiptAdviceHeaderResponse
	(*v1.CrUpdUser)(nil),                       // 20: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                       // 21: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),              // 22: google.protobuf.Timestamp
	(*v1.GetRequest)(nil),                      // 23: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                  // 24: common.v1.GetByIdRequest
}
var file_logistics_v1_receiptadvice_proto_depIdxs = []int32{
	1,  // 0: logistics.v1.ReceiptAdviceHeader.receipt_advice_header_d:type_name -> logistics.v1.ReceiptAdviceHeaderD
	2,  // 1: logistics.v1.ReceiptAdviceHeader.receipt_advice_header_t:type_name -> logistics.v1.ReceiptAdviceHeaderT
	20, // 2: logistics.v1.ReceiptAdviceHeader.cr_upd_user:type_name -> common.v1.CrUpdUser
	21, // 3: logistics.v1.ReceiptAdviceHeader.cr_upd_time:type_name -> common.v1.CrUpdTime
	22, // 4: logistics.v1.ReceiptAdviceHeaderT.issue_date:type_name -> google.protobuf.Timestamp
	14, // 5: logistics.v1.CreateReceiptAdviceHeaderRequest.receipt_advice_lines:type_name -> logistics.v1.CreateReceiptAdviceLineRequest
	0,  // 6: logistics.v1.CreateReceiptAdviceHeaderResponse.receipt_advice_header:type_name -> logistics.v1.ReceiptAdviceHeader
	23, // 7: logistics.v1.GetReceiptAdviceHeaderRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 8: logistics.v1.GetReceiptAdviceHeaderResponse.receipt_advice_header:type_name -> logistics.v1.ReceiptAdviceHeader
	24, // 9: logistics.v1.GetReceiptAdviceHeaderByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 10: logistics.v1.GetReceiptAdviceHeaderByPkResponse.receipt_advice_header:type_name -> logistics.v1.ReceiptAdviceHeader
	0,  // 11: logistics.v1.GetReceiptAdviceHeadersResponse.receipt_advice_headers:type_name -> logistics.v1.ReceiptAdviceHeader
	12, // 12: logistics.v1.ReceiptAdviceLine.receipt_advice_line_d:type_name -> logistics.v1.ReceiptAdviceLineD
	13, // 13: logistics.v1.ReceiptAdviceLine.receipt_advice_line_t:type_name -> logistics.v1.ReceiptAdviceLineT
	20, // 14: logistics.v1.ReceiptAdviceLine.cr_upd_user:type_name -> common.v1.CrUpdUser
	21, // 15: logistics.v1.ReceiptAdviceLine.cr_upd_time:type_name -> common.v1.CrUpdTime
	22, // 16: logistics.v1.ReceiptAdviceLineT.received_date:type_name -> google.protobuf.Timestamp
	11, // 17: logistics.v1.CreateReceiptAdviceLineResponse.receipt_advice_line:type_name -> logistics.v1.ReceiptAdviceLine
	23, // 18: logistics.v1.GetReceiptAdviceLinesRequest.get_request:type_name -> common.v1.GetRequest
	11, // 19: logistics.v1.GetReceiptAdviceLinesResponse.receipt_advice_lines:type_name -> logistics.v1.ReceiptAdviceLine
	3,  // 20: logistics.v1.ReceiptAdviceHeaderService.CreateReceiptAdviceHeader:input_type -> logistics.v1.CreateReceiptAdviceHeaderRequest
	10, // 21: logistics.v1.ReceiptAdviceHeaderService.GetReceiptAdviceHeaders:input_type -> logistics.v1.GetReceiptAdviceHeadersRequest
	5,  // 22: logistics.v1.ReceiptAdviceHeaderService.GetReceiptAdviceHeader:input_type -> logistics.v1.GetReceiptAdviceHeaderRequest
	7,  // 23: logistics.v1.ReceiptAdviceHeaderService.GetReceiptAdviceHeaderByPk:input_type -> logistics.v1.GetReceiptAdviceHeaderByPkRequest
	14, // 24: logistics.v1.ReceiptAdviceHeaderService.CreateReceiptAdviceLine:input_type -> logistics.v1.CreateReceiptAdviceLineRequest
	16, // 25: logistics.v1.ReceiptAdviceHeaderService.GetReceiptAdviceLines:input_type -> logistics.v1.GetReceiptAdviceLinesRequest
	18, // 26: logistics.v1.ReceiptAdviceHeaderService.UpdateReceiptAdviceHeader:input_type -> logistics.v1.UpdateReceiptAdviceHeaderRequest
	4,  // 27: logistics.v1.ReceiptAdviceHeaderService.CreateReceiptAdviceHeader:output_type -> logistics.v1.CreateReceiptAdviceHeaderResponse
	9,  // 28: logistics.v1.ReceiptAdviceHeaderService.GetReceiptAdviceHeaders:output_type -> logistics.v1.GetReceiptAdviceHeadersResponse
	6,  // 29: logistics.v1.ReceiptAdviceHeaderService.GetReceiptAdviceHeader:output_type -> logistics.v1.GetReceiptAdviceHeaderResponse
	8,  // 30: logistics.v1.ReceiptAdviceHeaderService.GetReceiptAdviceHeaderByPk:output_type -> logistics.v1.GetReceiptAdviceHeaderByPkResponse
	15, // 31: logistics.v1.ReceiptAdviceHeaderService.CreateReceiptAdviceLine:output_type -> logistics.v1.CreateReceiptAdviceLineResponse
	17, // 32: logistics.v1.ReceiptAdviceHeaderService.GetReceiptAdviceLines:output_type -> logistics.v1.GetReceiptAdviceLinesResponse
	19, // 33: logistics.v1.ReceiptAdviceHeaderService.UpdateReceiptAdviceHeader:output_type -> logistics.v1.UpdateReceiptAdviceHeaderResponse
	27, // [27:34] is the sub-list for method output_type
	20, // [20:27] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_logistics_v1_receiptadvice_proto_init() }
func file_logistics_v1_receiptadvice_proto_init() {
	if File_logistics_v1_receiptadvice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logistics_v1_receiptadvice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logistics_v1_receiptadvice_proto_goTypes,
		DependencyIndexes: file_logistics_v1_receiptadvice_proto_depIdxs,
		MessageInfos:      file_logistics_v1_receiptadvice_proto_msgTypes,
	}.Build()
	File_logistics_v1_receiptadvice_proto = out.File
	file_logistics_v1_receiptadvice_proto_rawDesc = nil
	file_logistics_v1_receiptadvice_proto_goTypes = nil
	file_logistics_v1_receiptadvice_proto_depIdxs = nil
}
