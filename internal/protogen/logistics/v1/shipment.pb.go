// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: logistics/v1/shipment.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Delivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryD    *DeliveryD      `protobuf:"bytes,1,opt,name=delivery_d,json=deliveryD,proto3" json:"delivery_d,omitempty"`
	DeliveryT    *DeliveryT      `protobuf:"bytes,2,opt,name=delivery_t,json=deliveryT,proto3" json:"delivery_t,omitempty"`
	CrUpdUser    *v1.CrUpdUser   `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime    *v1.CrUpdTime   `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	DeliveryTerm []*DeliveryTerm `protobuf:"bytes,5,rep,name=delivery_term,json=deliveryTerm,proto3" json:"delivery_term,omitempty"`
	Despatch     *Despatch       `protobuf:"bytes,6,opt,name=despatch,proto3" json:"despatch,omitempty"`
}

func (x *Delivery) Reset() {
	*x = Delivery{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Delivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delivery) ProtoMessage() {}

func (x *Delivery) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delivery.ProtoReflect.Descriptor instead.
func (*Delivery) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{0}
}

func (x *Delivery) GetDeliveryD() *DeliveryD {
	if x != nil {
		return x.DeliveryD
	}
	return nil
}

func (x *Delivery) GetDeliveryT() *DeliveryT {
	if x != nil {
		return x.DeliveryT
	}
	return nil
}

func (x *Delivery) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Delivery) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *Delivery) GetDeliveryTerm() []*DeliveryTerm {
	if x != nil {
		return x.DeliveryTerm
	}
	return nil
}

func (x *Delivery) GetDespatch() *Despatch {
	if x != nil {
		return x.Despatch
	}
	return nil
}

type DeliveryD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                         []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                           string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	DelId                         string  `protobuf:"bytes,4,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`
	Quantity                      float64 `protobuf:"fixed64,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	MinimumQuantity               float64 `protobuf:"fixed64,6,opt,name=minimum_quantity,json=minimumQuantity,proto3" json:"minimum_quantity,omitempty"`
	MaximumQuantity               float64 `protobuf:"fixed64,7,opt,name=maximum_quantity,json=maximumQuantity,proto3" json:"maximum_quantity,omitempty"`
	ReleaseId                     string  `protobuf:"bytes,8,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	TrackingId                    string  `protobuf:"bytes,9,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	MinimumBatchQuantity          int64   `protobuf:"varint,10,opt,name=minimum_batch_quantity,json=minimumBatchQuantity,proto3" json:"minimum_batch_quantity,omitempty"`
	MaximumBatchQuantity          int64   `protobuf:"varint,11,opt,name=maximum_batch_quantity,json=maximumBatchQuantity,proto3" json:"maximum_batch_quantity,omitempty"`
	ConsumerUnitQuantity          int64   `protobuf:"varint,12,opt,name=consumer_unit_quantity,json=consumerUnitQuantity,proto3" json:"consumer_unit_quantity,omitempty"`
	HazardousRiskIndicator        bool    `protobuf:"varint,13,opt,name=hazardous_risk_indicator,json=hazardousRiskIndicator,proto3" json:"hazardous_risk_indicator,omitempty"`
	DeliveryAddressId             uint32  `protobuf:"varint,14,opt,name=delivery_address_id,json=deliveryAddressId,proto3" json:"delivery_address_id,omitempty"`
	DeliveryLocationId            uint32  `protobuf:"varint,15,opt,name=delivery_location_id,json=deliveryLocationId,proto3" json:"delivery_location_id,omitempty"`
	AlternativeDeliveryLocationId uint32  `protobuf:"varint,16,opt,name=alternative_delivery_location_id,json=alternativeDeliveryLocationId,proto3" json:"alternative_delivery_location_id,omitempty"`
	CarrierPartyId                uint32  `protobuf:"varint,17,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	DeliveryPartyId               uint32  `protobuf:"varint,18,opt,name=delivery_party_id,json=deliveryPartyId,proto3" json:"delivery_party_id,omitempty"`
	NotifyPartyId                 uint32  `protobuf:"varint,19,opt,name=notify_party_id,json=notifyPartyId,proto3" json:"notify_party_id,omitempty"`
	DespatchId                    uint32  `protobuf:"varint,20,opt,name=despatch_id,json=despatchId,proto3" json:"despatch_id,omitempty"`
	ShipmentId                    uint32  `protobuf:"varint,21,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
}

func (x *DeliveryD) Reset() {
	*x = DeliveryD{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeliveryD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryD) ProtoMessage() {}

func (x *DeliveryD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryD.ProtoReflect.Descriptor instead.
func (*DeliveryD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{1}
}

func (x *DeliveryD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliveryD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DeliveryD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DeliveryD) GetDelId() string {
	if x != nil {
		return x.DelId
	}
	return ""
}

func (x *DeliveryD) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *DeliveryD) GetMinimumQuantity() float64 {
	if x != nil {
		return x.MinimumQuantity
	}
	return 0
}

func (x *DeliveryD) GetMaximumQuantity() float64 {
	if x != nil {
		return x.MaximumQuantity
	}
	return 0
}

func (x *DeliveryD) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *DeliveryD) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *DeliveryD) GetMinimumBatchQuantity() int64 {
	if x != nil {
		return x.MinimumBatchQuantity
	}
	return 0
}

func (x *DeliveryD) GetMaximumBatchQuantity() int64 {
	if x != nil {
		return x.MaximumBatchQuantity
	}
	return 0
}

func (x *DeliveryD) GetConsumerUnitQuantity() int64 {
	if x != nil {
		return x.ConsumerUnitQuantity
	}
	return 0
}

func (x *DeliveryD) GetHazardousRiskIndicator() bool {
	if x != nil {
		return x.HazardousRiskIndicator
	}
	return false
}

func (x *DeliveryD) GetDeliveryAddressId() uint32 {
	if x != nil {
		return x.DeliveryAddressId
	}
	return 0
}

func (x *DeliveryD) GetDeliveryLocationId() uint32 {
	if x != nil {
		return x.DeliveryLocationId
	}
	return 0
}

func (x *DeliveryD) GetAlternativeDeliveryLocationId() uint32 {
	if x != nil {
		return x.AlternativeDeliveryLocationId
	}
	return 0
}

func (x *DeliveryD) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *DeliveryD) GetDeliveryPartyId() uint32 {
	if x != nil {
		return x.DeliveryPartyId
	}
	return 0
}

func (x *DeliveryD) GetNotifyPartyId() uint32 {
	if x != nil {
		return x.NotifyPartyId
	}
	return 0
}

func (x *DeliveryD) GetDespatchId() uint32 {
	if x != nil {
		return x.DespatchId
	}
	return 0
}

func (x *DeliveryD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

type DeliveryT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualDeliveryDate               *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=actual_delivery_date,json=actualDeliveryDate,proto3" json:"actual_delivery_date,omitempty"`
	LatestDeliveryDate               *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=latest_delivery_date,json=latestDeliveryDate,proto3" json:"latest_delivery_date,omitempty"`
	RequestedDeliveryPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=requested_delivery_period_start_date,json=requestedDeliveryPeriodStartDate,proto3" json:"requested_delivery_period_start_date,omitempty"`
	RequestedDeliveryPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=requested_delivery_period_end_date,json=requestedDeliveryPeriodEndDate,proto3" json:"requested_delivery_period_end_date,omitempty"`
	PromisedDeliveryPeriodStartDate  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=promised_delivery_period_start_date,json=promisedDeliveryPeriodStartDate,proto3" json:"promised_delivery_period_start_date,omitempty"`
	PromisedDeliveryPeriodEndDate    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=promised_delivery_period_end_date,json=promisedDeliveryPeriodEndDate,proto3" json:"promised_delivery_period_end_date,omitempty"`
	EstimatedDeliveryPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=estimated_delivery_period_start_date,json=estimatedDeliveryPeriodStartDate,proto3" json:"estimated_delivery_period_start_date,omitempty"`
	EstimatedDeliveryPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=estimated_delivery_period_end_date,json=estimatedDeliveryPeriodEndDate,proto3" json:"estimated_delivery_period_end_date,omitempty"`
}

func (x *DeliveryT) Reset() {
	*x = DeliveryT{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeliveryT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryT) ProtoMessage() {}

func (x *DeliveryT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryT.ProtoReflect.Descriptor instead.
func (*DeliveryT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{2}
}

func (x *DeliveryT) GetActualDeliveryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDeliveryDate
	}
	return nil
}

func (x *DeliveryT) GetLatestDeliveryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestDeliveryDate
	}
	return nil
}

func (x *DeliveryT) GetRequestedDeliveryPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDeliveryPeriodStartDate
	}
	return nil
}

func (x *DeliveryT) GetRequestedDeliveryPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDeliveryPeriodEndDate
	}
	return nil
}

func (x *DeliveryT) GetPromisedDeliveryPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PromisedDeliveryPeriodStartDate
	}
	return nil
}

func (x *DeliveryT) GetPromisedDeliveryPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PromisedDeliveryPeriodEndDate
	}
	return nil
}

func (x *DeliveryT) GetEstimatedDeliveryPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDeliveryPeriodStartDate
	}
	return nil
}

func (x *DeliveryT) GetEstimatedDeliveryPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDeliveryPeriodEndDate
	}
	return nil
}

type CreateDeliveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelId                            string       `protobuf:"bytes,1,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`
	Quantity                         float64      `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	MinimumQuantity                  float64      `protobuf:"fixed64,3,opt,name=minimum_quantity,json=minimumQuantity,proto3" json:"minimum_quantity,omitempty"`
	MaximumQuantity                  float64      `protobuf:"fixed64,4,opt,name=maximum_quantity,json=maximumQuantity,proto3" json:"maximum_quantity,omitempty"`
	ActualDeliveryDate               string       `protobuf:"bytes,5,opt,name=actual_delivery_date,json=actualDeliveryDate,proto3" json:"actual_delivery_date,omitempty"`
	LatestDeliveryDate               string       `protobuf:"bytes,6,opt,name=latest_delivery_date,json=latestDeliveryDate,proto3" json:"latest_delivery_date,omitempty"`
	ReleaseId                        string       `protobuf:"bytes,7,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	TrackingId                       string       `protobuf:"bytes,8,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	RequestedDeliveryPeriodStartDate string       `protobuf:"bytes,9,opt,name=requested_delivery_period_start_date,json=requestedDeliveryPeriodStartDate,proto3" json:"requested_delivery_period_start_date,omitempty"`
	RequestedDeliveryPeriodEndDate   string       `protobuf:"bytes,10,opt,name=requested_delivery_period_end_date,json=requestedDeliveryPeriodEndDate,proto3" json:"requested_delivery_period_end_date,omitempty"`
	PromisedDeliveryPeriodStartDate  string       `protobuf:"bytes,11,opt,name=promised_delivery_period_start_date,json=promisedDeliveryPeriodStartDate,proto3" json:"promised_delivery_period_start_date,omitempty"`
	PromisedDeliveryPeriodEndDate    string       `protobuf:"bytes,12,opt,name=promised_delivery_period_end_date,json=promisedDeliveryPeriodEndDate,proto3" json:"promised_delivery_period_end_date,omitempty"`
	EstimatedDeliveryPeriodStartDate string       `protobuf:"bytes,13,opt,name=estimated_delivery_period_start_date,json=estimatedDeliveryPeriodStartDate,proto3" json:"estimated_delivery_period_start_date,omitempty"`
	EstimatedDeliveryPeriodEndDate   string       `protobuf:"bytes,14,opt,name=estimated_delivery_period_end_date,json=estimatedDeliveryPeriodEndDate,proto3" json:"estimated_delivery_period_end_date,omitempty"`
	MinimumBatchQuantity             int64        `protobuf:"varint,15,opt,name=minimum_batch_quantity,json=minimumBatchQuantity,proto3" json:"minimum_batch_quantity,omitempty"`
	MaximumBatchQuantity             int64        `protobuf:"varint,16,opt,name=maximum_batch_quantity,json=maximumBatchQuantity,proto3" json:"maximum_batch_quantity,omitempty"`
	ConsumerUnitQuantity             int64        `protobuf:"varint,17,opt,name=consumer_unit_quantity,json=consumerUnitQuantity,proto3" json:"consumer_unit_quantity,omitempty"`
	HazardousRiskIndicator           bool         `protobuf:"varint,18,opt,name=hazardous_risk_indicator,json=hazardousRiskIndicator,proto3" json:"hazardous_risk_indicator,omitempty"`
	DeliveryAddressId                uint32       `protobuf:"varint,19,opt,name=delivery_address_id,json=deliveryAddressId,proto3" json:"delivery_address_id,omitempty"`
	DeliveryLocationId               uint32       `protobuf:"varint,20,opt,name=delivery_location_id,json=deliveryLocationId,proto3" json:"delivery_location_id,omitempty"`
	AlternativeDeliveryLocationId    uint32       `protobuf:"varint,21,opt,name=alternative_delivery_location_id,json=alternativeDeliveryLocationId,proto3" json:"alternative_delivery_location_id,omitempty"`
	CarrierPartyId                   uint32       `protobuf:"varint,22,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	DeliveryPartyId                  uint32       `protobuf:"varint,23,opt,name=delivery_party_id,json=deliveryPartyId,proto3" json:"delivery_party_id,omitempty"`
	NotifyPartyId                    uint32       `protobuf:"varint,24,opt,name=notify_party_id,json=notifyPartyId,proto3" json:"notify_party_id,omitempty"`
	DespatchId                       uint32       `protobuf:"varint,25,opt,name=despatch_id,json=despatchId,proto3" json:"despatch_id,omitempty"`
	ShipmentId                       uint32       `protobuf:"varint,26,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	UserId                           string       `protobuf:"bytes,27,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                        string       `protobuf:"bytes,28,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                        string       `protobuf:"bytes,29,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DeliveryAddress                  *v1.Address  `protobuf:"bytes,30,opt,name=delivery_address,json=deliveryAddress,proto3" json:"delivery_address,omitempty"`
	DeliveryLocation                 *v1.Location `protobuf:"bytes,31,opt,name=delivery_location,json=deliveryLocation,proto3" json:"delivery_location,omitempty"`
	AlternativeDeliveryLocation      *v1.Location `protobuf:"bytes,32,opt,name=alternative_delivery_location,json=alternativeDeliveryLocation,proto3" json:"alternative_delivery_location,omitempty"`
}

func (x *CreateDeliveryRequest) Reset() {
	*x = CreateDeliveryRequest{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeliveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeliveryRequest) ProtoMessage() {}

func (x *CreateDeliveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeliveryRequest.ProtoReflect.Descriptor instead.
func (*CreateDeliveryRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDeliveryRequest) GetDelId() string {
	if x != nil {
		return x.DelId
	}
	return ""
}

func (x *CreateDeliveryRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateDeliveryRequest) GetMinimumQuantity() float64 {
	if x != nil {
		return x.MinimumQuantity
	}
	return 0
}

func (x *CreateDeliveryRequest) GetMaximumQuantity() float64 {
	if x != nil {
		return x.MaximumQuantity
	}
	return 0
}

func (x *CreateDeliveryRequest) GetActualDeliveryDate() string {
	if x != nil {
		return x.ActualDeliveryDate
	}
	return ""
}

func (x *CreateDeliveryRequest) GetLatestDeliveryDate() string {
	if x != nil {
		return x.LatestDeliveryDate
	}
	return ""
}

func (x *CreateDeliveryRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *CreateDeliveryRequest) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *CreateDeliveryRequest) GetRequestedDeliveryPeriodStartDate() string {
	if x != nil {
		return x.RequestedDeliveryPeriodStartDate
	}
	return ""
}

func (x *CreateDeliveryRequest) GetRequestedDeliveryPeriodEndDate() string {
	if x != nil {
		return x.RequestedDeliveryPeriodEndDate
	}
	return ""
}

func (x *CreateDeliveryRequest) GetPromisedDeliveryPeriodStartDate() string {
	if x != nil {
		return x.PromisedDeliveryPeriodStartDate
	}
	return ""
}

func (x *CreateDeliveryRequest) GetPromisedDeliveryPeriodEndDate() string {
	if x != nil {
		return x.PromisedDeliveryPeriodEndDate
	}
	return ""
}

func (x *CreateDeliveryRequest) GetEstimatedDeliveryPeriodStartDate() string {
	if x != nil {
		return x.EstimatedDeliveryPeriodStartDate
	}
	return ""
}

func (x *CreateDeliveryRequest) GetEstimatedDeliveryPeriodEndDate() string {
	if x != nil {
		return x.EstimatedDeliveryPeriodEndDate
	}
	return ""
}

func (x *CreateDeliveryRequest) GetMinimumBatchQuantity() int64 {
	if x != nil {
		return x.MinimumBatchQuantity
	}
	return 0
}

func (x *CreateDeliveryRequest) GetMaximumBatchQuantity() int64 {
	if x != nil {
		return x.MaximumBatchQuantity
	}
	return 0
}

func (x *CreateDeliveryRequest) GetConsumerUnitQuantity() int64 {
	if x != nil {
		return x.ConsumerUnitQuantity
	}
	return 0
}

func (x *CreateDeliveryRequest) GetHazardousRiskIndicator() bool {
	if x != nil {
		return x.HazardousRiskIndicator
	}
	return false
}

func (x *CreateDeliveryRequest) GetDeliveryAddressId() uint32 {
	if x != nil {
		return x.DeliveryAddressId
	}
	return 0
}

func (x *CreateDeliveryRequest) GetDeliveryLocationId() uint32 {
	if x != nil {
		return x.DeliveryLocationId
	}
	return 0
}

func (x *CreateDeliveryRequest) GetAlternativeDeliveryLocationId() uint32 {
	if x != nil {
		return x.AlternativeDeliveryLocationId
	}
	return 0
}

func (x *CreateDeliveryRequest) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *CreateDeliveryRequest) GetDeliveryPartyId() uint32 {
	if x != nil {
		return x.DeliveryPartyId
	}
	return 0
}

func (x *CreateDeliveryRequest) GetNotifyPartyId() uint32 {
	if x != nil {
		return x.NotifyPartyId
	}
	return 0
}

func (x *CreateDeliveryRequest) GetDespatchId() uint32 {
	if x != nil {
		return x.DespatchId
	}
	return 0
}

func (x *CreateDeliveryRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateDeliveryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDeliveryRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDeliveryRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateDeliveryRequest) GetDeliveryAddress() *v1.Address {
	if x != nil {
		return x.DeliveryAddress
	}
	return nil
}

func (x *CreateDeliveryRequest) GetDeliveryLocation() *v1.Location {
	if x != nil {
		return x.DeliveryLocation
	}
	return nil
}

func (x *CreateDeliveryRequest) GetAlternativeDeliveryLocation() *v1.Location {
	if x != nil {
		return x.AlternativeDeliveryLocation
	}
	return nil
}

type CreateDeliveryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delivery *Delivery `protobuf:"bytes,1,opt,name=delivery,proto3" json:"delivery,omitempty"`
}

func (x *CreateDeliveryResponse) Reset() {
	*x = CreateDeliveryResponse{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeliveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeliveryResponse) ProtoMessage() {}

func (x *CreateDeliveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeliveryResponse.ProtoReflect.Descriptor instead.
func (*CreateDeliveryResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDeliveryResponse) GetDelivery() *Delivery {
	if x != nil {
		return x.Delivery
	}
	return nil
}

type DeliveryTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryTermD *DeliveryTermD `protobuf:"bytes,1,opt,name=delivery_term_d,json=deliveryTermD,proto3" json:"delivery_term_d,omitempty"`
	CrUpdUser     *v1.CrUpdUser  `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime     *v1.CrUpdTime  `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DeliveryTerm) Reset() {
	*x = DeliveryTerm{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeliveryTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryTerm) ProtoMessage() {}

func (x *DeliveryTerm) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryTerm.ProtoReflect.Descriptor instead.
func (*DeliveryTerm) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{5}
}

func (x *DeliveryTerm) GetDeliveryTermD() *DeliveryTermD {
	if x != nil {
		return x.DeliveryTermD
	}
	return nil
}

func (x *DeliveryTerm) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DeliveryTerm) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DeliveryTermD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                      []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                        string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	DelTermId                  string  `protobuf:"bytes,4,opt,name=del_term_id,json=delTermId,proto3" json:"del_term_id,omitempty"`
	SpecialTerms               string  `protobuf:"bytes,5,opt,name=special_terms,json=specialTerms,proto3" json:"special_terms,omitempty"`
	LossRiskResponsibilityCode string  `protobuf:"bytes,6,opt,name=loss_risk_responsibility_code,json=lossRiskResponsibilityCode,proto3" json:"loss_risk_responsibility_code,omitempty"`
	LossRisk                   string  `protobuf:"bytes,7,opt,name=loss_risk,json=lossRisk,proto3" json:"loss_risk,omitempty"`
	Amount                     float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	DeliveryLocationId         uint32  `protobuf:"varint,9,opt,name=delivery_location_id,json=deliveryLocationId,proto3" json:"delivery_location_id,omitempty"`
	DelTermAllowanceChargeId   uint32  `protobuf:"varint,10,opt,name=del_term_allowance_charge_id,json=delTermAllowanceChargeId,proto3" json:"del_term_allowance_charge_id,omitempty"`
	DeliveryId                 uint32  `protobuf:"varint,11,opt,name=delivery_id,json=deliveryId,proto3" json:"delivery_id,omitempty"`
}

func (x *DeliveryTermD) Reset() {
	*x = DeliveryTermD{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeliveryTermD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryTermD) ProtoMessage() {}

func (x *DeliveryTermD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryTermD.ProtoReflect.Descriptor instead.
func (*DeliveryTermD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{6}
}

func (x *DeliveryTermD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliveryTermD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DeliveryTermD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DeliveryTermD) GetDelTermId() string {
	if x != nil {
		return x.DelTermId
	}
	return ""
}

func (x *DeliveryTermD) GetSpecialTerms() string {
	if x != nil {
		return x.SpecialTerms
	}
	return ""
}

func (x *DeliveryTermD) GetLossRiskResponsibilityCode() string {
	if x != nil {
		return x.LossRiskResponsibilityCode
	}
	return ""
}

func (x *DeliveryTermD) GetLossRisk() string {
	if x != nil {
		return x.LossRisk
	}
	return ""
}

func (x *DeliveryTermD) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DeliveryTermD) GetDeliveryLocationId() uint32 {
	if x != nil {
		return x.DeliveryLocationId
	}
	return 0
}

func (x *DeliveryTermD) GetDelTermAllowanceChargeId() uint32 {
	if x != nil {
		return x.DelTermAllowanceChargeId
	}
	return 0
}

func (x *DeliveryTermD) GetDeliveryId() uint32 {
	if x != nil {
		return x.DeliveryId
	}
	return 0
}

type CreateDeliveryTermRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelTermId                  string       `protobuf:"bytes,1,opt,name=del_term_id,json=delTermId,proto3" json:"del_term_id,omitempty"`
	SpecialTerms               string       `protobuf:"bytes,2,opt,name=special_terms,json=specialTerms,proto3" json:"special_terms,omitempty"`
	LossRiskResponsibilityCode string       `protobuf:"bytes,3,opt,name=loss_risk_responsibility_code,json=lossRiskResponsibilityCode,proto3" json:"loss_risk_responsibility_code,omitempty"`
	LossRisk                   string       `protobuf:"bytes,4,opt,name=loss_risk,json=lossRisk,proto3" json:"loss_risk,omitempty"`
	Amount                     float64      `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	DeliveryLocationId         uint32       `protobuf:"varint,6,opt,name=delivery_location_id,json=deliveryLocationId,proto3" json:"delivery_location_id,omitempty"`
	DelTermAllowanceChargeId   uint32       `protobuf:"varint,7,opt,name=del_term_allowance_charge_id,json=delTermAllowanceChargeId,proto3" json:"del_term_allowance_charge_id,omitempty"`
	DeliveryId                 uint32       `protobuf:"varint,8,opt,name=delivery_id,json=deliveryId,proto3" json:"delivery_id,omitempty"`
	UserId                     string       `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string       `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string       `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DeliveryLocation           *v1.Location `protobuf:"bytes,12,opt,name=delivery_location,json=deliveryLocation,proto3" json:"delivery_location,omitempty"`
}

func (x *CreateDeliveryTermRequest) Reset() {
	*x = CreateDeliveryTermRequest{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeliveryTermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeliveryTermRequest) ProtoMessage() {}

func (x *CreateDeliveryTermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeliveryTermRequest.ProtoReflect.Descriptor instead.
func (*CreateDeliveryTermRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDeliveryTermRequest) GetDelTermId() string {
	if x != nil {
		return x.DelTermId
	}
	return ""
}

func (x *CreateDeliveryTermRequest) GetSpecialTerms() string {
	if x != nil {
		return x.SpecialTerms
	}
	return ""
}

func (x *CreateDeliveryTermRequest) GetLossRiskResponsibilityCode() string {
	if x != nil {
		return x.LossRiskResponsibilityCode
	}
	return ""
}

func (x *CreateDeliveryTermRequest) GetLossRisk() string {
	if x != nil {
		return x.LossRisk
	}
	return ""
}

func (x *CreateDeliveryTermRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateDeliveryTermRequest) GetDeliveryLocationId() uint32 {
	if x != nil {
		return x.DeliveryLocationId
	}
	return 0
}

func (x *CreateDeliveryTermRequest) GetDelTermAllowanceChargeId() uint32 {
	if x != nil {
		return x.DelTermAllowanceChargeId
	}
	return 0
}

func (x *CreateDeliveryTermRequest) GetDeliveryId() uint32 {
	if x != nil {
		return x.DeliveryId
	}
	return 0
}

func (x *CreateDeliveryTermRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDeliveryTermRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDeliveryTermRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateDeliveryTermRequest) GetDeliveryLocation() *v1.Location {
	if x != nil {
		return x.DeliveryLocation
	}
	return nil
}

type CreateDeliveryTermResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryTerm *DeliveryTerm `protobuf:"bytes,1,opt,name=delivery_term,json=deliveryTerm,proto3" json:"delivery_term,omitempty"`
}

func (x *CreateDeliveryTermResponse) Reset() {
	*x = CreateDeliveryTermResponse{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeliveryTermResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeliveryTermResponse) ProtoMessage() {}

func (x *CreateDeliveryTermResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeliveryTermResponse.ProtoReflect.Descriptor instead.
func (*CreateDeliveryTermResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDeliveryTermResponse) GetDeliveryTerm() *DeliveryTerm {
	if x != nil {
		return x.DeliveryTerm
	}
	return nil
}

type Despatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespatchD *DespatchD `protobuf:"bytes,1,opt,name=despatch_d,json=despatchD,proto3" json:"despatch_d,omitempty"`
	DespatchT *DespatchT `protobuf:"bytes,2,opt,name=despatch_t,json=despatchT,proto3" json:"despatch_t,omitempty"`
}

func (x *Despatch) Reset() {
	*x = Despatch{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Despatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Despatch) ProtoMessage() {}

func (x *Despatch) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Despatch.ProtoReflect.Descriptor instead.
func (*Despatch) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{9}
}

func (x *Despatch) GetDespatchD() *DespatchD {
	if x != nil {
		return x.DespatchD
	}
	return nil
}

func (x *Despatch) GetDespatchT() *DespatchT {
	if x != nil {
		return x.DespatchT
	}
	return nil
}

type DespatchD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DespId               string `protobuf:"bytes,2,opt,name=desp_id,json=despId,proto3" json:"desp_id,omitempty"`
	ReleaseId            string `protobuf:"bytes,3,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	Instructions         string `protobuf:"bytes,4,opt,name=instructions,proto3" json:"instructions,omitempty"`
	DespatchAddressId    uint32 `protobuf:"varint,5,opt,name=despatch_address_id,json=despatchAddressId,proto3" json:"despatch_address_id,omitempty"`
	DespatchLocationId   uint32 `protobuf:"varint,6,opt,name=despatch_location_id,json=despatchLocationId,proto3" json:"despatch_location_id,omitempty"`
	DespatchPartyContact uint32 `protobuf:"varint,7,opt,name=despatch_party_contact,json=despatchPartyContact,proto3" json:"despatch_party_contact,omitempty"`
	DespatchPartyId      uint32 `protobuf:"varint,8,opt,name=despatch_party_id,json=despatchPartyId,proto3" json:"despatch_party_id,omitempty"`
	CarrierPartyId       uint32 `protobuf:"varint,9,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	NotifyPartyId        uint32 `protobuf:"varint,10,opt,name=notify_party_id,json=notifyPartyId,proto3" json:"notify_party_id,omitempty"`
}

func (x *DespatchD) Reset() {
	*x = DespatchD{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchD) ProtoMessage() {}

func (x *DespatchD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchD.ProtoReflect.Descriptor instead.
func (*DespatchD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{10}
}

func (x *DespatchD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DespatchD) GetDespId() string {
	if x != nil {
		return x.DespId
	}
	return ""
}

func (x *DespatchD) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *DespatchD) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *DespatchD) GetDespatchAddressId() uint32 {
	if x != nil {
		return x.DespatchAddressId
	}
	return 0
}

func (x *DespatchD) GetDespatchLocationId() uint32 {
	if x != nil {
		return x.DespatchLocationId
	}
	return 0
}

func (x *DespatchD) GetDespatchPartyContact() uint32 {
	if x != nil {
		return x.DespatchPartyContact
	}
	return 0
}

func (x *DespatchD) GetDespatchPartyId() uint32 {
	if x != nil {
		return x.DespatchPartyId
	}
	return 0
}

func (x *DespatchD) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *DespatchD) GetNotifyPartyId() uint32 {
	if x != nil {
		return x.NotifyPartyId
	}
	return 0
}

type DespatchT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedDespatchDate            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=requested_despatch_date,json=requestedDespatchDate,proto3" json:"requested_despatch_date,omitempty"`
	EstimatedDespatchDate            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=estimated_despatch_date,json=estimatedDespatchDate,proto3" json:"estimated_despatch_date,omitempty"`
	ActualDespatchDate               *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=actual_despatch_date,json=actualDespatchDate,proto3" json:"actual_despatch_date,omitempty"`
	GuaranteedDespatchDate           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=guaranteed_despatch_date,json=guaranteedDespatchDate,proto3" json:"guaranteed_despatch_date,omitempty"`
	EstimatedDespatchPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=estimated_despatch_period_start_date,json=estimatedDespatchPeriodStartDate,proto3" json:"estimated_despatch_period_start_date,omitempty"`
	EstimatedDespatchPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=estimated_despatch_period_end_date,json=estimatedDespatchPeriodEndDate,proto3" json:"estimated_despatch_period_end_date,omitempty"`
	RequestedDespatchPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=requested_despatch_period_start_date,json=requestedDespatchPeriodStartDate,proto3" json:"requested_despatch_period_start_date,omitempty"`
	RequestedDespatchPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=requested_despatch_period_end_date,json=requestedDespatchPeriodEndDate,proto3" json:"requested_despatch_period_end_date,omitempty"`
}

func (x *DespatchT) Reset() {
	*x = DespatchT{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespatchT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespatchT) ProtoMessage() {}

func (x *DespatchT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespatchT.ProtoReflect.Descriptor instead.
func (*DespatchT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{11}
}

func (x *DespatchT) GetRequestedDespatchDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDespatchDate
	}
	return nil
}

func (x *DespatchT) GetEstimatedDespatchDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDespatchDate
	}
	return nil
}

func (x *DespatchT) GetActualDespatchDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualDespatchDate
	}
	return nil
}

func (x *DespatchT) GetGuaranteedDespatchDate() *timestamppb.Timestamp {
	if x != nil {
		return x.GuaranteedDespatchDate
	}
	return nil
}

func (x *DespatchT) GetEstimatedDespatchPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDespatchPeriodStartDate
	}
	return nil
}

func (x *DespatchT) GetEstimatedDespatchPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedDespatchPeriodEndDate
	}
	return nil
}

func (x *DespatchT) GetRequestedDespatchPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDespatchPeriodStartDate
	}
	return nil
}

func (x *DespatchT) GetRequestedDespatchPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedDespatchPeriodEndDate
	}
	return nil
}

type CreateDespatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DespId                           string       `protobuf:"bytes,1,opt,name=desp_id,json=despId,proto3" json:"desp_id,omitempty"`
	RequestedDespatchDate            string       `protobuf:"bytes,2,opt,name=requested_despatch_date,json=requestedDespatchDate,proto3" json:"requested_despatch_date,omitempty"`
	EstimatedDespatchDate            string       `protobuf:"bytes,3,opt,name=estimated_despatch_date,json=estimatedDespatchDate,proto3" json:"estimated_despatch_date,omitempty"`
	ActualDespatchDate               string       `protobuf:"bytes,4,opt,name=actual_despatch_date,json=actualDespatchDate,proto3" json:"actual_despatch_date,omitempty"`
	GuaranteedDespatchDate           string       `protobuf:"bytes,5,opt,name=guaranteed_despatch_date,json=guaranteedDespatchDate,proto3" json:"guaranteed_despatch_date,omitempty"`
	ReleaseId                        string       `protobuf:"bytes,6,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	Instructions                     string       `protobuf:"bytes,7,opt,name=instructions,proto3" json:"instructions,omitempty"`
	EstimatedDespatchPeriodStartDate string       `protobuf:"bytes,8,opt,name=estimated_despatch_period_start_date,json=estimatedDespatchPeriodStartDate,proto3" json:"estimated_despatch_period_start_date,omitempty"`
	EstimatedDespatchPeriodEndDate   string       `protobuf:"bytes,9,opt,name=estimated_despatch_period_end_date,json=estimatedDespatchPeriodEndDate,proto3" json:"estimated_despatch_period_end_date,omitempty"`
	RequestedDespatchPeriodStartDate string       `protobuf:"bytes,10,opt,name=requested_despatch_period_start_date,json=requestedDespatchPeriodStartDate,proto3" json:"requested_despatch_period_start_date,omitempty"`
	RequestedDespatchPeriodEndDate   string       `protobuf:"bytes,11,opt,name=requested_despatch_period_end_date,json=requestedDespatchPeriodEndDate,proto3" json:"requested_despatch_period_end_date,omitempty"`
	DespatchAddressId                uint32       `protobuf:"varint,12,opt,name=despatch_address_id,json=despatchAddressId,proto3" json:"despatch_address_id,omitempty"`
	DespatchLocationId               uint32       `protobuf:"varint,13,opt,name=despatch_location_id,json=despatchLocationId,proto3" json:"despatch_location_id,omitempty"`
	DespatchPartyContact             uint32       `protobuf:"varint,14,opt,name=despatch_party_contact,json=despatchPartyContact,proto3" json:"despatch_party_contact,omitempty"`
	DespatchPartyId                  uint32       `protobuf:"varint,15,opt,name=despatch_party_id,json=despatchPartyId,proto3" json:"despatch_party_id,omitempty"`
	CarrierPartyId                   uint32       `protobuf:"varint,16,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	NotifyPartyId                    uint32       `protobuf:"varint,17,opt,name=notify_party_id,json=notifyPartyId,proto3" json:"notify_party_id,omitempty"`
	UserId                           string       `protobuf:"bytes,18,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                        string       `protobuf:"bytes,19,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                        string       `protobuf:"bytes,20,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DespatchAddress                  *v1.Address  `protobuf:"bytes,21,opt,name=despatch_address,json=despatchAddress,proto3" json:"despatch_address,omitempty"`
	DespatchLocation                 *v1.Location `protobuf:"bytes,22,opt,name=despatch_location,json=despatchLocation,proto3" json:"despatch_location,omitempty"`
}

func (x *CreateDespatchRequest) Reset() {
	*x = CreateDespatchRequest{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchRequest) ProtoMessage() {}

func (x *CreateDespatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchRequest.ProtoReflect.Descriptor instead.
func (*CreateDespatchRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDespatchRequest) GetDespId() string {
	if x != nil {
		return x.DespId
	}
	return ""
}

func (x *CreateDespatchRequest) GetRequestedDespatchDate() string {
	if x != nil {
		return x.RequestedDespatchDate
	}
	return ""
}

func (x *CreateDespatchRequest) GetEstimatedDespatchDate() string {
	if x != nil {
		return x.EstimatedDespatchDate
	}
	return ""
}

func (x *CreateDespatchRequest) GetActualDespatchDate() string {
	if x != nil {
		return x.ActualDespatchDate
	}
	return ""
}

func (x *CreateDespatchRequest) GetGuaranteedDespatchDate() string {
	if x != nil {
		return x.GuaranteedDespatchDate
	}
	return ""
}

func (x *CreateDespatchRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *CreateDespatchRequest) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *CreateDespatchRequest) GetEstimatedDespatchPeriodStartDate() string {
	if x != nil {
		return x.EstimatedDespatchPeriodStartDate
	}
	return ""
}

func (x *CreateDespatchRequest) GetEstimatedDespatchPeriodEndDate() string {
	if x != nil {
		return x.EstimatedDespatchPeriodEndDate
	}
	return ""
}

func (x *CreateDespatchRequest) GetRequestedDespatchPeriodStartDate() string {
	if x != nil {
		return x.RequestedDespatchPeriodStartDate
	}
	return ""
}

func (x *CreateDespatchRequest) GetRequestedDespatchPeriodEndDate() string {
	if x != nil {
		return x.RequestedDespatchPeriodEndDate
	}
	return ""
}

func (x *CreateDespatchRequest) GetDespatchAddressId() uint32 {
	if x != nil {
		return x.DespatchAddressId
	}
	return 0
}

func (x *CreateDespatchRequest) GetDespatchLocationId() uint32 {
	if x != nil {
		return x.DespatchLocationId
	}
	return 0
}

func (x *CreateDespatchRequest) GetDespatchPartyContact() uint32 {
	if x != nil {
		return x.DespatchPartyContact
	}
	return 0
}

func (x *CreateDespatchRequest) GetDespatchPartyId() uint32 {
	if x != nil {
		return x.DespatchPartyId
	}
	return 0
}

func (x *CreateDespatchRequest) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *CreateDespatchRequest) GetNotifyPartyId() uint32 {
	if x != nil {
		return x.NotifyPartyId
	}
	return 0
}

func (x *CreateDespatchRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDespatchRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDespatchRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateDespatchRequest) GetDespatchAddress() *v1.Address {
	if x != nil {
		return x.DespatchAddress
	}
	return nil
}

func (x *CreateDespatchRequest) GetDespatchLocation() *v1.Location {
	if x != nil {
		return x.DespatchLocation
	}
	return nil
}

type CreateDespatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Despatch *Despatch `protobuf:"bytes,1,opt,name=despatch,proto3" json:"despatch,omitempty"`
}

func (x *CreateDespatchResponse) Reset() {
	*x = CreateDespatchResponse{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDespatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDespatchResponse) ProtoMessage() {}

func (x *CreateDespatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDespatchResponse.ProtoReflect.Descriptor instead.
func (*CreateDespatchResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{13}
}

func (x *CreateDespatchResponse) GetDespatch() *Despatch {
	if x != nil {
		return x.Despatch
	}
	return nil
}

type Shipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentD *ShipmentD    `protobuf:"bytes,1,opt,name=shipment_d,json=shipmentD,proto3" json:"shipment_d,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Shipment) Reset() {
	*x = Shipment{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shipment) ProtoMessage() {}

func (x *Shipment) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shipment.ProtoReflect.Descriptor instead.
func (*Shipment) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{14}
}

func (x *Shipment) GetShipmentD() *ShipmentD {
	if x != nil {
		return x.ShipmentD
	}
	return nil
}

func (x *Shipment) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Shipment) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ShipmentD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                              []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ShId                               string  `protobuf:"bytes,4,opt,name=sh_id,json=shId,proto3" json:"sh_id,omitempty"`
	ShippingPriorityLevelCode          string  `protobuf:"bytes,5,opt,name=shipping_priority_level_code,json=shippingPriorityLevelCode,proto3" json:"shipping_priority_level_code,omitempty"`
	HandlingCode                       string  `protobuf:"bytes,6,opt,name=handling_code,json=handlingCode,proto3" json:"handling_code,omitempty"`
	HandlingInstructions               string  `protobuf:"bytes,7,opt,name=handling_instructions,json=handlingInstructions,proto3" json:"handling_instructions,omitempty"`
	Information                        string  `protobuf:"bytes,8,opt,name=information,proto3" json:"information,omitempty"`
	GrossWeightMeasure                 float64 `protobuf:"fixed64,9,opt,name=gross_weight_measure,json=grossWeightMeasure,proto3" json:"gross_weight_measure,omitempty"`
	NetWeightMeasure                   float64 `protobuf:"fixed64,10,opt,name=net_weight_measure,json=netWeightMeasure,proto3" json:"net_weight_measure,omitempty"`
	NetNetWeightMeasure                float64 `protobuf:"fixed64,11,opt,name=net_net_weight_measure,json=netNetWeightMeasure,proto3" json:"net_net_weight_measure,omitempty"`
	GrossVolumeMeasure                 float64 `protobuf:"fixed64,12,opt,name=gross_volume_measure,json=grossVolumeMeasure,proto3" json:"gross_volume_measure,omitempty"`
	NetVolumeMeasure                   float64 `protobuf:"fixed64,13,opt,name=net_volume_measure,json=netVolumeMeasure,proto3" json:"net_volume_measure,omitempty"`
	TotalGoodsItemQuantity             int64   `protobuf:"varint,14,opt,name=total_goods_item_quantity,json=totalGoodsItemQuantity,proto3" json:"total_goods_item_quantity,omitempty"`
	TotalTransportHandlingUnitQuantity int64   `protobuf:"varint,15,opt,name=total_transport_handling_unit_quantity,json=totalTransportHandlingUnitQuantity,proto3" json:"total_transport_handling_unit_quantity,omitempty"`
	InsuranceValueAmount               float64 `protobuf:"fixed64,16,opt,name=insurance_value_amount,json=insuranceValueAmount,proto3" json:"insurance_value_amount,omitempty"`
	DeclaredCustomsValueAmount         float64 `protobuf:"fixed64,17,opt,name=declared_customs_value_amount,json=declaredCustomsValueAmount,proto3" json:"declared_customs_value_amount,omitempty"`
	DeclaredForCarriageValueAmount     float64 `protobuf:"fixed64,18,opt,name=declared_for_carriage_value_amount,json=declaredForCarriageValueAmount,proto3" json:"declared_for_carriage_value_amount,omitempty"`
	DeclaredStatisticsValueAmount      float64 `protobuf:"fixed64,19,opt,name=declared_statistics_value_amount,json=declaredStatisticsValueAmount,proto3" json:"declared_statistics_value_amount,omitempty"`
	FreeOnBoardValueAmount             float64 `protobuf:"fixed64,20,opt,name=free_on_board_value_amount,json=freeOnBoardValueAmount,proto3" json:"free_on_board_value_amount,omitempty"`
	SpecialInstructions                string  `protobuf:"bytes,21,opt,name=special_instructions,json=specialInstructions,proto3" json:"special_instructions,omitempty"`
	DeliveryInstructions               string  `protobuf:"bytes,22,opt,name=delivery_instructions,json=deliveryInstructions,proto3" json:"delivery_instructions,omitempty"`
	SplitConsignmentIndicator          bool    `protobuf:"varint,23,opt,name=split_consignment_indicator,json=splitConsignmentIndicator,proto3" json:"split_consignment_indicator,omitempty"`
	ConsignmentQuantity                int64   `protobuf:"varint,24,opt,name=consignment_quantity,json=consignmentQuantity,proto3" json:"consignment_quantity,omitempty"`
	ReturnAddressId                    uint32  `protobuf:"varint,25,opt,name=return_address_id,json=returnAddressId,proto3" json:"return_address_id,omitempty"`
	OriginAddressId                    uint32  `protobuf:"varint,26,opt,name=origin_address_id,json=originAddressId,proto3" json:"origin_address_id,omitempty"`
	FirstArrivalPortLocationId         uint32  `protobuf:"varint,27,opt,name=first_arrival_port_location_id,json=firstArrivalPortLocationId,proto3" json:"first_arrival_port_location_id,omitempty"`
	LastExitPortLocationId             uint32  `protobuf:"varint,28,opt,name=last_exit_port_location_id,json=lastExitPortLocationId,proto3" json:"last_exit_port_location_id,omitempty"`
	ExportCountryIdCode                string  `protobuf:"bytes,29,opt,name=export_country_id_code,json=exportCountryIdCode,proto3" json:"export_country_id_code,omitempty"`
	ExportCountryName                  string  `protobuf:"bytes,30,opt,name=export_country_name,json=exportCountryName,proto3" json:"export_country_name,omitempty"`
}

func (x *ShipmentD) Reset() {
	*x = ShipmentD{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipmentD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentD) ProtoMessage() {}

func (x *ShipmentD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentD.ProtoReflect.Descriptor instead.
func (*ShipmentD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{15}
}

func (x *ShipmentD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShipmentD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ShipmentD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ShipmentD) GetShId() string {
	if x != nil {
		return x.ShId
	}
	return ""
}

func (x *ShipmentD) GetShippingPriorityLevelCode() string {
	if x != nil {
		return x.ShippingPriorityLevelCode
	}
	return ""
}

func (x *ShipmentD) GetHandlingCode() string {
	if x != nil {
		return x.HandlingCode
	}
	return ""
}

func (x *ShipmentD) GetHandlingInstructions() string {
	if x != nil {
		return x.HandlingInstructions
	}
	return ""
}

func (x *ShipmentD) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *ShipmentD) GetGrossWeightMeasure() float64 {
	if x != nil {
		return x.GrossWeightMeasure
	}
	return 0
}

func (x *ShipmentD) GetNetWeightMeasure() float64 {
	if x != nil {
		return x.NetWeightMeasure
	}
	return 0
}

func (x *ShipmentD) GetNetNetWeightMeasure() float64 {
	if x != nil {
		return x.NetNetWeightMeasure
	}
	return 0
}

func (x *ShipmentD) GetGrossVolumeMeasure() float64 {
	if x != nil {
		return x.GrossVolumeMeasure
	}
	return 0
}

func (x *ShipmentD) GetNetVolumeMeasure() float64 {
	if x != nil {
		return x.NetVolumeMeasure
	}
	return 0
}

func (x *ShipmentD) GetTotalGoodsItemQuantity() int64 {
	if x != nil {
		return x.TotalGoodsItemQuantity
	}
	return 0
}

func (x *ShipmentD) GetTotalTransportHandlingUnitQuantity() int64 {
	if x != nil {
		return x.TotalTransportHandlingUnitQuantity
	}
	return 0
}

func (x *ShipmentD) GetInsuranceValueAmount() float64 {
	if x != nil {
		return x.InsuranceValueAmount
	}
	return 0
}

func (x *ShipmentD) GetDeclaredCustomsValueAmount() float64 {
	if x != nil {
		return x.DeclaredCustomsValueAmount
	}
	return 0
}

func (x *ShipmentD) GetDeclaredForCarriageValueAmount() float64 {
	if x != nil {
		return x.DeclaredForCarriageValueAmount
	}
	return 0
}

func (x *ShipmentD) GetDeclaredStatisticsValueAmount() float64 {
	if x != nil {
		return x.DeclaredStatisticsValueAmount
	}
	return 0
}

func (x *ShipmentD) GetFreeOnBoardValueAmount() float64 {
	if x != nil {
		return x.FreeOnBoardValueAmount
	}
	return 0
}

func (x *ShipmentD) GetSpecialInstructions() string {
	if x != nil {
		return x.SpecialInstructions
	}
	return ""
}

func (x *ShipmentD) GetDeliveryInstructions() string {
	if x != nil {
		return x.DeliveryInstructions
	}
	return ""
}

func (x *ShipmentD) GetSplitConsignmentIndicator() bool {
	if x != nil {
		return x.SplitConsignmentIndicator
	}
	return false
}

func (x *ShipmentD) GetConsignmentQuantity() int64 {
	if x != nil {
		return x.ConsignmentQuantity
	}
	return 0
}

func (x *ShipmentD) GetReturnAddressId() uint32 {
	if x != nil {
		return x.ReturnAddressId
	}
	return 0
}

func (x *ShipmentD) GetOriginAddressId() uint32 {
	if x != nil {
		return x.OriginAddressId
	}
	return 0
}

func (x *ShipmentD) GetFirstArrivalPortLocationId() uint32 {
	if x != nil {
		return x.FirstArrivalPortLocationId
	}
	return 0
}

func (x *ShipmentD) GetLastExitPortLocationId() uint32 {
	if x != nil {
		return x.LastExitPortLocationId
	}
	return 0
}

func (x *ShipmentD) GetExportCountryIdCode() string {
	if x != nil {
		return x.ExportCountryIdCode
	}
	return ""
}

func (x *ShipmentD) GetExportCountryName() string {
	if x != nil {
		return x.ExportCountryName
	}
	return ""
}

type CreateShipmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShId                               string       `protobuf:"bytes,1,opt,name=sh_id,json=shId,proto3" json:"sh_id,omitempty"`
	ShippingPriorityLevelCode          string       `protobuf:"bytes,2,opt,name=shipping_priority_level_code,json=shippingPriorityLevelCode,proto3" json:"shipping_priority_level_code,omitempty"`
	HandlingCode                       string       `protobuf:"bytes,3,opt,name=handling_code,json=handlingCode,proto3" json:"handling_code,omitempty"`
	HandlingInstructions               string       `protobuf:"bytes,4,opt,name=handling_instructions,json=handlingInstructions,proto3" json:"handling_instructions,omitempty"`
	Information                        string       `protobuf:"bytes,5,opt,name=information,proto3" json:"information,omitempty"`
	GrossWeightMeasure                 float64      `protobuf:"fixed64,6,opt,name=gross_weight_measure,json=grossWeightMeasure,proto3" json:"gross_weight_measure,omitempty"`
	NetWeightMeasure                   float64      `protobuf:"fixed64,7,opt,name=net_weight_measure,json=netWeightMeasure,proto3" json:"net_weight_measure,omitempty"`
	NetNetWeightMeasure                float64      `protobuf:"fixed64,8,opt,name=net_net_weight_measure,json=netNetWeightMeasure,proto3" json:"net_net_weight_measure,omitempty"`
	GrossVolumeMeasure                 float64      `protobuf:"fixed64,9,opt,name=gross_volume_measure,json=grossVolumeMeasure,proto3" json:"gross_volume_measure,omitempty"`
	NetVolumeMeasure                   float64      `protobuf:"fixed64,10,opt,name=net_volume_measure,json=netVolumeMeasure,proto3" json:"net_volume_measure,omitempty"`
	TotalGoodsItemQuantity             int64        `protobuf:"varint,11,opt,name=total_goods_item_quantity,json=totalGoodsItemQuantity,proto3" json:"total_goods_item_quantity,omitempty"`
	TotalTransportHandlingUnitQuantity int64        `protobuf:"varint,12,opt,name=total_transport_handling_unit_quantity,json=totalTransportHandlingUnitQuantity,proto3" json:"total_transport_handling_unit_quantity,omitempty"`
	InsuranceValueAmount               float64      `protobuf:"fixed64,13,opt,name=insurance_value_amount,json=insuranceValueAmount,proto3" json:"insurance_value_amount,omitempty"`
	DeclaredCustomsValueAmount         float64      `protobuf:"fixed64,14,opt,name=declared_customs_value_amount,json=declaredCustomsValueAmount,proto3" json:"declared_customs_value_amount,omitempty"`
	DeclaredForCarriageValueAmount     float64      `protobuf:"fixed64,15,opt,name=declared_for_carriage_value_amount,json=declaredForCarriageValueAmount,proto3" json:"declared_for_carriage_value_amount,omitempty"`
	DeclaredStatisticsValueAmount      float64      `protobuf:"fixed64,16,opt,name=declared_statistics_value_amount,json=declaredStatisticsValueAmount,proto3" json:"declared_statistics_value_amount,omitempty"`
	FreeOnBoardValueAmount             float64      `protobuf:"fixed64,17,opt,name=free_on_board_value_amount,json=freeOnBoardValueAmount,proto3" json:"free_on_board_value_amount,omitempty"`
	SpecialInstructions                string       `protobuf:"bytes,18,opt,name=special_instructions,json=specialInstructions,proto3" json:"special_instructions,omitempty"`
	DeliveryInstructions               string       `protobuf:"bytes,19,opt,name=delivery_instructions,json=deliveryInstructions,proto3" json:"delivery_instructions,omitempty"`
	SplitConsignmentIndicator          bool         `protobuf:"varint,20,opt,name=split_consignment_indicator,json=splitConsignmentIndicator,proto3" json:"split_consignment_indicator,omitempty"`
	ConsignmentQuantity                int64        `protobuf:"varint,21,opt,name=consignment_quantity,json=consignmentQuantity,proto3" json:"consignment_quantity,omitempty"`
	ReturnAddressId                    uint32       `protobuf:"varint,22,opt,name=return_address_id,json=returnAddressId,proto3" json:"return_address_id,omitempty"`
	OriginAddressId                    uint32       `protobuf:"varint,23,opt,name=origin_address_id,json=originAddressId,proto3" json:"origin_address_id,omitempty"`
	FirstArrivalPortLocationId         uint32       `protobuf:"varint,24,opt,name=first_arrival_port_location_id,json=firstArrivalPortLocationId,proto3" json:"first_arrival_port_location_id,omitempty"`
	LastExitPortLocationId             uint32       `protobuf:"varint,25,opt,name=last_exit_port_location_id,json=lastExitPortLocationId,proto3" json:"last_exit_port_location_id,omitempty"`
	ExportCountryIdCode                string       `protobuf:"bytes,26,opt,name=export_country_id_code,json=exportCountryIdCode,proto3" json:"export_country_id_code,omitempty"`
	ExportCountryName                  string       `protobuf:"bytes,27,opt,name=export_country_name,json=exportCountryName,proto3" json:"export_country_name,omitempty"`
	UserId                             string       `protobuf:"bytes,28,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                          string       `protobuf:"bytes,29,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                          string       `protobuf:"bytes,30,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ReturnAddress                      *v1.Address  `protobuf:"bytes,31,opt,name=return_address,json=returnAddress,proto3" json:"return_address,omitempty"`
	OriginalAddress                    *v1.Address  `protobuf:"bytes,32,opt,name=original_address,json=originalAddress,proto3" json:"original_address,omitempty"`
	FirstArrivalPortLocation           *v1.Location `protobuf:"bytes,33,opt,name=first_arrival_port_location,json=firstArrivalPortLocation,proto3" json:"first_arrival_port_location,omitempty"`
	LastExitPortLocation               *v1.Location `protobuf:"bytes,34,opt,name=last_exit_port_location,json=lastExitPortLocation,proto3" json:"last_exit_port_location,omitempty"`
}

func (x *CreateShipmentRequest) Reset() {
	*x = CreateShipmentRequest{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentRequest) ProtoMessage() {}

func (x *CreateShipmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentRequest.ProtoReflect.Descriptor instead.
func (*CreateShipmentRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{16}
}

func (x *CreateShipmentRequest) GetShId() string {
	if x != nil {
		return x.ShId
	}
	return ""
}

func (x *CreateShipmentRequest) GetShippingPriorityLevelCode() string {
	if x != nil {
		return x.ShippingPriorityLevelCode
	}
	return ""
}

func (x *CreateShipmentRequest) GetHandlingCode() string {
	if x != nil {
		return x.HandlingCode
	}
	return ""
}

func (x *CreateShipmentRequest) GetHandlingInstructions() string {
	if x != nil {
		return x.HandlingInstructions
	}
	return ""
}

func (x *CreateShipmentRequest) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *CreateShipmentRequest) GetGrossWeightMeasure() float64 {
	if x != nil {
		return x.GrossWeightMeasure
	}
	return 0
}

func (x *CreateShipmentRequest) GetNetWeightMeasure() float64 {
	if x != nil {
		return x.NetWeightMeasure
	}
	return 0
}

func (x *CreateShipmentRequest) GetNetNetWeightMeasure() float64 {
	if x != nil {
		return x.NetNetWeightMeasure
	}
	return 0
}

func (x *CreateShipmentRequest) GetGrossVolumeMeasure() float64 {
	if x != nil {
		return x.GrossVolumeMeasure
	}
	return 0
}

func (x *CreateShipmentRequest) GetNetVolumeMeasure() float64 {
	if x != nil {
		return x.NetVolumeMeasure
	}
	return 0
}

func (x *CreateShipmentRequest) GetTotalGoodsItemQuantity() int64 {
	if x != nil {
		return x.TotalGoodsItemQuantity
	}
	return 0
}

func (x *CreateShipmentRequest) GetTotalTransportHandlingUnitQuantity() int64 {
	if x != nil {
		return x.TotalTransportHandlingUnitQuantity
	}
	return 0
}

func (x *CreateShipmentRequest) GetInsuranceValueAmount() float64 {
	if x != nil {
		return x.InsuranceValueAmount
	}
	return 0
}

func (x *CreateShipmentRequest) GetDeclaredCustomsValueAmount() float64 {
	if x != nil {
		return x.DeclaredCustomsValueAmount
	}
	return 0
}

func (x *CreateShipmentRequest) GetDeclaredForCarriageValueAmount() float64 {
	if x != nil {
		return x.DeclaredForCarriageValueAmount
	}
	return 0
}

func (x *CreateShipmentRequest) GetDeclaredStatisticsValueAmount() float64 {
	if x != nil {
		return x.DeclaredStatisticsValueAmount
	}
	return 0
}

func (x *CreateShipmentRequest) GetFreeOnBoardValueAmount() float64 {
	if x != nil {
		return x.FreeOnBoardValueAmount
	}
	return 0
}

func (x *CreateShipmentRequest) GetSpecialInstructions() string {
	if x != nil {
		return x.SpecialInstructions
	}
	return ""
}

func (x *CreateShipmentRequest) GetDeliveryInstructions() string {
	if x != nil {
		return x.DeliveryInstructions
	}
	return ""
}

func (x *CreateShipmentRequest) GetSplitConsignmentIndicator() bool {
	if x != nil {
		return x.SplitConsignmentIndicator
	}
	return false
}

func (x *CreateShipmentRequest) GetConsignmentQuantity() int64 {
	if x != nil {
		return x.ConsignmentQuantity
	}
	return 0
}

func (x *CreateShipmentRequest) GetReturnAddressId() uint32 {
	if x != nil {
		return x.ReturnAddressId
	}
	return 0
}

func (x *CreateShipmentRequest) GetOriginAddressId() uint32 {
	if x != nil {
		return x.OriginAddressId
	}
	return 0
}

func (x *CreateShipmentRequest) GetFirstArrivalPortLocationId() uint32 {
	if x != nil {
		return x.FirstArrivalPortLocationId
	}
	return 0
}

func (x *CreateShipmentRequest) GetLastExitPortLocationId() uint32 {
	if x != nil {
		return x.LastExitPortLocationId
	}
	return 0
}

func (x *CreateShipmentRequest) GetExportCountryIdCode() string {
	if x != nil {
		return x.ExportCountryIdCode
	}
	return ""
}

func (x *CreateShipmentRequest) GetExportCountryName() string {
	if x != nil {
		return x.ExportCountryName
	}
	return ""
}

func (x *CreateShipmentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateShipmentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateShipmentRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateShipmentRequest) GetReturnAddress() *v1.Address {
	if x != nil {
		return x.ReturnAddress
	}
	return nil
}

func (x *CreateShipmentRequest) GetOriginalAddress() *v1.Address {
	if x != nil {
		return x.OriginalAddress
	}
	return nil
}

func (x *CreateShipmentRequest) GetFirstArrivalPortLocation() *v1.Location {
	if x != nil {
		return x.FirstArrivalPortLocation
	}
	return nil
}

func (x *CreateShipmentRequest) GetLastExitPortLocation() *v1.Location {
	if x != nil {
		return x.LastExitPortLocation
	}
	return nil
}

type CreateShipmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shipment *Shipment `protobuf:"bytes,1,opt,name=shipment,proto3" json:"shipment,omitempty"`
}

func (x *CreateShipmentResponse) Reset() {
	*x = CreateShipmentResponse{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentResponse) ProtoMessage() {}

func (x *CreateShipmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentResponse.ProtoReflect.Descriptor instead.
func (*CreateShipmentResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{17}
}

func (x *CreateShipmentResponse) GetShipment() *Shipment {
	if x != nil {
		return x.Shipment
	}
	return nil
}

type AllowanceCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AcId                      string  `protobuf:"bytes,2,opt,name=ac_id,json=acId,proto3" json:"ac_id,omitempty"`
	ChargeIndicator           bool    `protobuf:"varint,3,opt,name=charge_indicator,json=chargeIndicator,proto3" json:"charge_indicator,omitempty"`
	AllowanceChargeReasonCode string  `protobuf:"bytes,4,opt,name=allowance_charge_reason_code,json=allowanceChargeReasonCode,proto3" json:"allowance_charge_reason_code,omitempty"`
	AllowanceChargeReason     string  `protobuf:"bytes,5,opt,name=allowance_charge_reason,json=allowanceChargeReason,proto3" json:"allowance_charge_reason,omitempty"`
	MultiplierFactorNumeric   uint32  `protobuf:"varint,6,opt,name=multiplier_factor_numeric,json=multiplierFactorNumeric,proto3" json:"multiplier_factor_numeric,omitempty"`
	PrepaidIndicator          bool    `protobuf:"varint,7,opt,name=prepaid_indicator,json=prepaidIndicator,proto3" json:"prepaid_indicator,omitempty"`
	SequenceNumeric           uint32  `protobuf:"varint,8,opt,name=sequence_numeric,json=sequenceNumeric,proto3" json:"sequence_numeric,omitempty"`
	Amount                    float64 `protobuf:"fixed64,9,opt,name=amount,proto3" json:"amount,omitempty"`
	BaseAmount                float64 `protobuf:"fixed64,10,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	PerUnitAmount             float64 `protobuf:"fixed64,11,opt,name=per_unit_amount,json=perUnitAmount,proto3" json:"per_unit_amount,omitempty"`
	TaxCategoryId             uint32  `protobuf:"varint,12,opt,name=tax_category_id,json=taxCategoryId,proto3" json:"tax_category_id,omitempty"`
	TaxTotalId                uint32  `protobuf:"varint,13,opt,name=tax_total_id,json=taxTotalId,proto3" json:"tax_total_id,omitempty"`
}

func (x *AllowanceCharge) Reset() {
	*x = AllowanceCharge{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowanceCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowanceCharge) ProtoMessage() {}

func (x *AllowanceCharge) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowanceCharge.ProtoReflect.Descriptor instead.
func (*AllowanceCharge) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{18}
}

func (x *AllowanceCharge) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AllowanceCharge) GetAcId() string {
	if x != nil {
		return x.AcId
	}
	return ""
}

func (x *AllowanceCharge) GetChargeIndicator() bool {
	if x != nil {
		return x.ChargeIndicator
	}
	return false
}

func (x *AllowanceCharge) GetAllowanceChargeReasonCode() string {
	if x != nil {
		return x.AllowanceChargeReasonCode
	}
	return ""
}

func (x *AllowanceCharge) GetAllowanceChargeReason() string {
	if x != nil {
		return x.AllowanceChargeReason
	}
	return ""
}

func (x *AllowanceCharge) GetMultiplierFactorNumeric() uint32 {
	if x != nil {
		return x.MultiplierFactorNumeric
	}
	return 0
}

func (x *AllowanceCharge) GetPrepaidIndicator() bool {
	if x != nil {
		return x.PrepaidIndicator
	}
	return false
}

func (x *AllowanceCharge) GetSequenceNumeric() uint32 {
	if x != nil {
		return x.SequenceNumeric
	}
	return 0
}

func (x *AllowanceCharge) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AllowanceCharge) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *AllowanceCharge) GetPerUnitAmount() float64 {
	if x != nil {
		return x.PerUnitAmount
	}
	return 0
}

func (x *AllowanceCharge) GetTaxCategoryId() uint32 {
	if x != nil {
		return x.TaxCategoryId
	}
	return 0
}

func (x *AllowanceCharge) GetTaxTotalId() uint32 {
	if x != nil {
		return x.TaxTotalId
	}
	return 0
}

type CreateAllowanceChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcId                      string  `protobuf:"bytes,1,opt,name=ac_id,json=acId,proto3" json:"ac_id,omitempty"`
	ChargeIndicator           bool    `protobuf:"varint,2,opt,name=charge_indicator,json=chargeIndicator,proto3" json:"charge_indicator,omitempty"`
	AllowanceChargeReasonCode string  `protobuf:"bytes,3,opt,name=allowance_charge_reason_code,json=allowanceChargeReasonCode,proto3" json:"allowance_charge_reason_code,omitempty"`
	AllowanceChargeReason     string  `protobuf:"bytes,4,opt,name=allowance_charge_reason,json=allowanceChargeReason,proto3" json:"allowance_charge_reason,omitempty"`
	MultiplierFactorNumeric   uint32  `protobuf:"varint,5,opt,name=multiplier_factor_numeric,json=multiplierFactorNumeric,proto3" json:"multiplier_factor_numeric,omitempty"`
	PrepaidIndicator          bool    `protobuf:"varint,6,opt,name=prepaid_indicator,json=prepaidIndicator,proto3" json:"prepaid_indicator,omitempty"`
	SequenceNumeric           uint32  `protobuf:"varint,7,opt,name=sequence_numeric,json=sequenceNumeric,proto3" json:"sequence_numeric,omitempty"`
	Amount                    float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	BaseAmount                float64 `protobuf:"fixed64,9,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	PerUnitAmount             float64 `protobuf:"fixed64,10,opt,name=per_unit_amount,json=perUnitAmount,proto3" json:"per_unit_amount,omitempty"`
	TaxCategoryId             uint32  `protobuf:"varint,11,opt,name=tax_category_id,json=taxCategoryId,proto3" json:"tax_category_id,omitempty"`
	TaxTotalId                uint32  `protobuf:"varint,12,opt,name=tax_total_id,json=taxTotalId,proto3" json:"tax_total_id,omitempty"`
	UserId                    string  `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string  `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string  `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateAllowanceChargeRequest) Reset() {
	*x = CreateAllowanceChargeRequest{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAllowanceChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAllowanceChargeRequest) ProtoMessage() {}

func (x *CreateAllowanceChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAllowanceChargeRequest.ProtoReflect.Descriptor instead.
func (*CreateAllowanceChargeRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{19}
}

func (x *CreateAllowanceChargeRequest) GetAcId() string {
	if x != nil {
		return x.AcId
	}
	return ""
}

func (x *CreateAllowanceChargeRequest) GetChargeIndicator() bool {
	if x != nil {
		return x.ChargeIndicator
	}
	return false
}

func (x *CreateAllowanceChargeRequest) GetAllowanceChargeReasonCode() string {
	if x != nil {
		return x.AllowanceChargeReasonCode
	}
	return ""
}

func (x *CreateAllowanceChargeRequest) GetAllowanceChargeReason() string {
	if x != nil {
		return x.AllowanceChargeReason
	}
	return ""
}

func (x *CreateAllowanceChargeRequest) GetMultiplierFactorNumeric() uint32 {
	if x != nil {
		return x.MultiplierFactorNumeric
	}
	return 0
}

func (x *CreateAllowanceChargeRequest) GetPrepaidIndicator() bool {
	if x != nil {
		return x.PrepaidIndicator
	}
	return false
}

func (x *CreateAllowanceChargeRequest) GetSequenceNumeric() uint32 {
	if x != nil {
		return x.SequenceNumeric
	}
	return 0
}

func (x *CreateAllowanceChargeRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateAllowanceChargeRequest) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *CreateAllowanceChargeRequest) GetPerUnitAmount() float64 {
	if x != nil {
		return x.PerUnitAmount
	}
	return 0
}

func (x *CreateAllowanceChargeRequest) GetTaxCategoryId() uint32 {
	if x != nil {
		return x.TaxCategoryId
	}
	return 0
}

func (x *CreateAllowanceChargeRequest) GetTaxTotalId() uint32 {
	if x != nil {
		return x.TaxTotalId
	}
	return 0
}

func (x *CreateAllowanceChargeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateAllowanceChargeRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateAllowanceChargeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateAllowanceChargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowanceCharge *AllowanceCharge `protobuf:"bytes,1,opt,name=allowance_charge,json=allowanceCharge,proto3" json:"allowance_charge,omitempty"`
}

func (x *CreateAllowanceChargeResponse) Reset() {
	*x = CreateAllowanceChargeResponse{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAllowanceChargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAllowanceChargeResponse) ProtoMessage() {}

func (x *CreateAllowanceChargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAllowanceChargeResponse.ProtoReflect.Descriptor instead.
func (*CreateAllowanceChargeResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{20}
}

func (x *CreateAllowanceChargeResponse) GetAllowanceCharge() *AllowanceCharge {
	if x != nil {
		return x.AllowanceCharge
	}
	return nil
}

type BillOfLading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillOfLadingD *BillOfLadingD `protobuf:"bytes,1,opt,name=bill_of_lading_d,json=billOfLadingD,proto3" json:"bill_of_lading_d,omitempty"`
	BillOfLadingT *BillOfLadingT `protobuf:"bytes,2,opt,name=bill_of_lading_t,json=billOfLadingT,proto3" json:"bill_of_lading_t,omitempty"`
	CrUpdUser     *v1.CrUpdUser  `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime     *v1.CrUpdTime  `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *BillOfLading) Reset() {
	*x = BillOfLading{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillOfLading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillOfLading) ProtoMessage() {}

func (x *BillOfLading) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillOfLading.ProtoReflect.Descriptor instead.
func (*BillOfLading) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{21}
}

func (x *BillOfLading) GetBillOfLadingD() *BillOfLadingD {
	if x != nil {
		return x.BillOfLadingD
	}
	return nil
}

func (x *BillOfLading) GetBillOfLadingT() *BillOfLadingT {
	if x != nil {
		return x.BillOfLadingT
	}
	return nil
}

func (x *BillOfLading) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *BillOfLading) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type BillOfLadingD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                      uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                                   []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                     string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	BillOfLadingId                          string  `protobuf:"bytes,4,opt,name=bill_of_lading_id,json=billOfLadingId,proto3" json:"bill_of_lading_id,omitempty"`
	CarrierAssignedId                       string  `protobuf:"bytes,5,opt,name=carrier_assigned_id,json=carrierAssignedId,proto3" json:"carrier_assigned_id,omitempty"`
	Name1                                   string  `protobuf:"bytes,6,opt,name=name1,proto3" json:"name1,omitempty"`
	Description                             string  `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Note                                    string  `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	DocumentStatusCode                      string  `protobuf:"bytes,9,opt,name=document_status_code,json=documentStatusCode,proto3" json:"document_status_code,omitempty"`
	ShippingOrderId                         string  `protobuf:"bytes,10,opt,name=shipping_order_id,json=shippingOrderId,proto3" json:"shipping_order_id,omitempty"`
	ToOrderIndicator                        bool    `protobuf:"varint,11,opt,name=to_order_indicator,json=toOrderIndicator,proto3" json:"to_order_indicator,omitempty"`
	AdValoremIndicator                      bool    `protobuf:"varint,12,opt,name=ad_valorem_indicator,json=adValoremIndicator,proto3" json:"ad_valorem_indicator,omitempty"`
	DeclaredCarriageValueAmount             float64 `protobuf:"fixed64,13,opt,name=declared_carriage_value_amount,json=declaredCarriageValueAmount,proto3" json:"declared_carriage_value_amount,omitempty"`
	DeclaredCarriageValueAmountCurrencyCode string  `protobuf:"bytes,14,opt,name=declared_carriage_value_amount_currency_code,json=declaredCarriageValueAmountCurrencyCode,proto3" json:"declared_carriage_value_amount_currency_code,omitempty"`
	OtherInstruction                        string  `protobuf:"bytes,15,opt,name=other_instruction,json=otherInstruction,proto3" json:"other_instruction,omitempty"`
	ConsignorPartyId                        uint32  `protobuf:"varint,16,opt,name=consignor_party_id,json=consignorPartyId,proto3" json:"consignor_party_id,omitempty"`
	CarrierPartyId                          uint32  `protobuf:"varint,17,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	FreightForwarderPartyId                 uint32  `protobuf:"varint,18,opt,name=freight_forwarder_party_id,json=freightForwarderPartyId,proto3" json:"freight_forwarder_party_id,omitempty"`
	ShipmentId                              uint32  `protobuf:"varint,19,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
}

func (x *BillOfLadingD) Reset() {
	*x = BillOfLadingD{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillOfLadingD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillOfLadingD) ProtoMessage() {}

func (x *BillOfLadingD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillOfLadingD.ProtoReflect.Descriptor instead.
func (*BillOfLadingD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{22}
}

func (x *BillOfLadingD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BillOfLadingD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *BillOfLadingD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *BillOfLadingD) GetBillOfLadingId() string {
	if x != nil {
		return x.BillOfLadingId
	}
	return ""
}

func (x *BillOfLadingD) GetCarrierAssignedId() string {
	if x != nil {
		return x.CarrierAssignedId
	}
	return ""
}

func (x *BillOfLadingD) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *BillOfLadingD) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BillOfLadingD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *BillOfLadingD) GetDocumentStatusCode() string {
	if x != nil {
		return x.DocumentStatusCode
	}
	return ""
}

func (x *BillOfLadingD) GetShippingOrderId() string {
	if x != nil {
		return x.ShippingOrderId
	}
	return ""
}

func (x *BillOfLadingD) GetToOrderIndicator() bool {
	if x != nil {
		return x.ToOrderIndicator
	}
	return false
}

func (x *BillOfLadingD) GetAdValoremIndicator() bool {
	if x != nil {
		return x.AdValoremIndicator
	}
	return false
}

func (x *BillOfLadingD) GetDeclaredCarriageValueAmount() float64 {
	if x != nil {
		return x.DeclaredCarriageValueAmount
	}
	return 0
}

func (x *BillOfLadingD) GetDeclaredCarriageValueAmountCurrencyCode() string {
	if x != nil {
		return x.DeclaredCarriageValueAmountCurrencyCode
	}
	return ""
}

func (x *BillOfLadingD) GetOtherInstruction() string {
	if x != nil {
		return x.OtherInstruction
	}
	return ""
}

func (x *BillOfLadingD) GetConsignorPartyId() uint32 {
	if x != nil {
		return x.ConsignorPartyId
	}
	return 0
}

func (x *BillOfLadingD) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *BillOfLadingD) GetFreightForwarderPartyId() uint32 {
	if x != nil {
		return x.FreightForwarderPartyId
	}
	return 0
}

func (x *BillOfLadingD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

type BillOfLadingT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
}

func (x *BillOfLadingT) Reset() {
	*x = BillOfLadingT{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillOfLadingT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillOfLadingT) ProtoMessage() {}

func (x *BillOfLadingT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillOfLadingT.ProtoReflect.Descriptor instead.
func (*BillOfLadingT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{23}
}

func (x *BillOfLadingT) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

type CreateBillOfLadingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillOfLadingId                          string  `protobuf:"bytes,1,opt,name=bill_of_lading_id,json=billOfLadingId,proto3" json:"bill_of_lading_id,omitempty"`
	CarrierAssignedId                       string  `protobuf:"bytes,2,opt,name=carrier_assigned_id,json=carrierAssignedId,proto3" json:"carrier_assigned_id,omitempty"`
	IssueDate                               string  `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	Name1                                   string  `protobuf:"bytes,4,opt,name=name1,proto3" json:"name1,omitempty"`
	Description                             string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Note                                    string  `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	DocumentStatusCode                      string  `protobuf:"bytes,7,opt,name=document_status_code,json=documentStatusCode,proto3" json:"document_status_code,omitempty"`
	ShippingOrderId                         string  `protobuf:"bytes,8,opt,name=shipping_order_id,json=shippingOrderId,proto3" json:"shipping_order_id,omitempty"`
	ToOrderIndicator                        bool    `protobuf:"varint,9,opt,name=to_order_indicator,json=toOrderIndicator,proto3" json:"to_order_indicator,omitempty"`
	AdValoremIndicator                      bool    `protobuf:"varint,10,opt,name=ad_valorem_indicator,json=adValoremIndicator,proto3" json:"ad_valorem_indicator,omitempty"`
	DeclaredCarriageValueAmount             float64 `protobuf:"fixed64,11,opt,name=declared_carriage_value_amount,json=declaredCarriageValueAmount,proto3" json:"declared_carriage_value_amount,omitempty"`
	DeclaredCarriageValueAmountCurrencyCode string  `protobuf:"bytes,12,opt,name=declared_carriage_value_amount_currency_code,json=declaredCarriageValueAmountCurrencyCode,proto3" json:"declared_carriage_value_amount_currency_code,omitempty"`
	OtherInstruction                        string  `protobuf:"bytes,13,opt,name=other_instruction,json=otherInstruction,proto3" json:"other_instruction,omitempty"`
	ConsignorPartyId                        uint32  `protobuf:"varint,14,opt,name=consignor_party_id,json=consignorPartyId,proto3" json:"consignor_party_id,omitempty"`
	CarrierPartyId                          uint32  `protobuf:"varint,15,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	FreightForwarderPartyId                 uint32  `protobuf:"varint,16,opt,name=freight_forwarder_party_id,json=freightForwarderPartyId,proto3" json:"freight_forwarder_party_id,omitempty"`
	ShipmentId                              uint32  `protobuf:"varint,17,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	UserId                                  string  `protobuf:"bytes,18,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                               string  `protobuf:"bytes,19,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                               string  `protobuf:"bytes,20,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateBillOfLadingRequest) Reset() {
	*x = CreateBillOfLadingRequest{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBillOfLadingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBillOfLadingRequest) ProtoMessage() {}

func (x *CreateBillOfLadingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBillOfLadingRequest.ProtoReflect.Descriptor instead.
func (*CreateBillOfLadingRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{24}
}

func (x *CreateBillOfLadingRequest) GetBillOfLadingId() string {
	if x != nil {
		return x.BillOfLadingId
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetCarrierAssignedId() string {
	if x != nil {
		return x.CarrierAssignedId
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetDocumentStatusCode() string {
	if x != nil {
		return x.DocumentStatusCode
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetShippingOrderId() string {
	if x != nil {
		return x.ShippingOrderId
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetToOrderIndicator() bool {
	if x != nil {
		return x.ToOrderIndicator
	}
	return false
}

func (x *CreateBillOfLadingRequest) GetAdValoremIndicator() bool {
	if x != nil {
		return x.AdValoremIndicator
	}
	return false
}

func (x *CreateBillOfLadingRequest) GetDeclaredCarriageValueAmount() float64 {
	if x != nil {
		return x.DeclaredCarriageValueAmount
	}
	return 0
}

func (x *CreateBillOfLadingRequest) GetDeclaredCarriageValueAmountCurrencyCode() string {
	if x != nil {
		return x.DeclaredCarriageValueAmountCurrencyCode
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetOtherInstruction() string {
	if x != nil {
		return x.OtherInstruction
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetConsignorPartyId() uint32 {
	if x != nil {
		return x.ConsignorPartyId
	}
	return 0
}

func (x *CreateBillOfLadingRequest) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *CreateBillOfLadingRequest) GetFreightForwarderPartyId() uint32 {
	if x != nil {
		return x.FreightForwarderPartyId
	}
	return 0
}

func (x *CreateBillOfLadingRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateBillOfLadingRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateBillOfLadingRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateBillOfLadingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillOfLading *BillOfLading `protobuf:"bytes,1,opt,name=bill_of_lading,json=billOfLading,proto3" json:"bill_of_lading,omitempty"`
}

func (x *CreateBillOfLadingResponse) Reset() {
	*x = CreateBillOfLadingResponse{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBillOfLadingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBillOfLadingResponse) ProtoMessage() {}

func (x *CreateBillOfLadingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBillOfLadingResponse.ProtoReflect.Descriptor instead.
func (*CreateBillOfLadingResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{25}
}

func (x *CreateBillOfLadingResponse) GetBillOfLading() *BillOfLading {
	if x != nil {
		return x.BillOfLading
	}
	return nil
}

type Waybill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaybillD  *WaybillD     `protobuf:"bytes,1,opt,name=waybill_d,json=waybillD,proto3" json:"waybill_d,omitempty"`
	WaybillT  *WaybillT     `protobuf:"bytes,2,opt,name=waybill_t,json=waybillT,proto3" json:"waybill_t,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Waybill) Reset() {
	*x = Waybill{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Waybill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waybill) ProtoMessage() {}

func (x *Waybill) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waybill.ProtoReflect.Descriptor instead.
func (*Waybill) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{26}
}

func (x *Waybill) GetWaybillD() *WaybillD {
	if x != nil {
		return x.WaybillD
	}
	return nil
}

func (x *Waybill) GetWaybillT() *WaybillT {
	if x != nil {
		return x.WaybillT
	}
	return nil
}

func (x *Waybill) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Waybill) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type WaybillD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                      uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                                   []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                     string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	WaybillId                               string  `protobuf:"bytes,4,opt,name=waybill_id,json=waybillId,proto3" json:"waybill_id,omitempty"`
	CarrierAssignedId                       string  `protobuf:"bytes,5,opt,name=carrier_assigned_id,json=carrierAssignedId,proto3" json:"carrier_assigned_id,omitempty"`
	Name1                                   string  `protobuf:"bytes,6,opt,name=name1,proto3" json:"name1,omitempty"`
	Description                             string  `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Note                                    string  `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	ShippingOrderId                         string  `protobuf:"bytes,9,opt,name=shipping_order_id,json=shippingOrderId,proto3" json:"shipping_order_id,omitempty"`
	AdValoremIndicator                      bool    `protobuf:"varint,10,opt,name=ad_valorem_indicator,json=adValoremIndicator,proto3" json:"ad_valorem_indicator,omitempty"`
	DeclaredCarriageValueAmount             float64 `protobuf:"fixed64,11,opt,name=declared_carriage_value_amount,json=declaredCarriageValueAmount,proto3" json:"declared_carriage_value_amount,omitempty"`
	DeclaredCarriageValueAmountCurrencyCode string  `protobuf:"bytes,12,opt,name=declared_carriage_value_amount_currency_code,json=declaredCarriageValueAmountCurrencyCode,proto3" json:"declared_carriage_value_amount_currency_code,omitempty"`
	OtherInstruction                        string  `protobuf:"bytes,13,opt,name=other_instruction,json=otherInstruction,proto3" json:"other_instruction,omitempty"`
	ConsignorPartyId                        uint32  `protobuf:"varint,14,opt,name=consignor_party_id,json=consignorPartyId,proto3" json:"consignor_party_id,omitempty"`
	CarrierPartyId                          uint32  `protobuf:"varint,15,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	FreightForwarderPartyId                 uint32  `protobuf:"varint,16,opt,name=freight_forwarder_party_id,json=freightForwarderPartyId,proto3" json:"freight_forwarder_party_id,omitempty"`
	ShipmentId                              uint32  `protobuf:"varint,17,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
}

func (x *WaybillD) Reset() {
	*x = WaybillD{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaybillD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaybillD) ProtoMessage() {}

func (x *WaybillD) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaybillD.ProtoReflect.Descriptor instead.
func (*WaybillD) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{27}
}

func (x *WaybillD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WaybillD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *WaybillD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *WaybillD) GetWaybillId() string {
	if x != nil {
		return x.WaybillId
	}
	return ""
}

func (x *WaybillD) GetCarrierAssignedId() string {
	if x != nil {
		return x.CarrierAssignedId
	}
	return ""
}

func (x *WaybillD) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *WaybillD) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WaybillD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *WaybillD) GetShippingOrderId() string {
	if x != nil {
		return x.ShippingOrderId
	}
	return ""
}

func (x *WaybillD) GetAdValoremIndicator() bool {
	if x != nil {
		return x.AdValoremIndicator
	}
	return false
}

func (x *WaybillD) GetDeclaredCarriageValueAmount() float64 {
	if x != nil {
		return x.DeclaredCarriageValueAmount
	}
	return 0
}

func (x *WaybillD) GetDeclaredCarriageValueAmountCurrencyCode() string {
	if x != nil {
		return x.DeclaredCarriageValueAmountCurrencyCode
	}
	return ""
}

func (x *WaybillD) GetOtherInstruction() string {
	if x != nil {
		return x.OtherInstruction
	}
	return ""
}

func (x *WaybillD) GetConsignorPartyId() uint32 {
	if x != nil {
		return x.ConsignorPartyId
	}
	return 0
}

func (x *WaybillD) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *WaybillD) GetFreightForwarderPartyId() uint32 {
	if x != nil {
		return x.FreightForwarderPartyId
	}
	return 0
}

func (x *WaybillD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

type WaybillT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
}

func (x *WaybillT) Reset() {
	*x = WaybillT{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaybillT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaybillT) ProtoMessage() {}

func (x *WaybillT) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaybillT.ProtoReflect.Descriptor instead.
func (*WaybillT) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{28}
}

func (x *WaybillT) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

type CreateWaybillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaybillId                               string  `protobuf:"bytes,1,opt,name=waybill_id,json=waybillId,proto3" json:"waybill_id,omitempty"`
	CarrierAssignedId                       string  `protobuf:"bytes,2,opt,name=carrier_assigned_id,json=carrierAssignedId,proto3" json:"carrier_assigned_id,omitempty"`
	IssueDate                               string  `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	Name1                                   string  `protobuf:"bytes,4,opt,name=name1,proto3" json:"name1,omitempty"`
	Description                             string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Note                                    string  `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	ShippingOrderId                         string  `protobuf:"bytes,7,opt,name=shipping_order_id,json=shippingOrderId,proto3" json:"shipping_order_id,omitempty"`
	AdValoremIndicator                      bool    `protobuf:"varint,8,opt,name=ad_valorem_indicator,json=adValoremIndicator,proto3" json:"ad_valorem_indicator,omitempty"`
	DeclaredCarriageValueAmount             float64 `protobuf:"fixed64,9,opt,name=declared_carriage_value_amount,json=declaredCarriageValueAmount,proto3" json:"declared_carriage_value_amount,omitempty"`
	DeclaredCarriageValueAmountCurrencyCode string  `protobuf:"bytes,10,opt,name=declared_carriage_value_amount_currency_code,json=declaredCarriageValueAmountCurrencyCode,proto3" json:"declared_carriage_value_amount_currency_code,omitempty"`
	OtherInstruction                        string  `protobuf:"bytes,11,opt,name=other_instruction,json=otherInstruction,proto3" json:"other_instruction,omitempty"`
	ConsignorPartyId                        uint32  `protobuf:"varint,12,opt,name=consignor_party_id,json=consignorPartyId,proto3" json:"consignor_party_id,omitempty"`
	CarrierPartyId                          uint32  `protobuf:"varint,13,opt,name=carrier_party_id,json=carrierPartyId,proto3" json:"carrier_party_id,omitempty"`
	FreightForwarderPartyId                 uint32  `protobuf:"varint,14,opt,name=freight_forwarder_party_id,json=freightForwarderPartyId,proto3" json:"freight_forwarder_party_id,omitempty"`
	ShipmentId                              uint32  `protobuf:"varint,15,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	UserId                                  string  `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                               string  `protobuf:"bytes,17,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                               string  `protobuf:"bytes,18,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateWaybillRequest) Reset() {
	*x = CreateWaybillRequest{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWaybillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWaybillRequest) ProtoMessage() {}

func (x *CreateWaybillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWaybillRequest.ProtoReflect.Descriptor instead.
func (*CreateWaybillRequest) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{29}
}

func (x *CreateWaybillRequest) GetWaybillId() string {
	if x != nil {
		return x.WaybillId
	}
	return ""
}

func (x *CreateWaybillRequest) GetCarrierAssignedId() string {
	if x != nil {
		return x.CarrierAssignedId
	}
	return ""
}

func (x *CreateWaybillRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *CreateWaybillRequest) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *CreateWaybillRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateWaybillRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateWaybillRequest) GetShippingOrderId() string {
	if x != nil {
		return x.ShippingOrderId
	}
	return ""
}

func (x *CreateWaybillRequest) GetAdValoremIndicator() bool {
	if x != nil {
		return x.AdValoremIndicator
	}
	return false
}

func (x *CreateWaybillRequest) GetDeclaredCarriageValueAmount() float64 {
	if x != nil {
		return x.DeclaredCarriageValueAmount
	}
	return 0
}

func (x *CreateWaybillRequest) GetDeclaredCarriageValueAmountCurrencyCode() string {
	if x != nil {
		return x.DeclaredCarriageValueAmountCurrencyCode
	}
	return ""
}

func (x *CreateWaybillRequest) GetOtherInstruction() string {
	if x != nil {
		return x.OtherInstruction
	}
	return ""
}

func (x *CreateWaybillRequest) GetConsignorPartyId() uint32 {
	if x != nil {
		return x.ConsignorPartyId
	}
	return 0
}

func (x *CreateWaybillRequest) GetCarrierPartyId() uint32 {
	if x != nil {
		return x.CarrierPartyId
	}
	return 0
}

func (x *CreateWaybillRequest) GetFreightForwarderPartyId() uint32 {
	if x != nil {
		return x.FreightForwarderPartyId
	}
	return 0
}

func (x *CreateWaybillRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateWaybillRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateWaybillRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateWaybillRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateWaybillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Waybill *Waybill `protobuf:"bytes,1,opt,name=waybill,proto3" json:"waybill,omitempty"`
}

func (x *CreateWaybillResponse) Reset() {
	*x = CreateWaybillResponse{}
	mi := &file_logistics_v1_shipment_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWaybillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWaybillResponse) ProtoMessage() {}

func (x *CreateWaybillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logistics_v1_shipment_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWaybillResponse.ProtoReflect.Descriptor instead.
func (*CreateWaybillResponse) Descriptor() ([]byte, []int) {
	return file_logistics_v1_shipment_proto_rawDescGZIP(), []int{30}
}

func (x *CreateWaybillResponse) GetWaybill() *Waybill {
	if x != nil {
		return x.Waybill
	}
	return nil
}

var File_logistics_v1_shipment_proto protoreflect.FileDescriptor

var file_logistics_v1_shipment_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x32,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x22, 0xd4, 0x06, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75,
	0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75,
	0x73, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9f, 0x06, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x12, 0x4c, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x66, 0x0a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x1f, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x64, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73,
	0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x24, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x20, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x22, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x0d, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x6f,
	0x6d, 0x69, 0x73, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x21,
	0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75,
	0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x6f, 0x75,
	0x73, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x40, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x57, 0x0a, 0x1d, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x08,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x52,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x03, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x54,
	0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x6c, 0x6f, 0x73, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x73, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x54,
	0x65, 0x72, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x84, 0x04, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x6c, 0x6f, 0x73, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x73, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x73, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x72,
	0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x11, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65,
	0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x7a, 0x0a, 0x08, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x52, 0x09, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x12,
	0x36, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x52, 0x09, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x22, 0x8d, 0x03, 0x0a, 0x09, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x73, 0x70, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0xff, 0x05, 0x0a, 0x09, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x12, 0x52, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a,
	0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x67,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x64, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x6a, 0x0a, 0x24, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x20, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a,
	0x22, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x66, 0x0a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xf5, 0x08, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x73, 0x70, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x40, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x64, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22,
	0xae, 0x01, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0a,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xfc, 0x0b, 0x0a, 0x09, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e,
	0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x65, 0x74,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x67, 0x72,
	0x6f, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6e, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x26, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x16, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x66, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3e, 0x0a, 0x1b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xc0, 0x0e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x73, 0x73,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6e,
	0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6e, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x6e, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x26, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x1a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x66, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x15,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x52, 0x0a, 0x1b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x99, 0x04, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x63, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x61, 0x78,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61,
	0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xed, 0x04, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x63,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a,
	0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65,
	0x72, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c,
	0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x52,
	0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x12, 0x44,
	0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xb4, 0x06, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x29, 0x0a, 0x11, 0x62,
	0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x6f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x64,
	0x56, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x43, 0x0a, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x2c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x72, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66,
	0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x4f,
	0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xfd, 0x06, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69,
	0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x31, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x2c, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x27, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x1a, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xdf, 0x01, 0x0a, 0x07, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x12,
	0x33, 0x0a, 0x09, 0x77, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x52, 0x08, 0x77, 0x61, 0x79, 0x62,
	0x69, 0x6c, 0x6c, 0x44, 0x12, 0x33, 0x0a, 0x09, 0x77, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x5f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x52,
	0x08, 0x77, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x05, 0x0a, 0x08, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c,
	0x6c, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x2c, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x27, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x08, 0x57,
	0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x8c, 0x06, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79,
	0x62, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x2c, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x48, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x62, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x77, 0x61,
	0x79, 0x62, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x79, 0x62, 0x69,
	0x6c, 0x6c, 0x52, 0x07, 0x77, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x32, 0xc6, 0x05, 0x0a, 0x0f,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4f,
	0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x4c, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x12, 0x22, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73,
	0x63, 0x2d, 0x75, 0x62, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logistics_v1_shipment_proto_rawDescOnce sync.Once
	file_logistics_v1_shipment_proto_rawDescData = file_logistics_v1_shipment_proto_rawDesc
)

func file_logistics_v1_shipment_proto_rawDescGZIP() []byte {
	file_logistics_v1_shipment_proto_rawDescOnce.Do(func() {
		file_logistics_v1_shipment_proto_rawDescData = protoimpl.X.CompressGZIP(file_logistics_v1_shipment_proto_rawDescData)
	})
	return file_logistics_v1_shipment_proto_rawDescData
}

var file_logistics_v1_shipment_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_logistics_v1_shipment_proto_goTypes = []any{
	(*Delivery)(nil),                      // 0: logistics.v1.Delivery
	(*DeliveryD)(nil),                     // 1: logistics.v1.DeliveryD
	(*DeliveryT)(nil),                     // 2: logistics.v1.DeliveryT
	(*CreateDeliveryRequest)(nil),         // 3: logistics.v1.CreateDeliveryRequest
	(*CreateDeliveryResponse)(nil),        // 4: logistics.v1.CreateDeliveryResponse
	(*DeliveryTerm)(nil),                  // 5: logistics.v1.DeliveryTerm
	(*DeliveryTermD)(nil),                 // 6: logistics.v1.DeliveryTermD
	(*CreateDeliveryTermRequest)(nil),     // 7: logistics.v1.CreateDeliveryTermRequest
	(*CreateDeliveryTermResponse)(nil),    // 8: logistics.v1.CreateDeliveryTermResponse
	(*Despatch)(nil),                      // 9: logistics.v1.Despatch
	(*DespatchD)(nil),                     // 10: logistics.v1.DespatchD
	(*DespatchT)(nil),                     // 11: logistics.v1.DespatchT
	(*CreateDespatchRequest)(nil),         // 12: logistics.v1.CreateDespatchRequest
	(*CreateDespatchResponse)(nil),        // 13: logistics.v1.CreateDespatchResponse
	(*Shipment)(nil),                      // 14: logistics.v1.Shipment
	(*ShipmentD)(nil),                     // 15: logistics.v1.ShipmentD
	(*CreateShipmentRequest)(nil),         // 16: logistics.v1.CreateShipmentRequest
	(*CreateShipmentResponse)(nil),        // 17: logistics.v1.CreateShipmentResponse
	(*AllowanceCharge)(nil),               // 18: logistics.v1.AllowanceCharge
	(*CreateAllowanceChargeRequest)(nil),  // 19: logistics.v1.CreateAllowanceChargeRequest
	(*CreateAllowanceChargeResponse)(nil), // 20: logistics.v1.CreateAllowanceChargeResponse
	(*BillOfLading)(nil),                  // 21: logistics.v1.BillOfLading
	(*BillOfLadingD)(nil),                 // 22: logistics.v1.BillOfLadingD
	(*BillOfLadingT)(nil),                 // 23: logistics.v1.BillOfLadingT
	(*CreateBillOfLadingRequest)(nil),     // 24: logistics.v1.CreateBillOfLadingRequest
	(*CreateBillOfLadingResponse)(nil),    // 25: logistics.v1.CreateBillOfLadingResponse
	(*Waybill)(nil),                       // 26: logistics.v1.Waybill
	(*WaybillD)(nil),                      // 27: logistics.v1.WaybillD
	(*WaybillT)(nil),                      // 28: logistics.v1.WaybillT
	(*CreateWaybillRequest)(nil),          // 29: logistics.v1.CreateWaybillRequest
	(*CreateWaybillResponse)(nil),         // 30: logistics.v1.CreateWaybillResponse
	(*v1.CrUpdUser)(nil),                  // 31: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                  // 32: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),         // 33: google.protobuf.Timestamp
	(*v1.Address)(nil),                    // 34: common.v1.Address
	(*v1.Location)(nil),                   // 35: common.v1.Location
}
var file_logistics_v1_shipment_proto_depIdxs = []int32{
	1,  // 0: logistics.v1.Delivery.delivery_d:type_name -> logistics.v1.DeliveryD
	2,  // 1: logistics.v1.Delivery.delivery_t:type_name -> logistics.v1.DeliveryT
	31, // 2: logistics.v1.Delivery.cr_upd_user:type_name -> common.v1.CrUpdUser
	32, // 3: logistics.v1.Delivery.cr_upd_time:type_name -> common.v1.CrUpdTime
	5,  // 4: logistics.v1.Delivery.delivery_term:type_name -> logistics.v1.DeliveryTerm
	9,  // 5: logistics.v1.Delivery.despatch:type_name -> logistics.v1.Despatch
	33, // 6: logistics.v1.DeliveryT.actual_delivery_date:type_name -> google.protobuf.Timestamp
	33, // 7: logistics.v1.DeliveryT.latest_delivery_date:type_name -> google.protobuf.Timestamp
	33, // 8: logistics.v1.DeliveryT.requested_delivery_period_start_date:type_name -> google.protobuf.Timestamp
	33, // 9: logistics.v1.DeliveryT.requested_delivery_period_end_date:type_name -> google.protobuf.Timestamp
	33, // 10: logistics.v1.DeliveryT.promised_delivery_period_start_date:type_name -> google.protobuf.Timestamp
	33, // 11: logistics.v1.DeliveryT.promised_delivery_period_end_date:type_name -> google.protobuf.Timestamp
	33, // 12: logistics.v1.DeliveryT.estimated_delivery_period_start_date:type_name -> google.protobuf.Timestamp
	33, // 13: logistics.v1.DeliveryT.estimated_delivery_period_end_date:type_name -> google.protobuf.Timestamp
	34, // 14: logistics.v1.CreateDeliveryRequest.delivery_address:type_name -> common.v1.Address
	35, // 15: logistics.v1.CreateDeliveryRequest.delivery_location:type_name -> common.v1.Location
	35, // 16: logistics.v1.CreateDeliveryRequest.alternative_delivery_location:type_name -> common.v1.Location
	0,  // 17: logistics.v1.CreateDeliveryResponse.delivery:type_name -> logistics.v1.Delivery
	6,  // 18: logistics.v1.DeliveryTerm.delivery_term_d:type_name -> logistics.v1.DeliveryTermD
	31, // 19: logistics.v1.DeliveryTerm.cr_upd_user:type_name -> common.v1.CrUpdUser
	32, // 20: logistics.v1.DeliveryTerm.cr_upd_time:type_name -> common.v1.CrUpdTime
	35, // 21: logistics.v1.CreateDeliveryTermRequest.delivery_location:type_name -> common.v1.Location
	5,  // 22: logistics.v1.CreateDeliveryTermResponse.delivery_term:type_name -> logistics.v1.DeliveryTerm
	10, // 23: logistics.v1.Despatch.despatch_d:type_name -> logistics.v1.DespatchD
	11, // 24: logistics.v1.Despatch.despatch_t:type_name -> logistics.v1.DespatchT
	33, // 25: logistics.v1.DespatchT.requested_despatch_date:type_name -> google.protobuf.Timestamp
	33, // 26: logistics.v1.DespatchT.estimated_despatch_date:type_name -> google.protobuf.Timestamp
	33, // 27: logistics.v1.DespatchT.actual_despatch_date:type_name -> google.protobuf.Timestamp
	33, // 28: logistics.v1.DespatchT.guaranteed_despatch_date:type_name -> google.protobuf.Timestamp
	33, // 29: logistics.v1.DespatchT.estimated_despatch_period_start_date:type_name -> google.protobuf.Timestamp
	33, // 30: logistics.v1.DespatchT.estimated_despatch_period_end_date:type_name -> google.protobuf.Timestamp
	33, // 31: logistics.v1.DespatchT.requested_despatch_period_start_date:type_name -> google.protobuf.Timestamp
	33, // 32: logistics.v1.DespatchT.requested_despatch_period_end_date:type_name -> google.protobuf.Timestamp
	34, // 33: logistics.v1.CreateDespatchRequest.despatch_address:type_name -> common.v1.Address
	35, // 34: logistics.v1.CreateDespatchRequest.despatch_location:type_name -> common.v1.Location
	9,  // 35: logistics.v1.CreateDespatchResponse.despatch:type_name -> logistics.v1.Despatch
	15, // 36: logistics.v1.Shipment.shipment_d:type_name -> logistics.v1.ShipmentD
	31, // 37: logistics.v1.Shipment.cr_upd_user:type_name -> common.v1.CrUpdUser
	32, // 38: logistics.v1.Shipment.cr_upd_time:type_name -> common.v1.CrUpdTime
	34, // 39: logistics.v1.CreateShipmentRequest.return_address:type_name -> common.v1.Address
	34, // 40: logistics.v1.CreateShipmentRequest.original_address:type_name -> common.v1.Address
	35, // 41: logistics.v1.CreateShipmentRequest.first_arrival_port_location:type_name -> common.v1.Location
	35, // 42: logistics.v1.CreateShipmentRequest.last_exit_port_location:type_name -> common.v1.Location
	14, // 43: logistics.v1.CreateShipmentResponse.shipment:type_name -> logistics.v1.Shipment
	18, // 44: logistics.v1.CreateAllowanceChargeResponse.allowance_charge:type_name -> logistics.v1.AllowanceCharge
	22, // 45: logistics.v1.BillOfLading.bill_of_lading_d:type_name -> logistics.v1.BillOfLadingD
	23, // 46: logistics.v1.BillOfLading.bill_of_lading_t:type_name -> logistics.v1.BillOfLadingT
	31, // 47: logistics.v1.BillOfLading.cr_upd_user:type_name -> common.v1.CrUpdUser
	32, // 48: logistics.v1.BillOfLading.cr_upd_time:type_name -> common.v1.CrUpdTime
	33, // 49: logistics.v1.BillOfLadingT.issue_date:type_name -> google.protobuf.Timestamp
	21, // 50: logistics.v1.CreateBillOfLadingResponse.bill_of_lading:type_name -> logistics.v1.BillOfLading
	27, // 51: logistics.v1.Waybill.waybill_d:type_name -> logistics.v1.WaybillD
	28, // 52: logistics.v1.Waybill.waybill_t:type_name -> logistics.v1.WaybillT
	31, // 53: logistics.v1.Waybill.cr_upd_user:type_name -> common.v1.CrUpdUser
	32, // 54: logistics.v1.Waybill.cr_upd_time:type_name -> common.v1.CrUpdTime
	33, // 55: logistics.v1.WaybillT.issue_date:type_name -> google.protobuf.Timestamp
	26, // 56: logistics.v1.CreateWaybillResponse.waybill:type_name -> logistics.v1.Waybill
	16, // 57: logistics.v1.ShipmentService.CreateShipment:input_type -> logistics.v1.CreateShipmentRequest
	19, // 58: logistics.v1.ShipmentService.CreateAllowanceCharge:input_type -> logistics.v1.CreateAllowanceChargeRequest
	3,  // 59: logistics.v1.ShipmentService.CreateDelivery:input_type -> logistics.v1.CreateDeliveryRequest
	7,  // 60: logistics.v1.ShipmentService.CreateDeliveryTerm:input_type -> logistics.v1.CreateDeliveryTermRequest
	12, // 61: logistics.v1.ShipmentService.CreateDespatch:input_type -> logistics.v1.CreateDespatchRequest
	24, // 62: logistics.v1.ShipmentService.CreateBillOfLading:input_type -> logistics.v1.CreateBillOfLadingRequest
	29, // 63: logistics.v1.ShipmentService.CreateWaybill:input_type -> logistics.v1.CreateWaybillRequest
	17, // 64: logistics.v1.ShipmentService.CreateShipment:output_type -> logistics.v1.CreateShipmentResponse
	20, // 65: logistics.v1.ShipmentService.CreateAllowanceCharge:output_type -> logistics.v1.CreateAllowanceChargeResponse
	4,  // 66: logistics.v1.ShipmentService.CreateDelivery:output_type -> logistics.v1.CreateDeliveryResponse
	8,  // 67: logistics.v1.ShipmentService.CreateDeliveryTerm:output_type -> logistics.v1.CreateDeliveryTermResponse
	13, // 68: logistics.v1.ShipmentService.CreateDespatch:output_type -> logistics.v1.CreateDespatchResponse
	25, // 69: logistics.v1.ShipmentService.CreateBillOfLading:output_type -> logistics.v1.CreateBillOfLadingResponse
	30, // 70: logistics.v1.ShipmentService.CreateWaybill:output_type -> logistics.v1.CreateWaybillResponse
	64, // [64:71] is the sub-list for method output_type
	57, // [57:64] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_logistics_v1_shipment_proto_init() }
func file_logistics_v1_shipment_proto_init() {
	if File_logistics_v1_shipment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logistics_v1_shipment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logistics_v1_shipment_proto_goTypes,
		DependencyIndexes: file_logistics_v1_shipment_proto_depIdxs,
		MessageInfos:      file_logistics_v1_shipment_proto_msgTypes,
	}.Build()
	File_logistics_v1_shipment_proto = out.File
	file_logistics_v1_shipment_proto_rawDesc = nil
	file_logistics_v1_shipment_proto_goTypes = nil
	file_logistics_v1_shipment_proto_depIdxs = nil
}
