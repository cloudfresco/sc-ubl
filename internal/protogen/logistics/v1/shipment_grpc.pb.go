// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: logistics/v1/shipment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShipmentService_CreateShipment_FullMethodName        = "/logistics.v1.ShipmentService/CreateShipment"
	ShipmentService_CreateAllowanceCharge_FullMethodName = "/logistics.v1.ShipmentService/CreateAllowanceCharge"
	ShipmentService_CreateDelivery_FullMethodName        = "/logistics.v1.ShipmentService/CreateDelivery"
	ShipmentService_CreateDeliveryTerm_FullMethodName    = "/logistics.v1.ShipmentService/CreateDeliveryTerm"
	ShipmentService_CreateDespatch_FullMethodName        = "/logistics.v1.ShipmentService/CreateDespatch"
	ShipmentService_CreateBillOfLading_FullMethodName    = "/logistics.v1.ShipmentService/CreateBillOfLading"
	ShipmentService_CreateWaybill_FullMethodName         = "/logistics.v1.ShipmentService/CreateWaybill"
)

// ShipmentServiceClient is the client API for ShipmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ShipmentService service definition.
type ShipmentServiceClient interface {
	CreateShipment(ctx context.Context, in *CreateShipmentRequest, opts ...grpc.CallOption) (*CreateShipmentResponse, error)
	CreateAllowanceCharge(ctx context.Context, in *CreateAllowanceChargeRequest, opts ...grpc.CallOption) (*CreateAllowanceChargeResponse, error)
	CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*CreateDeliveryResponse, error)
	CreateDeliveryTerm(ctx context.Context, in *CreateDeliveryTermRequest, opts ...grpc.CallOption) (*CreateDeliveryTermResponse, error)
	CreateDespatch(ctx context.Context, in *CreateDespatchRequest, opts ...grpc.CallOption) (*CreateDespatchResponse, error)
	CreateBillOfLading(ctx context.Context, in *CreateBillOfLadingRequest, opts ...grpc.CallOption) (*CreateBillOfLadingResponse, error)
	CreateWaybill(ctx context.Context, in *CreateWaybillRequest, opts ...grpc.CallOption) (*CreateWaybillResponse, error)
}

type shipmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShipmentServiceClient(cc grpc.ClientConnInterface) ShipmentServiceClient {
	return &shipmentServiceClient{cc}
}

func (c *shipmentServiceClient) CreateShipment(ctx context.Context, in *CreateShipmentRequest, opts ...grpc.CallOption) (*CreateShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShipmentResponse)
	err := c.cc.Invoke(ctx, ShipmentService_CreateShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) CreateAllowanceCharge(ctx context.Context, in *CreateAllowanceChargeRequest, opts ...grpc.CallOption) (*CreateAllowanceChargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAllowanceChargeResponse)
	err := c.cc.Invoke(ctx, ShipmentService_CreateAllowanceCharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*CreateDeliveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeliveryResponse)
	err := c.cc.Invoke(ctx, ShipmentService_CreateDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) CreateDeliveryTerm(ctx context.Context, in *CreateDeliveryTermRequest, opts ...grpc.CallOption) (*CreateDeliveryTermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeliveryTermResponse)
	err := c.cc.Invoke(ctx, ShipmentService_CreateDeliveryTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) CreateDespatch(ctx context.Context, in *CreateDespatchRequest, opts ...grpc.CallOption) (*CreateDespatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDespatchResponse)
	err := c.cc.Invoke(ctx, ShipmentService_CreateDespatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) CreateBillOfLading(ctx context.Context, in *CreateBillOfLadingRequest, opts ...grpc.CallOption) (*CreateBillOfLadingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBillOfLadingResponse)
	err := c.cc.Invoke(ctx, ShipmentService_CreateBillOfLading_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) CreateWaybill(ctx context.Context, in *CreateWaybillRequest, opts ...grpc.CallOption) (*CreateWaybillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWaybillResponse)
	err := c.cc.Invoke(ctx, ShipmentService_CreateWaybill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipmentServiceServer is the server API for ShipmentService service.
// All implementations must embed UnimplementedShipmentServiceServer
// for forward compatibility.
//
// The ShipmentService service definition.
type ShipmentServiceServer interface {
	CreateShipment(context.Context, *CreateShipmentRequest) (*CreateShipmentResponse, error)
	CreateAllowanceCharge(context.Context, *CreateAllowanceChargeRequest) (*CreateAllowanceChargeResponse, error)
	CreateDelivery(context.Context, *CreateDeliveryRequest) (*CreateDeliveryResponse, error)
	CreateDeliveryTerm(context.Context, *CreateDeliveryTermRequest) (*CreateDeliveryTermResponse, error)
	CreateDespatch(context.Context, *CreateDespatchRequest) (*CreateDespatchResponse, error)
	CreateBillOfLading(context.Context, *CreateBillOfLadingRequest) (*CreateBillOfLadingResponse, error)
	CreateWaybill(context.Context, *CreateWaybillRequest) (*CreateWaybillResponse, error)
	mustEmbedUnimplementedShipmentServiceServer()
}

// UnimplementedShipmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShipmentServiceServer struct{}

func (UnimplementedShipmentServiceServer) CreateShipment(context.Context, *CreateShipmentRequest) (*CreateShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipment not implemented")
}
func (UnimplementedShipmentServiceServer) CreateAllowanceCharge(context.Context, *CreateAllowanceChargeRequest) (*CreateAllowanceChargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllowanceCharge not implemented")
}
func (UnimplementedShipmentServiceServer) CreateDelivery(context.Context, *CreateDeliveryRequest) (*CreateDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelivery not implemented")
}
func (UnimplementedShipmentServiceServer) CreateDeliveryTerm(context.Context, *CreateDeliveryTermRequest) (*CreateDeliveryTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeliveryTerm not implemented")
}
func (UnimplementedShipmentServiceServer) CreateDespatch(context.Context, *CreateDespatchRequest) (*CreateDespatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDespatch not implemented")
}
func (UnimplementedShipmentServiceServer) CreateBillOfLading(context.Context, *CreateBillOfLadingRequest) (*CreateBillOfLadingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillOfLading not implemented")
}
func (UnimplementedShipmentServiceServer) CreateWaybill(context.Context, *CreateWaybillRequest) (*CreateWaybillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWaybill not implemented")
}
func (UnimplementedShipmentServiceServer) mustEmbedUnimplementedShipmentServiceServer() {}
func (UnimplementedShipmentServiceServer) testEmbeddedByValue()                         {}

// UnsafeShipmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShipmentServiceServer will
// result in compilation errors.
type UnsafeShipmentServiceServer interface {
	mustEmbedUnimplementedShipmentServiceServer()
}

func RegisterShipmentServiceServer(s grpc.ServiceRegistrar, srv ShipmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedShipmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShipmentService_ServiceDesc, srv)
}

func _ShipmentService_CreateShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).CreateShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipmentService_CreateShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).CreateShipment(ctx, req.(*CreateShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_CreateAllowanceCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllowanceChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).CreateAllowanceCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipmentService_CreateAllowanceCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).CreateAllowanceCharge(ctx, req.(*CreateAllowanceChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_CreateDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).CreateDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipmentService_CreateDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).CreateDelivery(ctx, req.(*CreateDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_CreateDeliveryTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).CreateDeliveryTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipmentService_CreateDeliveryTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).CreateDeliveryTerm(ctx, req.(*CreateDeliveryTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_CreateDespatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDespatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).CreateDespatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipmentService_CreateDespatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).CreateDespatch(ctx, req.(*CreateDespatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_CreateBillOfLading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillOfLadingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).CreateBillOfLading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipmentService_CreateBillOfLading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).CreateBillOfLading(ctx, req.(*CreateBillOfLadingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_CreateWaybill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWaybillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).CreateWaybill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipmentService_CreateWaybill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).CreateWaybill(ctx, req.(*CreateWaybillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShipmentService_ServiceDesc is the grpc.ServiceDesc for ShipmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShipmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.v1.ShipmentService",
	HandlerType: (*ShipmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShipment",
			Handler:    _ShipmentService_CreateShipment_Handler,
		},
		{
			MethodName: "CreateAllowanceCharge",
			Handler:    _ShipmentService_CreateAllowanceCharge_Handler,
		},
		{
			MethodName: "CreateDelivery",
			Handler:    _ShipmentService_CreateDelivery_Handler,
		},
		{
			MethodName: "CreateDeliveryTerm",
			Handler:    _ShipmentService_CreateDeliveryTerm_Handler,
		},
		{
			MethodName: "CreateDespatch",
			Handler:    _ShipmentService_CreateDespatch_Handler,
		},
		{
			MethodName: "CreateBillOfLading",
			Handler:    _ShipmentService_CreateBillOfLading_Handler,
		},
		{
			MethodName: "CreateWaybill",
			Handler:    _ShipmentService_CreateWaybill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistics/v1/shipment.proto",
}
