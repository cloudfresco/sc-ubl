// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: order/v1/purchaseorder.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PurchaseOrderHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseOrderHeaderD *PurchaseOrderHeaderD `protobuf:"bytes,1,opt,name=purchase_order_header_d,json=purchaseOrderHeaderD,proto3" json:"purchase_order_header_d,omitempty"`
	PurchaseOrderHeaderT *PurchaseOrderHeaderT `protobuf:"bytes,2,opt,name=purchase_order_header_t,json=purchaseOrderHeaderT,proto3" json:"purchase_order_header_t,omitempty"`
	CrUpdUser            *v1.CrUpdUser         `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime            *v1.CrUpdTime         `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *PurchaseOrderHeader) Reset() {
	*x = PurchaseOrderHeader{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseOrderHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderHeader) ProtoMessage() {}

func (x *PurchaseOrderHeader) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderHeader.ProtoReflect.Descriptor instead.
func (*PurchaseOrderHeader) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{0}
}

func (x *PurchaseOrderHeader) GetPurchaseOrderHeaderD() *PurchaseOrderHeaderD {
	if x != nil {
		return x.PurchaseOrderHeaderD
	}
	return nil
}

func (x *PurchaseOrderHeader) GetPurchaseOrderHeaderT() *PurchaseOrderHeaderT {
	if x != nil {
		return x.PurchaseOrderHeaderT
	}
	return nil
}

func (x *PurchaseOrderHeader) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PurchaseOrderHeader) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type PurchaseOrderHeaderD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                           []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                             string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	PohId                           string  `protobuf:"bytes,4,opt,name=poh_id,json=pohId,proto3" json:"poh_id,omitempty"`
	SalesOrderId                    string  `protobuf:"bytes,5,opt,name=sales_order_id,json=salesOrderId,proto3" json:"sales_order_id,omitempty"`
	OrderTypeCode                   string  `protobuf:"bytes,6,opt,name=order_type_code,json=orderTypeCode,proto3" json:"order_type_code,omitempty"`
	Note                            string  `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	RequestedInvoiceCurrencyCode    string  `protobuf:"bytes,8,opt,name=requested_invoice_currency_code,json=requestedInvoiceCurrencyCode,proto3" json:"requested_invoice_currency_code,omitempty"`
	DocumentCurrencyCode            string  `protobuf:"bytes,9,opt,name=document_currency_code,json=documentCurrencyCode,proto3" json:"document_currency_code,omitempty"`
	PricingCurrencyCode             string  `protobuf:"bytes,10,opt,name=pricing_currency_code,json=pricingCurrencyCode,proto3" json:"pricing_currency_code,omitempty"`
	TaxCurrencyCode                 string  `protobuf:"bytes,11,opt,name=tax_currency_code,json=taxCurrencyCode,proto3" json:"tax_currency_code,omitempty"`
	AccountingCostCode              string  `protobuf:"bytes,12,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost                  string  `protobuf:"bytes,13,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	LineCountNumeric                uint32  `protobuf:"varint,14,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	QuotationId                     uint32  `protobuf:"varint,15,opt,name=quotation_id,json=quotationId,proto3" json:"quotation_id,omitempty"`
	OrderId                         uint32  `protobuf:"varint,16,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	CatalogueId                     uint32  `protobuf:"varint,17,opt,name=catalogue_id,json=catalogueId,proto3" json:"catalogue_id,omitempty"`
	BuyerCustomerPartyId            uint32  `protobuf:"varint,18,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId           uint32  `protobuf:"varint,19,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	OriginatorCustomerPartyId       uint32  `protobuf:"varint,20,opt,name=originator_customer_party_id,json=originatorCustomerPartyId,proto3" json:"originator_customer_party_id,omitempty"`
	FreightForwarderPartyId         uint32  `protobuf:"varint,21,opt,name=freight_forwarder_party_id,json=freightForwarderPartyId,proto3" json:"freight_forwarder_party_id,omitempty"`
	AccountingCustomerPartyId       uint32  `protobuf:"varint,22,opt,name=accounting_customer_party_id,json=accountingCustomerPartyId,proto3" json:"accounting_customer_party_id,omitempty"`
	TransactionConditions           string  `protobuf:"bytes,23,opt,name=transaction_conditions,json=transactionConditions,proto3" json:"transaction_conditions,omitempty"`
	TaxExSourceCurrencyCode         string  `protobuf:"bytes,24,opt,name=tax_ex_source_currency_code,json=taxExSourceCurrencyCode,proto3" json:"tax_ex_source_currency_code,omitempty"`
	TaxExSourceCurrencyBaseRate     string  `protobuf:"bytes,25,opt,name=tax_ex_source_currency_base_rate,json=taxExSourceCurrencyBaseRate,proto3" json:"tax_ex_source_currency_base_rate,omitempty"`
	TaxExTargetCurrencyCode         string  `protobuf:"bytes,26,opt,name=tax_ex_target_currency_code,json=taxExTargetCurrencyCode,proto3" json:"tax_ex_target_currency_code,omitempty"`
	TaxExTargetCurrencyBaseRate     string  `protobuf:"bytes,27,opt,name=tax_ex_target_currency_base_rate,json=taxExTargetCurrencyBaseRate,proto3" json:"tax_ex_target_currency_base_rate,omitempty"`
	TaxExExchangeMarketId           uint32  `protobuf:"varint,28,opt,name=tax_ex_exchange_market_id,json=taxExExchangeMarketId,proto3" json:"tax_ex_exchange_market_id,omitempty"`
	TaxExCalculationRate            float64 `protobuf:"fixed64,29,opt,name=tax_ex_calculation_rate,json=taxExCalculationRate,proto3" json:"tax_ex_calculation_rate,omitempty"`
	TaxExMathematicOperatorCode     string  `protobuf:"bytes,30,opt,name=tax_ex_mathematic_operator_code,json=taxExMathematicOperatorCode,proto3" json:"tax_ex_mathematic_operator_code,omitempty"`
	PricingExSourceCurrencyCode     string  `protobuf:"bytes,31,opt,name=pricing_ex_source_currency_code,json=pricingExSourceCurrencyCode,proto3" json:"pricing_ex_source_currency_code,omitempty"`
	PricingExSourceCurrencyBaseRate string  `protobuf:"bytes,32,opt,name=pricing_ex_source_currency_base_rate,json=pricingExSourceCurrencyBaseRate,proto3" json:"pricing_ex_source_currency_base_rate,omitempty"`
	PricingExTargetCurrencyCode     string  `protobuf:"bytes,33,opt,name=pricing_ex_target_currency_code,json=pricingExTargetCurrencyCode,proto3" json:"pricing_ex_target_currency_code,omitempty"`
	PricingExTargetCurrencyBaseRate string  `protobuf:"bytes,34,opt,name=pricing_ex_target_currency_base_rate,json=pricingExTargetCurrencyBaseRate,proto3" json:"pricing_ex_target_currency_base_rate,omitempty"`
	PricingExExchangeMarketId       uint32  `protobuf:"varint,35,opt,name=pricing_ex_exchange_market_id,json=pricingExExchangeMarketId,proto3" json:"pricing_ex_exchange_market_id,omitempty"`
	PricingExCalculationRate        float64 `protobuf:"fixed64,36,opt,name=pricing_ex_calculation_rate,json=pricingExCalculationRate,proto3" json:"pricing_ex_calculation_rate,omitempty"`
	PricingExMathematicOperatorCode string  `protobuf:"bytes,37,opt,name=pricing_ex_mathematic_operator_code,json=pricingExMathematicOperatorCode,proto3" json:"pricing_ex_mathematic_operator_code,omitempty"`
	PaymentExSourceCurrencyCode     string  `protobuf:"bytes,38,opt,name=payment_ex_source_currency_code,json=paymentExSourceCurrencyCode,proto3" json:"payment_ex_source_currency_code,omitempty"`
	PaymentExSourceCurrencyBaseRate string  `protobuf:"bytes,39,opt,name=payment_ex_source_currency_base_rate,json=paymentExSourceCurrencyBaseRate,proto3" json:"payment_ex_source_currency_base_rate,omitempty"`
	PaymentExTargetCurrencyCode     string  `protobuf:"bytes,40,opt,name=payment_ex_target_currency_code,json=paymentExTargetCurrencyCode,proto3" json:"payment_ex_target_currency_code,omitempty"`
	PaymentExTargetCurrencyBaseRate string  `protobuf:"bytes,41,opt,name=payment_ex_target_currency_base_rate,json=paymentExTargetCurrencyBaseRate,proto3" json:"payment_ex_target_currency_base_rate,omitempty"`
	PaymentExExchangeMarketId       uint32  `protobuf:"varint,42,opt,name=payment_ex_exchange_market_id,json=paymentExExchangeMarketId,proto3" json:"payment_ex_exchange_market_id,omitempty"`
	PaymentExCalculationRate        float64 `protobuf:"fixed64,43,opt,name=payment_ex_calculation_rate,json=paymentExCalculationRate,proto3" json:"payment_ex_calculation_rate,omitempty"`
	PaymentExMathematicOperatorCode string  `protobuf:"bytes,44,opt,name=payment_ex_mathematic_operator_code,json=paymentExMathematicOperatorCode,proto3" json:"payment_ex_mathematic_operator_code,omitempty"`
	DestinationCountry              string  `protobuf:"bytes,45,opt,name=destination_country,json=destinationCountry,proto3" json:"destination_country,omitempty"`
	LineExtensionAmount             float64 `protobuf:"fixed64,46,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TaxExclusiveAmount              float64 `protobuf:"fixed64,47,opt,name=tax_exclusive_amount,json=taxExclusiveAmount,proto3" json:"tax_exclusive_amount,omitempty"`
	TaxInclusiveAmount              float64 `protobuf:"fixed64,48,opt,name=tax_inclusive_amount,json=taxInclusiveAmount,proto3" json:"tax_inclusive_amount,omitempty"`
	AllowanceTotalAmount            float64 `protobuf:"fixed64,49,opt,name=allowance_total_amount,json=allowanceTotalAmount,proto3" json:"allowance_total_amount,omitempty"`
	ChargeTotalAmount               float64 `protobuf:"fixed64,50,opt,name=charge_total_amount,json=chargeTotalAmount,proto3" json:"charge_total_amount,omitempty"`
	WithholdingTaxTotalAmount       float64 `protobuf:"fixed64,51,opt,name=withholding_tax_total_amount,json=withholdingTaxTotalAmount,proto3" json:"withholding_tax_total_amount,omitempty"`
	PrepaidAmount                   float64 `protobuf:"fixed64,52,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PayableRoundingAmount           float64 `protobuf:"fixed64,53,opt,name=payable_rounding_amount,json=payableRoundingAmount,proto3" json:"payable_rounding_amount,omitempty"`
	PayableAmount                   float64 `protobuf:"fixed64,54,opt,name=payable_amount,json=payableAmount,proto3" json:"payable_amount,omitempty"`
	PayableAlternativeAmount        float64 `protobuf:"fixed64,55,opt,name=payable_alternative_amount,json=payableAlternativeAmount,proto3" json:"payable_alternative_amount,omitempty"`
}

func (x *PurchaseOrderHeaderD) Reset() {
	*x = PurchaseOrderHeaderD{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseOrderHeaderD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderHeaderD) ProtoMessage() {}

func (x *PurchaseOrderHeaderD) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderHeaderD.ProtoReflect.Descriptor instead.
func (*PurchaseOrderHeaderD) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{1}
}

func (x *PurchaseOrderHeaderD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PurchaseOrderHeaderD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPohId() string {
	if x != nil {
		return x.PohId
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetSalesOrderId() string {
	if x != nil {
		return x.SalesOrderId
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetOrderTypeCode() string {
	if x != nil {
		return x.OrderTypeCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetRequestedInvoiceCurrencyCode() string {
	if x != nil {
		return x.RequestedInvoiceCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetDocumentCurrencyCode() string {
	if x != nil {
		return x.DocumentCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPricingCurrencyCode() string {
	if x != nil {
		return x.PricingCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetTaxCurrencyCode() string {
	if x != nil {
		return x.TaxCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetQuotationId() uint32 {
	if x != nil {
		return x.QuotationId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetCatalogueId() uint32 {
	if x != nil {
		return x.CatalogueId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetOriginatorCustomerPartyId() uint32 {
	if x != nil {
		return x.OriginatorCustomerPartyId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetFreightForwarderPartyId() uint32 {
	if x != nil {
		return x.FreightForwarderPartyId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetAccountingCustomerPartyId() uint32 {
	if x != nil {
		return x.AccountingCustomerPartyId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetTransactionConditions() string {
	if x != nil {
		return x.TransactionConditions
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetTaxExSourceCurrencyCode() string {
	if x != nil {
		return x.TaxExSourceCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetTaxExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExSourceCurrencyBaseRate
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetTaxExTargetCurrencyCode() string {
	if x != nil {
		return x.TaxExTargetCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetTaxExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExTargetCurrencyBaseRate
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetTaxExExchangeMarketId() uint32 {
	if x != nil {
		return x.TaxExExchangeMarketId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetTaxExCalculationRate() float64 {
	if x != nil {
		return x.TaxExCalculationRate
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetTaxExMathematicOperatorCode() string {
	if x != nil {
		return x.TaxExMathematicOperatorCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPricingExSourceCurrencyCode() string {
	if x != nil {
		return x.PricingExSourceCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPricingExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExSourceCurrencyBaseRate
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPricingExTargetCurrencyCode() string {
	if x != nil {
		return x.PricingExTargetCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPricingExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExTargetCurrencyBaseRate
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPricingExExchangeMarketId() uint32 {
	if x != nil {
		return x.PricingExExchangeMarketId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetPricingExCalculationRate() float64 {
	if x != nil {
		return x.PricingExCalculationRate
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetPricingExMathematicOperatorCode() string {
	if x != nil {
		return x.PricingExMathematicOperatorCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPaymentExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentExSourceCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPaymentExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExSourceCurrencyBaseRate
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPaymentExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentExTargetCurrencyCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPaymentExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExTargetCurrencyBaseRate
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetPaymentExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentExExchangeMarketId
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetPaymentExCalculationRate() float64 {
	if x != nil {
		return x.PaymentExCalculationRate
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetPaymentExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentExMathematicOperatorCode
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetDestinationCountry() string {
	if x != nil {
		return x.DestinationCountry
	}
	return ""
}

func (x *PurchaseOrderHeaderD) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetTaxExclusiveAmount() float64 {
	if x != nil {
		return x.TaxExclusiveAmount
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetTaxInclusiveAmount() float64 {
	if x != nil {
		return x.TaxInclusiveAmount
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetAllowanceTotalAmount() float64 {
	if x != nil {
		return x.AllowanceTotalAmount
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetChargeTotalAmount() float64 {
	if x != nil {
		return x.ChargeTotalAmount
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetWithholdingTaxTotalAmount() float64 {
	if x != nil {
		return x.WithholdingTaxTotalAmount
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetPayableRoundingAmount() float64 {
	if x != nil {
		return x.PayableRoundingAmount
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetPayableAmount() float64 {
	if x != nil {
		return x.PayableAmount
	}
	return 0
}

func (x *PurchaseOrderHeaderD) GetPayableAlternativeAmount() float64 {
	if x != nil {
		return x.PayableAlternativeAmount
	}
	return 0
}

type PurchaseOrderHeaderT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueDate      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ValidityPeriod *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	TaxExDate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=tax_ex_date,json=taxExDate,proto3" json:"tax_ex_date,omitempty"`
	PricingExDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=pricing_ex_date,json=pricingExDate,proto3" json:"pricing_ex_date,omitempty"`
	PaymentExDate  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=payment_ex_date,json=paymentExDate,proto3" json:"payment_ex_date,omitempty"`
}

func (x *PurchaseOrderHeaderT) Reset() {
	*x = PurchaseOrderHeaderT{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseOrderHeaderT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderHeaderT) ProtoMessage() {}

func (x *PurchaseOrderHeaderT) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderHeaderT.ProtoReflect.Descriptor instead.
func (*PurchaseOrderHeaderT) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{2}
}

func (x *PurchaseOrderHeaderT) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *PurchaseOrderHeaderT) GetValidityPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

func (x *PurchaseOrderHeaderT) GetTaxExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TaxExDate
	}
	return nil
}

func (x *PurchaseOrderHeaderT) GetPricingExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PricingExDate
	}
	return nil
}

func (x *PurchaseOrderHeaderT) GetPaymentExDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentExDate
	}
	return nil
}

type CreatePurchaseOrderHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PohId                           string                            `protobuf:"bytes,1,opt,name=poh_id,json=pohId,proto3" json:"poh_id,omitempty"`
	SalesOrderId                    string                            `protobuf:"bytes,2,opt,name=sales_order_id,json=salesOrderId,proto3" json:"sales_order_id,omitempty"`
	IssueDate                       string                            `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	OrderTypeCode                   string                            `protobuf:"bytes,4,opt,name=order_type_code,json=orderTypeCode,proto3" json:"order_type_code,omitempty"`
	Note                            string                            `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	RequestedInvoiceCurrencyCode    string                            `protobuf:"bytes,6,opt,name=requested_invoice_currency_code,json=requestedInvoiceCurrencyCode,proto3" json:"requested_invoice_currency_code,omitempty"`
	DocumentCurrencyCode            string                            `protobuf:"bytes,7,opt,name=document_currency_code,json=documentCurrencyCode,proto3" json:"document_currency_code,omitempty"`
	PricingCurrencyCode             string                            `protobuf:"bytes,8,opt,name=pricing_currency_code,json=pricingCurrencyCode,proto3" json:"pricing_currency_code,omitempty"`
	TaxCurrencyCode                 string                            `protobuf:"bytes,9,opt,name=tax_currency_code,json=taxCurrencyCode,proto3" json:"tax_currency_code,omitempty"`
	AccountingCostCode              string                            `protobuf:"bytes,11,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost                  string                            `protobuf:"bytes,12,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	LineCountNumeric                uint32                            `protobuf:"varint,13,opt,name=line_count_numeric,json=lineCountNumeric,proto3" json:"line_count_numeric,omitempty"`
	ValidityPeriod                  string                            `protobuf:"bytes,14,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	QuotationId                     uint32                            `protobuf:"varint,15,opt,name=quotation_id,json=quotationId,proto3" json:"quotation_id,omitempty"`
	OrderId                         uint32                            `protobuf:"varint,16,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	CatalogueId                     uint32                            `protobuf:"varint,18,opt,name=catalogue_id,json=catalogueId,proto3" json:"catalogue_id,omitempty"`
	BuyerCustomerPartyId            uint32                            `protobuf:"varint,21,opt,name=buyer_customer_party_id,json=buyerCustomerPartyId,proto3" json:"buyer_customer_party_id,omitempty"`
	SellerSupplierPartyId           uint32                            `protobuf:"varint,22,opt,name=seller_supplier_party_id,json=sellerSupplierPartyId,proto3" json:"seller_supplier_party_id,omitempty"`
	OriginatorCustomerPartyId       uint32                            `protobuf:"varint,23,opt,name=originator_customer_party_id,json=originatorCustomerPartyId,proto3" json:"originator_customer_party_id,omitempty"`
	FreightForwarderPartyId         uint32                            `protobuf:"varint,24,opt,name=freight_forwarder_party_id,json=freightForwarderPartyId,proto3" json:"freight_forwarder_party_id,omitempty"`
	AccountingCustomerPartyId       uint32                            `protobuf:"varint,25,opt,name=accounting_customer_party_id,json=accountingCustomerPartyId,proto3" json:"accounting_customer_party_id,omitempty"`
	TransactionConditions           string                            `protobuf:"bytes,26,opt,name=transaction_conditions,json=transactionConditions,proto3" json:"transaction_conditions,omitempty"`
	TaxExSourceCurrencyCode         string                            `protobuf:"bytes,27,opt,name=tax_ex_source_currency_code,json=taxExSourceCurrencyCode,proto3" json:"tax_ex_source_currency_code,omitempty"`
	TaxExSourceCurrencyBaseRate     string                            `protobuf:"bytes,28,opt,name=tax_ex_source_currency_base_rate,json=taxExSourceCurrencyBaseRate,proto3" json:"tax_ex_source_currency_base_rate,omitempty"`
	TaxExTargetCurrencyCode         string                            `protobuf:"bytes,29,opt,name=tax_ex_target_currency_code,json=taxExTargetCurrencyCode,proto3" json:"tax_ex_target_currency_code,omitempty"`
	TaxExTargetCurrencyBaseRate     string                            `protobuf:"bytes,30,opt,name=tax_ex_target_currency_base_rate,json=taxExTargetCurrencyBaseRate,proto3" json:"tax_ex_target_currency_base_rate,omitempty"`
	TaxExExchangeMarketId           uint32                            `protobuf:"varint,31,opt,name=tax_ex_exchange_market_id,json=taxExExchangeMarketId,proto3" json:"tax_ex_exchange_market_id,omitempty"`
	TaxExCalculationRate            float64                           `protobuf:"fixed64,32,opt,name=tax_ex_calculation_rate,json=taxExCalculationRate,proto3" json:"tax_ex_calculation_rate,omitempty"`
	TaxExMathematicOperatorCode     string                            `protobuf:"bytes,33,opt,name=tax_ex_mathematic_operator_code,json=taxExMathematicOperatorCode,proto3" json:"tax_ex_mathematic_operator_code,omitempty"`
	TaxExDate                       string                            `protobuf:"bytes,34,opt,name=tax_ex_date,json=taxExDate,proto3" json:"tax_ex_date,omitempty"`
	PricingExSourceCurrencyCode     string                            `protobuf:"bytes,35,opt,name=pricing_ex_source_currency_code,json=pricingExSourceCurrencyCode,proto3" json:"pricing_ex_source_currency_code,omitempty"`
	PricingExSourceCurrencyBaseRate string                            `protobuf:"bytes,36,opt,name=pricing_ex_source_currency_base_rate,json=pricingExSourceCurrencyBaseRate,proto3" json:"pricing_ex_source_currency_base_rate,omitempty"`
	PricingExTargetCurrencyCode     string                            `protobuf:"bytes,37,opt,name=pricing_ex_target_currency_code,json=pricingExTargetCurrencyCode,proto3" json:"pricing_ex_target_currency_code,omitempty"`
	PricingExTargetCurrencyBaseRate string                            `protobuf:"bytes,38,opt,name=pricing_ex_target_currency_base_rate,json=pricingExTargetCurrencyBaseRate,proto3" json:"pricing_ex_target_currency_base_rate,omitempty"`
	PricingExExchangeMarketId       uint32                            `protobuf:"varint,39,opt,name=pricing_ex_exchange_market_id,json=pricingExExchangeMarketId,proto3" json:"pricing_ex_exchange_market_id,omitempty"`
	PricingExCalculationRate        float64                           `protobuf:"fixed64,40,opt,name=pricing_ex_calculation_rate,json=pricingExCalculationRate,proto3" json:"pricing_ex_calculation_rate,omitempty"`
	PricingExMathematicOperatorCode string                            `protobuf:"bytes,41,opt,name=pricing_ex_mathematic_operator_code,json=pricingExMathematicOperatorCode,proto3" json:"pricing_ex_mathematic_operator_code,omitempty"`
	PricingExDate                   string                            `protobuf:"bytes,42,opt,name=pricing_ex_date,json=pricingExDate,proto3" json:"pricing_ex_date,omitempty"`
	PaymentExSourceCurrencyCode     string                            `protobuf:"bytes,43,opt,name=payment_ex_source_currency_code,json=paymentExSourceCurrencyCode,proto3" json:"payment_ex_source_currency_code,omitempty"`
	PaymentExSourceCurrencyBaseRate string                            `protobuf:"bytes,44,opt,name=payment_ex_source_currency_base_rate,json=paymentExSourceCurrencyBaseRate,proto3" json:"payment_ex_source_currency_base_rate,omitempty"`
	PaymentExTargetCurrencyCode     string                            `protobuf:"bytes,45,opt,name=payment_ex_target_currency_code,json=paymentExTargetCurrencyCode,proto3" json:"payment_ex_target_currency_code,omitempty"`
	PaymentExTargetCurrencyBaseRate string                            `protobuf:"bytes,46,opt,name=payment_ex_target_currency_base_rate,json=paymentExTargetCurrencyBaseRate,proto3" json:"payment_ex_target_currency_base_rate,omitempty"`
	PaymentExExchangeMarketId       uint32                            `protobuf:"varint,47,opt,name=payment_ex_exchange_market_id,json=paymentExExchangeMarketId,proto3" json:"payment_ex_exchange_market_id,omitempty"`
	PaymentExCalculationRate        float64                           `protobuf:"fixed64,48,opt,name=payment_ex_calculation_rate,json=paymentExCalculationRate,proto3" json:"payment_ex_calculation_rate,omitempty"`
	PaymentExMathematicOperatorCode string                            `protobuf:"bytes,49,opt,name=payment_ex_mathematic_operator_code,json=paymentExMathematicOperatorCode,proto3" json:"payment_ex_mathematic_operator_code,omitempty"`
	PaymentExDate                   string                            `protobuf:"bytes,50,opt,name=payment_ex_date,json=paymentExDate,proto3" json:"payment_ex_date,omitempty"`
	DestinationCountry              string                            `protobuf:"bytes,51,opt,name=destination_country,json=destinationCountry,proto3" json:"destination_country,omitempty"`
	LineExtensionAmount             float64                           `protobuf:"fixed64,52,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TaxExclusiveAmount              float64                           `protobuf:"fixed64,53,opt,name=tax_exclusive_amount,json=taxExclusiveAmount,proto3" json:"tax_exclusive_amount,omitempty"`
	TaxInclusiveAmount              float64                           `protobuf:"fixed64,54,opt,name=tax_inclusive_amount,json=taxInclusiveAmount,proto3" json:"tax_inclusive_amount,omitempty"`
	AllowanceTotalAmount            float64                           `protobuf:"fixed64,55,opt,name=allowance_total_amount,json=allowanceTotalAmount,proto3" json:"allowance_total_amount,omitempty"`
	ChargeTotalAmount               float64                           `protobuf:"fixed64,56,opt,name=charge_total_amount,json=chargeTotalAmount,proto3" json:"charge_total_amount,omitempty"`
	WithholdingTaxTotalAmount       float64                           `protobuf:"fixed64,57,opt,name=withholding_tax_total_amount,json=withholdingTaxTotalAmount,proto3" json:"withholding_tax_total_amount,omitempty"`
	PrepaidAmount                   float64                           `protobuf:"fixed64,58,opt,name=prepaid_amount,json=prepaidAmount,proto3" json:"prepaid_amount,omitempty"`
	PayableRoundingAmount           float64                           `protobuf:"fixed64,59,opt,name=payable_rounding_amount,json=payableRoundingAmount,proto3" json:"payable_rounding_amount,omitempty"`
	PayableAmount                   float64                           `protobuf:"fixed64,60,opt,name=payable_amount,json=payableAmount,proto3" json:"payable_amount,omitempty"`
	PayableAlternativeAmount        float64                           `protobuf:"fixed64,61,opt,name=payable_alternative_amount,json=payableAlternativeAmount,proto3" json:"payable_alternative_amount,omitempty"`
	UserId                          string                            `protobuf:"bytes,62,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                       string                            `protobuf:"bytes,63,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                       string                            `protobuf:"bytes,64,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PurchaseOrderLines              []*CreatePurchaseOrderLineRequest `protobuf:"bytes,65,rep,name=purchase_order_lines,json=purchaseOrderLines,proto3" json:"purchase_order_lines,omitempty"`
}

func (x *CreatePurchaseOrderHeaderRequest) Reset() {
	*x = CreatePurchaseOrderHeaderRequest{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePurchaseOrderHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderHeaderRequest) ProtoMessage() {}

func (x *CreatePurchaseOrderHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderHeaderRequest.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderHeaderRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePurchaseOrderHeaderRequest) GetPohId() string {
	if x != nil {
		return x.PohId
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetSalesOrderId() string {
	if x != nil {
		return x.SalesOrderId
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetOrderTypeCode() string {
	if x != nil {
		return x.OrderTypeCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetRequestedInvoiceCurrencyCode() string {
	if x != nil {
		return x.RequestedInvoiceCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetDocumentCurrencyCode() string {
	if x != nil {
		return x.DocumentCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPricingCurrencyCode() string {
	if x != nil {
		return x.PricingCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxCurrencyCode() string {
	if x != nil {
		return x.TaxCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetLineCountNumeric() uint32 {
	if x != nil {
		return x.LineCountNumeric
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetValidityPeriod() string {
	if x != nil {
		return x.ValidityPeriod
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetQuotationId() uint32 {
	if x != nil {
		return x.QuotationId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetCatalogueId() uint32 {
	if x != nil {
		return x.CatalogueId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetBuyerCustomerPartyId() uint32 {
	if x != nil {
		return x.BuyerCustomerPartyId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetSellerSupplierPartyId() uint32 {
	if x != nil {
		return x.SellerSupplierPartyId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetOriginatorCustomerPartyId() uint32 {
	if x != nil {
		return x.OriginatorCustomerPartyId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetFreightForwarderPartyId() uint32 {
	if x != nil {
		return x.FreightForwarderPartyId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetAccountingCustomerPartyId() uint32 {
	if x != nil {
		return x.AccountingCustomerPartyId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetTransactionConditions() string {
	if x != nil {
		return x.TransactionConditions
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxExSourceCurrencyCode() string {
	if x != nil {
		return x.TaxExSourceCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxExTargetCurrencyCode() string {
	if x != nil {
		return x.TaxExTargetCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.TaxExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxExExchangeMarketId() uint32 {
	if x != nil {
		return x.TaxExExchangeMarketId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxExCalculationRate() float64 {
	if x != nil {
		return x.TaxExCalculationRate
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxExMathematicOperatorCode() string {
	if x != nil {
		return x.TaxExMathematicOperatorCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxExDate() string {
	if x != nil {
		return x.TaxExDate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPricingExSourceCurrencyCode() string {
	if x != nil {
		return x.PricingExSourceCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPricingExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPricingExTargetCurrencyCode() string {
	if x != nil {
		return x.PricingExTargetCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPricingExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PricingExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPricingExExchangeMarketId() uint32 {
	if x != nil {
		return x.PricingExExchangeMarketId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetPricingExCalculationRate() float64 {
	if x != nil {
		return x.PricingExCalculationRate
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetPricingExMathematicOperatorCode() string {
	if x != nil {
		return x.PricingExMathematicOperatorCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPricingExDate() string {
	if x != nil {
		return x.PricingExDate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPaymentExSourceCurrencyCode() string {
	if x != nil {
		return x.PaymentExSourceCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPaymentExSourceCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExSourceCurrencyBaseRate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPaymentExTargetCurrencyCode() string {
	if x != nil {
		return x.PaymentExTargetCurrencyCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPaymentExTargetCurrencyBaseRate() string {
	if x != nil {
		return x.PaymentExTargetCurrencyBaseRate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPaymentExExchangeMarketId() uint32 {
	if x != nil {
		return x.PaymentExExchangeMarketId
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetPaymentExCalculationRate() float64 {
	if x != nil {
		return x.PaymentExCalculationRate
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetPaymentExMathematicOperatorCode() string {
	if x != nil {
		return x.PaymentExMathematicOperatorCode
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPaymentExDate() string {
	if x != nil {
		return x.PaymentExDate
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetDestinationCountry() string {
	if x != nil {
		return x.DestinationCountry
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxExclusiveAmount() float64 {
	if x != nil {
		return x.TaxExclusiveAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetTaxInclusiveAmount() float64 {
	if x != nil {
		return x.TaxInclusiveAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetAllowanceTotalAmount() float64 {
	if x != nil {
		return x.AllowanceTotalAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetChargeTotalAmount() float64 {
	if x != nil {
		return x.ChargeTotalAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetWithholdingTaxTotalAmount() float64 {
	if x != nil {
		return x.WithholdingTaxTotalAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetPrepaidAmount() float64 {
	if x != nil {
		return x.PrepaidAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetPayableRoundingAmount() float64 {
	if x != nil {
		return x.PayableRoundingAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetPayableAmount() float64 {
	if x != nil {
		return x.PayableAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetPayableAlternativeAmount() float64 {
	if x != nil {
		return x.PayableAlternativeAmount
	}
	return 0
}

func (x *CreatePurchaseOrderHeaderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreatePurchaseOrderHeaderRequest) GetPurchaseOrderLines() []*CreatePurchaseOrderLineRequest {
	if x != nil {
		return x.PurchaseOrderLines
	}
	return nil
}

type CreatePurchaseOrderHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseOrderHeader *PurchaseOrderHeader `protobuf:"bytes,1,opt,name=purchase_order_header,json=purchaseOrderHeader,proto3" json:"purchase_order_header,omitempty"`
}

func (x *CreatePurchaseOrderHeaderResponse) Reset() {
	*x = CreatePurchaseOrderHeaderResponse{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePurchaseOrderHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderHeaderResponse) ProtoMessage() {}

func (x *CreatePurchaseOrderHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderHeaderResponse.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderHeaderResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePurchaseOrderHeaderResponse) GetPurchaseOrderHeader() *PurchaseOrderHeader {
	if x != nil {
		return x.PurchaseOrderHeader
	}
	return nil
}

type GetPurchaseOrderHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetPurchaseOrderHeaderRequest) Reset() {
	*x = GetPurchaseOrderHeaderRequest{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPurchaseOrderHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderHeaderRequest) ProtoMessage() {}

func (x *GetPurchaseOrderHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderHeaderRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{5}
}

func (x *GetPurchaseOrderHeaderRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetPurchaseOrderHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseOrderHeader *PurchaseOrderHeader `protobuf:"bytes,1,opt,name=purchase_order_header,json=purchaseOrderHeader,proto3" json:"purchase_order_header,omitempty"`
}

func (x *GetPurchaseOrderHeaderResponse) Reset() {
	*x = GetPurchaseOrderHeaderResponse{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPurchaseOrderHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderHeaderResponse) ProtoMessage() {}

func (x *GetPurchaseOrderHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderHeaderResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{6}
}

func (x *GetPurchaseOrderHeaderResponse) GetPurchaseOrderHeader() *PurchaseOrderHeader {
	if x != nil {
		return x.PurchaseOrderHeader
	}
	return nil
}

type GetPurchaseOrderHeaderByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetPurchaseOrderHeaderByPkRequest) Reset() {
	*x = GetPurchaseOrderHeaderByPkRequest{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPurchaseOrderHeaderByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderHeaderByPkRequest) ProtoMessage() {}

func (x *GetPurchaseOrderHeaderByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderHeaderByPkRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderHeaderByPkRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{7}
}

func (x *GetPurchaseOrderHeaderByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetPurchaseOrderHeaderByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseOrderHeader *PurchaseOrderHeader `protobuf:"bytes,1,opt,name=purchase_order_header,json=purchaseOrderHeader,proto3" json:"purchase_order_header,omitempty"`
}

func (x *GetPurchaseOrderHeaderByPkResponse) Reset() {
	*x = GetPurchaseOrderHeaderByPkResponse{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPurchaseOrderHeaderByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderHeaderByPkResponse) ProtoMessage() {}

func (x *GetPurchaseOrderHeaderByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderHeaderByPkResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderHeaderByPkResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{8}
}

func (x *GetPurchaseOrderHeaderByPkResponse) GetPurchaseOrderHeader() *PurchaseOrderHeader {
	if x != nil {
		return x.PurchaseOrderHeader
	}
	return nil
}

type GetPurchaseOrderHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseOrderHeaders []*PurchaseOrderHeader `protobuf:"bytes,1,rep,name=purchase_order_headers,json=purchaseOrderHeaders,proto3" json:"purchase_order_headers,omitempty"`
	NextCursor           string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetPurchaseOrderHeadersResponse) Reset() {
	*x = GetPurchaseOrderHeadersResponse{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPurchaseOrderHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderHeadersResponse) ProtoMessage() {}

func (x *GetPurchaseOrderHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderHeadersResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderHeadersResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{9}
}

func (x *GetPurchaseOrderHeadersResponse) GetPurchaseOrderHeaders() []*PurchaseOrderHeader {
	if x != nil {
		return x.PurchaseOrderHeaders
	}
	return nil
}

func (x *GetPurchaseOrderHeadersResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetPurchaseOrderHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetPurchaseOrderHeadersRequest) Reset() {
	*x = GetPurchaseOrderHeadersRequest{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPurchaseOrderHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderHeadersRequest) ProtoMessage() {}

func (x *GetPurchaseOrderHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderHeadersRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderHeadersRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{10}
}

func (x *GetPurchaseOrderHeadersRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetPurchaseOrderHeadersRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetPurchaseOrderHeadersRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetPurchaseOrderHeadersRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type PurchaseOrderLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseOrderLineD *PurchaseOrderLineD `protobuf:"bytes,1,opt,name=purchase_order_line_d,json=purchaseOrderLineD,proto3" json:"purchase_order_line_d,omitempty"`
	PurchaseOrderLineT *PurchaseOrderLineT `protobuf:"bytes,2,opt,name=purchase_order_line_t,json=purchaseOrderLineT,proto3" json:"purchase_order_line_t,omitempty"`
	CrUpdUser          *v1.CrUpdUser       `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime          *v1.CrUpdTime       `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *PurchaseOrderLine) Reset() {
	*x = PurchaseOrderLine{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseOrderLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderLine) ProtoMessage() {}

func (x *PurchaseOrderLine) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderLine.ProtoReflect.Descriptor instead.
func (*PurchaseOrderLine) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{11}
}

func (x *PurchaseOrderLine) GetPurchaseOrderLineD() *PurchaseOrderLineD {
	if x != nil {
		return x.PurchaseOrderLineD
	}
	return nil
}

func (x *PurchaseOrderLine) GetPurchaseOrderLineT() *PurchaseOrderLineT {
	if x != nil {
		return x.PurchaseOrderLineT
	}
	return nil
}

func (x *PurchaseOrderLine) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PurchaseOrderLine) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type PurchaseOrderLineD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                     []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                       string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	PolId                     string  `protobuf:"bytes,4,opt,name=pol_id,json=polId,proto3" json:"pol_id,omitempty"`
	SubstitutionStatusCode    string  `protobuf:"bytes,5,opt,name=substitution_status_code,json=substitutionStatusCode,proto3" json:"substitution_status_code,omitempty"`
	Note                      string  `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	SalesOrderId              string  `protobuf:"bytes,7,opt,name=sales_order_id,json=salesOrderId,proto3" json:"sales_order_id,omitempty"`
	LineStatusCode            string  `protobuf:"bytes,8,opt,name=line_status_code,json=lineStatusCode,proto3" json:"line_status_code,omitempty"`
	Quantity                  float64 `protobuf:"fixed64,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	LineExtensionAmount       float64 `protobuf:"fixed64,10,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TotalTaxAmount            float64 `protobuf:"fixed64,11,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	MinimumQuantity           float64 `protobuf:"fixed64,12,opt,name=minimum_quantity,json=minimumQuantity,proto3" json:"minimum_quantity,omitempty"`
	MaximumQuantity           float64 `protobuf:"fixed64,13,opt,name=maximum_quantity,json=maximumQuantity,proto3" json:"maximum_quantity,omitempty"`
	MinimumBackorderQuantity  float64 `protobuf:"fixed64,14,opt,name=minimum_backorder_quantity,json=minimumBackorderQuantity,proto3" json:"minimum_backorder_quantity,omitempty"`
	MaximumBackorderQuantity  float64 `protobuf:"fixed64,15,opt,name=maximum_backorder_quantity,json=maximumBackorderQuantity,proto3" json:"maximum_backorder_quantity,omitempty"`
	InspectionMethodCode      string  `protobuf:"bytes,16,opt,name=inspection_method_code,json=inspectionMethodCode,proto3" json:"inspection_method_code,omitempty"`
	PartialDeliveryIndicator  bool    `protobuf:"varint,17,opt,name=partial_delivery_indicator,json=partialDeliveryIndicator,proto3" json:"partial_delivery_indicator,omitempty"`
	BackOrderAllowedIndicator bool    `protobuf:"varint,18,opt,name=back_order_allowed_indicator,json=backOrderAllowedIndicator,proto3" json:"back_order_allowed_indicator,omitempty"`
	AccountingCostCode        string  `protobuf:"bytes,19,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost            string  `protobuf:"bytes,20,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	WarrantyInformation       string  `protobuf:"bytes,21,opt,name=warranty_information,json=warrantyInformation,proto3" json:"warranty_information,omitempty"`
	OriginatorPartyId         uint32  `protobuf:"varint,22,opt,name=originator_party_id,json=originatorPartyId,proto3" json:"originator_party_id,omitempty"`
	ItemId                    uint32  `protobuf:"varint,23,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PriceAmount               float64 `protobuf:"fixed64,24,opt,name=price_amount,json=priceAmount,proto3" json:"price_amount,omitempty"`
	PriceBaseQuantity         float64 `protobuf:"fixed64,25,opt,name=price_base_quantity,json=priceBaseQuantity,proto3" json:"price_base_quantity,omitempty"`
	PriceChangeReason         string  `protobuf:"bytes,26,opt,name=price_change_reason,json=priceChangeReason,proto3" json:"price_change_reason,omitempty"`
	PriceTypeCode             string  `protobuf:"bytes,27,opt,name=price_type_code,json=priceTypeCode,proto3" json:"price_type_code,omitempty"`
	PriceType                 string  `protobuf:"bytes,28,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`
	OrderableUnitFactorRate   float64 `protobuf:"fixed64,29,opt,name=orderable_unit_factor_rate,json=orderableUnitFactorRate,proto3" json:"orderable_unit_factor_rate,omitempty"`
	PriceListId               uint32  `protobuf:"varint,30,opt,name=price_list_id,json=priceListId,proto3" json:"price_list_id,omitempty"`
	PurchaseOrderHeaderId     uint32  `protobuf:"varint,31,opt,name=purchase_order_header_id,json=purchaseOrderHeaderId,proto3" json:"purchase_order_header_id,omitempty"`
}

func (x *PurchaseOrderLineD) Reset() {
	*x = PurchaseOrderLineD{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseOrderLineD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderLineD) ProtoMessage() {}

func (x *PurchaseOrderLineD) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderLineD.ProtoReflect.Descriptor instead.
func (*PurchaseOrderLineD) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{12}
}

func (x *PurchaseOrderLineD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchaseOrderLineD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PurchaseOrderLineD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PurchaseOrderLineD) GetPolId() string {
	if x != nil {
		return x.PolId
	}
	return ""
}

func (x *PurchaseOrderLineD) GetSubstitutionStatusCode() string {
	if x != nil {
		return x.SubstitutionStatusCode
	}
	return ""
}

func (x *PurchaseOrderLineD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PurchaseOrderLineD) GetSalesOrderId() string {
	if x != nil {
		return x.SalesOrderId
	}
	return ""
}

func (x *PurchaseOrderLineD) GetLineStatusCode() string {
	if x != nil {
		return x.LineStatusCode
	}
	return ""
}

func (x *PurchaseOrderLineD) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PurchaseOrderLineD) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *PurchaseOrderLineD) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *PurchaseOrderLineD) GetMinimumQuantity() float64 {
	if x != nil {
		return x.MinimumQuantity
	}
	return 0
}

func (x *PurchaseOrderLineD) GetMaximumQuantity() float64 {
	if x != nil {
		return x.MaximumQuantity
	}
	return 0
}

func (x *PurchaseOrderLineD) GetMinimumBackorderQuantity() float64 {
	if x != nil {
		return x.MinimumBackorderQuantity
	}
	return 0
}

func (x *PurchaseOrderLineD) GetMaximumBackorderQuantity() float64 {
	if x != nil {
		return x.MaximumBackorderQuantity
	}
	return 0
}

func (x *PurchaseOrderLineD) GetInspectionMethodCode() string {
	if x != nil {
		return x.InspectionMethodCode
	}
	return ""
}

func (x *PurchaseOrderLineD) GetPartialDeliveryIndicator() bool {
	if x != nil {
		return x.PartialDeliveryIndicator
	}
	return false
}

func (x *PurchaseOrderLineD) GetBackOrderAllowedIndicator() bool {
	if x != nil {
		return x.BackOrderAllowedIndicator
	}
	return false
}

func (x *PurchaseOrderLineD) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *PurchaseOrderLineD) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *PurchaseOrderLineD) GetWarrantyInformation() string {
	if x != nil {
		return x.WarrantyInformation
	}
	return ""
}

func (x *PurchaseOrderLineD) GetOriginatorPartyId() uint32 {
	if x != nil {
		return x.OriginatorPartyId
	}
	return 0
}

func (x *PurchaseOrderLineD) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PurchaseOrderLineD) GetPriceAmount() float64 {
	if x != nil {
		return x.PriceAmount
	}
	return 0
}

func (x *PurchaseOrderLineD) GetPriceBaseQuantity() float64 {
	if x != nil {
		return x.PriceBaseQuantity
	}
	return 0
}

func (x *PurchaseOrderLineD) GetPriceChangeReason() string {
	if x != nil {
		return x.PriceChangeReason
	}
	return ""
}

func (x *PurchaseOrderLineD) GetPriceTypeCode() string {
	if x != nil {
		return x.PriceTypeCode
	}
	return ""
}

func (x *PurchaseOrderLineD) GetPriceType() string {
	if x != nil {
		return x.PriceType
	}
	return ""
}

func (x *PurchaseOrderLineD) GetOrderableUnitFactorRate() float64 {
	if x != nil {
		return x.OrderableUnitFactorRate
	}
	return 0
}

func (x *PurchaseOrderLineD) GetPriceListId() uint32 {
	if x != nil {
		return x.PriceListId
	}
	return 0
}

func (x *PurchaseOrderLineD) GetPurchaseOrderHeaderId() uint32 {
	if x != nil {
		return x.PurchaseOrderHeaderId
	}
	return 0
}

type PurchaseOrderLineT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceValidityPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=price_validity_period_start_date,json=priceValidityPeriodStartDate,proto3" json:"price_validity_period_start_date,omitempty"`
	PriceValidityPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=price_validity_period_end_date,json=priceValidityPeriodEndDate,proto3" json:"price_validity_period_end_date,omitempty"`
}

func (x *PurchaseOrderLineT) Reset() {
	*x = PurchaseOrderLineT{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseOrderLineT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderLineT) ProtoMessage() {}

func (x *PurchaseOrderLineT) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderLineT.ProtoReflect.Descriptor instead.
func (*PurchaseOrderLineT) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{13}
}

func (x *PurchaseOrderLineT) GetPriceValidityPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PriceValidityPeriodStartDate
	}
	return nil
}

func (x *PurchaseOrderLineT) GetPriceValidityPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PriceValidityPeriodEndDate
	}
	return nil
}

type CreatePurchaseOrderLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolId                        string  `protobuf:"bytes,1,opt,name=pol_id,json=polId,proto3" json:"pol_id,omitempty"`
	SubstitutionStatusCode       string  `protobuf:"bytes,2,opt,name=substitution_status_code,json=substitutionStatusCode,proto3" json:"substitution_status_code,omitempty"`
	Note                         string  `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	SalesOrderId                 string  `protobuf:"bytes,4,opt,name=sales_order_id,json=salesOrderId,proto3" json:"sales_order_id,omitempty"`
	LineStatusCode               string  `protobuf:"bytes,5,opt,name=line_status_code,json=lineStatusCode,proto3" json:"line_status_code,omitempty"`
	Quantity                     float64 `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	LineExtensionAmount          float64 `protobuf:"fixed64,7,opt,name=line_extension_amount,json=lineExtensionAmount,proto3" json:"line_extension_amount,omitempty"`
	TotalTaxAmount               float64 `protobuf:"fixed64,8,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	MinimumQuantity              float64 `protobuf:"fixed64,9,opt,name=minimum_quantity,json=minimumQuantity,proto3" json:"minimum_quantity,omitempty"`
	MaximumQuantity              float64 `protobuf:"fixed64,10,opt,name=maximum_quantity,json=maximumQuantity,proto3" json:"maximum_quantity,omitempty"`
	MinimumBackorderQuantity     float64 `protobuf:"fixed64,11,opt,name=minimum_backorder_quantity,json=minimumBackorderQuantity,proto3" json:"minimum_backorder_quantity,omitempty"`
	MaximumBackorderQuantity     float64 `protobuf:"fixed64,12,opt,name=maximum_backorder_quantity,json=maximumBackorderQuantity,proto3" json:"maximum_backorder_quantity,omitempty"`
	InspectionMethodCode         string  `protobuf:"bytes,13,opt,name=inspection_method_code,json=inspectionMethodCode,proto3" json:"inspection_method_code,omitempty"`
	PartialDeliveryIndicator     bool    `protobuf:"varint,14,opt,name=partial_delivery_indicator,json=partialDeliveryIndicator,proto3" json:"partial_delivery_indicator,omitempty"`
	BackOrderAllowedIndicator    bool    `protobuf:"varint,15,opt,name=back_order_allowed_indicator,json=backOrderAllowedIndicator,proto3" json:"back_order_allowed_indicator,omitempty"`
	AccountingCostCode           string  `protobuf:"bytes,16,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost               string  `protobuf:"bytes,17,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	WarrantyInformation          string  `protobuf:"bytes,18,opt,name=warranty_information,json=warrantyInformation,proto3" json:"warranty_information,omitempty"`
	OriginatorPartyId            uint32  `protobuf:"varint,19,opt,name=originator_party_id,json=originatorPartyId,proto3" json:"originator_party_id,omitempty"`
	ItemId                       uint32  `protobuf:"varint,20,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PriceAmount                  float64 `protobuf:"fixed64,21,opt,name=price_amount,json=priceAmount,proto3" json:"price_amount,omitempty"`
	PriceBaseQuantity            float64 `protobuf:"fixed64,22,opt,name=price_base_quantity,json=priceBaseQuantity,proto3" json:"price_base_quantity,omitempty"`
	PriceChangeReason            string  `protobuf:"bytes,23,opt,name=price_change_reason,json=priceChangeReason,proto3" json:"price_change_reason,omitempty"`
	PriceTypeCode                string  `protobuf:"bytes,24,opt,name=price_type_code,json=priceTypeCode,proto3" json:"price_type_code,omitempty"`
	PriceType                    string  `protobuf:"bytes,25,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`
	OrderableUnitFactorRate      float64 `protobuf:"fixed64,26,opt,name=orderable_unit_factor_rate,json=orderableUnitFactorRate,proto3" json:"orderable_unit_factor_rate,omitempty"`
	PriceValidityPeriodStartDate string  `protobuf:"bytes,27,opt,name=price_validity_period_start_date,json=priceValidityPeriodStartDate,proto3" json:"price_validity_period_start_date,omitempty"`
	PriceValidityPeriodEndDate   string  `protobuf:"bytes,28,opt,name=price_validity_period_end_date,json=priceValidityPeriodEndDate,proto3" json:"price_validity_period_end_date,omitempty"`
	PriceListId                  uint32  `protobuf:"varint,29,opt,name=price_list_id,json=priceListId,proto3" json:"price_list_id,omitempty"`
	PurchaseOrderHeaderId        uint32  `protobuf:"varint,30,opt,name=purchase_order_header_id,json=purchaseOrderHeaderId,proto3" json:"purchase_order_header_id,omitempty"`
	UserId                       string  `protobuf:"bytes,31,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string  `protobuf:"bytes,32,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string  `protobuf:"bytes,33,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePurchaseOrderLineRequest) Reset() {
	*x = CreatePurchaseOrderLineRequest{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePurchaseOrderLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderLineRequest) ProtoMessage() {}

func (x *CreatePurchaseOrderLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderLineRequest.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderLineRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{14}
}

func (x *CreatePurchaseOrderLineRequest) GetPolId() string {
	if x != nil {
		return x.PolId
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetSubstitutionStatusCode() string {
	if x != nil {
		return x.SubstitutionStatusCode
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetSalesOrderId() string {
	if x != nil {
		return x.SalesOrderId
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetLineStatusCode() string {
	if x != nil {
		return x.LineStatusCode
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetLineExtensionAmount() float64 {
	if x != nil {
		return x.LineExtensionAmount
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetMinimumQuantity() float64 {
	if x != nil {
		return x.MinimumQuantity
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetMaximumQuantity() float64 {
	if x != nil {
		return x.MaximumQuantity
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetMinimumBackorderQuantity() float64 {
	if x != nil {
		return x.MinimumBackorderQuantity
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetMaximumBackorderQuantity() float64 {
	if x != nil {
		return x.MaximumBackorderQuantity
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetInspectionMethodCode() string {
	if x != nil {
		return x.InspectionMethodCode
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetPartialDeliveryIndicator() bool {
	if x != nil {
		return x.PartialDeliveryIndicator
	}
	return false
}

func (x *CreatePurchaseOrderLineRequest) GetBackOrderAllowedIndicator() bool {
	if x != nil {
		return x.BackOrderAllowedIndicator
	}
	return false
}

func (x *CreatePurchaseOrderLineRequest) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetWarrantyInformation() string {
	if x != nil {
		return x.WarrantyInformation
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetOriginatorPartyId() uint32 {
	if x != nil {
		return x.OriginatorPartyId
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetPriceAmount() float64 {
	if x != nil {
		return x.PriceAmount
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetPriceBaseQuantity() float64 {
	if x != nil {
		return x.PriceBaseQuantity
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetPriceChangeReason() string {
	if x != nil {
		return x.PriceChangeReason
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetPriceTypeCode() string {
	if x != nil {
		return x.PriceTypeCode
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetPriceType() string {
	if x != nil {
		return x.PriceType
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetOrderableUnitFactorRate() float64 {
	if x != nil {
		return x.OrderableUnitFactorRate
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetPriceValidityPeriodStartDate() string {
	if x != nil {
		return x.PriceValidityPeriodStartDate
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetPriceValidityPeriodEndDate() string {
	if x != nil {
		return x.PriceValidityPeriodEndDate
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetPriceListId() uint32 {
	if x != nil {
		return x.PriceListId
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetPurchaseOrderHeaderId() uint32 {
	if x != nil {
		return x.PurchaseOrderHeaderId
	}
	return 0
}

func (x *CreatePurchaseOrderLineRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePurchaseOrderLineRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePurchaseOrderLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseOrderLine *PurchaseOrderLine `protobuf:"bytes,1,opt,name=purchase_order_line,json=purchaseOrderLine,proto3" json:"purchase_order_line,omitempty"`
}

func (x *CreatePurchaseOrderLineResponse) Reset() {
	*x = CreatePurchaseOrderLineResponse{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePurchaseOrderLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderLineResponse) ProtoMessage() {}

func (x *CreatePurchaseOrderLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderLineResponse.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderLineResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{15}
}

func (x *CreatePurchaseOrderLineResponse) GetPurchaseOrderLine() *PurchaseOrderLine {
	if x != nil {
		return x.PurchaseOrderLine
	}
	return nil
}

type GetPurchaseOrderLinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetPurchaseOrderLinesRequest) Reset() {
	*x = GetPurchaseOrderLinesRequest{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPurchaseOrderLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderLinesRequest) ProtoMessage() {}

func (x *GetPurchaseOrderLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderLinesRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderLinesRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{16}
}

func (x *GetPurchaseOrderLinesRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetPurchaseOrderLinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseOrderLines []*PurchaseOrderLine `protobuf:"bytes,1,rep,name=purchase_order_lines,json=purchaseOrderLines,proto3" json:"purchase_order_lines,omitempty"`
}

func (x *GetPurchaseOrderLinesResponse) Reset() {
	*x = GetPurchaseOrderLinesResponse{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPurchaseOrderLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderLinesResponse) ProtoMessage() {}

func (x *GetPurchaseOrderLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderLinesResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderLinesResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{17}
}

func (x *GetPurchaseOrderLinesResponse) GetPurchaseOrderLines() []*PurchaseOrderLine {
	if x != nil {
		return x.PurchaseOrderLines
	}
	return nil
}

type PurchaseOrderLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseOrderLines []*PurchaseOrderLine `protobuf:"bytes,1,rep,name=purchase_order_lines,json=purchaseOrderLines,proto3" json:"purchase_order_lines,omitempty"`
}

func (x *PurchaseOrderLines) Reset() {
	*x = PurchaseOrderLines{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseOrderLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderLines) ProtoMessage() {}

func (x *PurchaseOrderLines) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderLines.ProtoReflect.Descriptor instead.
func (*PurchaseOrderLines) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{18}
}

func (x *PurchaseOrderLines) GetPurchaseOrderLines() []*PurchaseOrderLine {
	if x != nil {
		return x.PurchaseOrderLines
	}
	return nil
}

type UpdatePurchaseOrderHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderTypeCode                string `protobuf:"bytes,1,opt,name=order_type_code,json=orderTypeCode,proto3" json:"order_type_code,omitempty"`
	Note                         string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	RequestedInvoiceCurrencyCode string `protobuf:"bytes,3,opt,name=requested_invoice_currency_code,json=requestedInvoiceCurrencyCode,proto3" json:"requested_invoice_currency_code,omitempty"`
	DocumentCurrencyCode         string `protobuf:"bytes,4,opt,name=document_currency_code,json=documentCurrencyCode,proto3" json:"document_currency_code,omitempty"`
	PricingCurrencyCode          string `protobuf:"bytes,5,opt,name=pricing_currency_code,json=pricingCurrencyCode,proto3" json:"pricing_currency_code,omitempty"`
	TaxCurrencyCode              string `protobuf:"bytes,6,opt,name=tax_currency_code,json=taxCurrencyCode,proto3" json:"tax_currency_code,omitempty"`
	AccountingCostCode           string `protobuf:"bytes,7,opt,name=accounting_cost_code,json=accountingCostCode,proto3" json:"accounting_cost_code,omitempty"`
	AccountingCost               string `protobuf:"bytes,8,opt,name=accounting_cost,json=accountingCost,proto3" json:"accounting_cost,omitempty"`
	Id                           string `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	UserId                       string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string `protobuf:"bytes,11,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string `protobuf:"bytes,12,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdatePurchaseOrderHeaderRequest) Reset() {
	*x = UpdatePurchaseOrderHeaderRequest{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePurchaseOrderHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseOrderHeaderRequest) ProtoMessage() {}

func (x *UpdatePurchaseOrderHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseOrderHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseOrderHeaderRequest) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{19}
}

func (x *UpdatePurchaseOrderHeaderRequest) GetOrderTypeCode() string {
	if x != nil {
		return x.OrderTypeCode
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetRequestedInvoiceCurrencyCode() string {
	if x != nil {
		return x.RequestedInvoiceCurrencyCode
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetDocumentCurrencyCode() string {
	if x != nil {
		return x.DocumentCurrencyCode
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetPricingCurrencyCode() string {
	if x != nil {
		return x.PricingCurrencyCode
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetTaxCurrencyCode() string {
	if x != nil {
		return x.TaxCurrencyCode
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetAccountingCostCode() string {
	if x != nil {
		return x.AccountingCostCode
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetAccountingCost() string {
	if x != nil {
		return x.AccountingCost
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdatePurchaseOrderHeaderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdatePurchaseOrderHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePurchaseOrderHeaderResponse) Reset() {
	*x = UpdatePurchaseOrderHeaderResponse{}
	mi := &file_order_v1_purchaseorder_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePurchaseOrderHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseOrderHeaderResponse) ProtoMessage() {}

func (x *UpdatePurchaseOrderHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_v1_purchaseorder_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseOrderHeaderResponse.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseOrderHeaderResponse) Descriptor() ([]byte, []int) {
	return file_order_v1_purchaseorder_proto_rawDescGZIP(), []int{20}
}

var File_order_v1_purchaseorder_proto protoreflect.FileDescriptor

var file_order_v1_purchaseorder_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xaf, 0x02, 0x0a, 0x13, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x17, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x52, 0x14, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44,
	0x12, 0x55, 0x0a, 0x17, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x54, 0x52, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xdc, 0x17, 0x0a, 0x14, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x68, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x45,
	0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x78, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x72, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74,
	0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x74, 0x61, 0x78,
	0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45,
	0x0a, 0x20, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x61, 0x78, 0x45, 0x78, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x74, 0x61, 0x78, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78,
	0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x4d,
	0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x40, 0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x4c, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x6d,
	0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x74, 0x61, 0x78, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x1c, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xda, 0x02, 0x0a, 0x14, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x12, 0x39, 0x0a, 0x0a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x74,
	0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x61,
	0x78, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x9a, 0x1a, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x68, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x1f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x78, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x78, 0x45, 0x78, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x45, 0x0a, 0x20, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45,
	0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61,
	0x78, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19,
	0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x74, 0x61, 0x78, 0x45, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78,
	0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x61, 0x78, 0x45, 0x78, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x1f, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x61, 0x78, 0x45, 0x78, 0x4d, 0x61, 0x74,
	0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x45, 0x78, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d,
	0x0a, 0x24, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x1d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x23, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74,
	0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4d, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x6d, 0x61,
	0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61,
	0x78, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x61, 0x78, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x61, 0x78, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70,
	0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x70,
	0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x18, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x5a, 0x0a, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x41, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x13, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0x69, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x77, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x22, 0x95, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x11, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x4f,
	0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x52, 0x12, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x12,
	0x4f, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x52, 0x12, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x54,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbe, 0x0a, 0x0a,
	0x12, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x15, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a,
	0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61,
	0x63, 0x6b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3c, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x63, 0x6b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x16, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x14, 0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x61, 0x72,
	0x72, 0x61, 0x6e, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd8, 0x01,
	0x0a, 0x12, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x54, 0x12, 0x62, 0x0a, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x1e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xf4, 0x0b, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x63,
	0x6b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c,
	0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14,
	0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x6e, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x11, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x22,
	0x56, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x12, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x4d, 0x0a,
	0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xfd, 0x03, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x45, 0x0a,
	0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x78, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xb8, 0x06, 0x0a, 0x1a, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x74, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x28, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x27, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50,
	0x6b, 0x12, 0x2b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75, 0x62, 0x6c, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_v1_purchaseorder_proto_rawDescOnce sync.Once
	file_order_v1_purchaseorder_proto_rawDescData = file_order_v1_purchaseorder_proto_rawDesc
)

func file_order_v1_purchaseorder_proto_rawDescGZIP() []byte {
	file_order_v1_purchaseorder_proto_rawDescOnce.Do(func() {
		file_order_v1_purchaseorder_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_v1_purchaseorder_proto_rawDescData)
	})
	return file_order_v1_purchaseorder_proto_rawDescData
}

var file_order_v1_purchaseorder_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_order_v1_purchaseorder_proto_goTypes = []any{
	(*PurchaseOrderHeader)(nil),                // 0: order.v1.PurchaseOrderHeader
	(*PurchaseOrderHeaderD)(nil),               // 1: order.v1.PurchaseOrderHeaderD
	(*PurchaseOrderHeaderT)(nil),               // 2: order.v1.PurchaseOrderHeaderT
	(*CreatePurchaseOrderHeaderRequest)(nil),   // 3: order.v1.CreatePurchaseOrderHeaderRequest
	(*CreatePurchaseOrderHeaderResponse)(nil),  // 4: order.v1.CreatePurchaseOrderHeaderResponse
	(*GetPurchaseOrderHeaderRequest)(nil),      // 5: order.v1.GetPurchaseOrderHeaderRequest
	(*GetPurchaseOrderHeaderResponse)(nil),     // 6: order.v1.GetPurchaseOrderHeaderResponse
	(*GetPurchaseOrderHeaderByPkRequest)(nil),  // 7: order.v1.GetPurchaseOrderHeaderByPkRequest
	(*GetPurchaseOrderHeaderByPkResponse)(nil), // 8: order.v1.GetPurchaseOrderHeaderByPkResponse
	(*GetPurchaseOrderHeadersResponse)(nil),    // 9: order.v1.GetPurchaseOrderHeadersResponse
	(*GetPurchaseOrderHeadersRequest)(nil),     // 10: order.v1.GetPurchaseOrderHeadersRequest
	(*PurchaseOrderLine)(nil),                  // 11: order.v1.PurchaseOrderLine
	(*PurchaseOrderLineD)(nil),                 // 12: order.v1.PurchaseOrderLineD
	(*PurchaseOrderLineT)(nil),                 // 13: order.v1.PurchaseOrderLineT
	(*CreatePurchaseOrderLineRequest)(nil),     // 14: order.v1.CreatePurchaseOrderLineRequest
	(*CreatePurchaseOrderLineResponse)(nil),    // 15: order.v1.CreatePurchaseOrderLineResponse
	(*GetPurchaseOrderLinesRequest)(nil),       // 16: order.v1.GetPurchaseOrderLinesRequest
	(*GetPurchaseOrderLinesResponse)(nil),      // 17: order.v1.GetPurchaseOrderLinesResponse
	(*PurchaseOrderLines)(nil),                 // 18: order.v1.PurchaseOrderLines
	(*UpdatePurchaseOrderHeaderRequest)(nil),   // 19: order.v1.UpdatePurchaseOrderHeaderRequest
	(*UpdatePurchaseOrderHeaderResponse)(nil),  // 20: order.v1.UpdatePurchaseOrderHeaderResponse
	(*v1.CrUpdUser)(nil),                       // 21: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                       // 22: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),              // 23: google.protobuf.Timestamp
	(*v1.GetRequest)(nil),                      // 24: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                  // 25: common.v1.GetByIdRequest
}
var file_order_v1_purchaseorder_proto_depIdxs = []int32{
	1,  // 0: order.v1.PurchaseOrderHeader.purchase_order_header_d:type_name -> order.v1.PurchaseOrderHeaderD
	2,  // 1: order.v1.PurchaseOrderHeader.purchase_order_header_t:type_name -> order.v1.PurchaseOrderHeaderT
	21, // 2: order.v1.PurchaseOrderHeader.cr_upd_user:type_name -> common.v1.CrUpdUser
	22, // 3: order.v1.PurchaseOrderHeader.cr_upd_time:type_name -> common.v1.CrUpdTime
	23, // 4: order.v1.PurchaseOrderHeaderT.issue_date:type_name -> google.protobuf.Timestamp
	23, // 5: order.v1.PurchaseOrderHeaderT.validity_period:type_name -> google.protobuf.Timestamp
	23, // 6: order.v1.PurchaseOrderHeaderT.tax_ex_date:type_name -> google.protobuf.Timestamp
	23, // 7: order.v1.PurchaseOrderHeaderT.pricing_ex_date:type_name -> google.protobuf.Timestamp
	23, // 8: order.v1.PurchaseOrderHeaderT.payment_ex_date:type_name -> google.protobuf.Timestamp
	14, // 9: order.v1.CreatePurchaseOrderHeaderRequest.purchase_order_lines:type_name -> order.v1.CreatePurchaseOrderLineRequest
	0,  // 10: order.v1.CreatePurchaseOrderHeaderResponse.purchase_order_header:type_name -> order.v1.PurchaseOrderHeader
	24, // 11: order.v1.GetPurchaseOrderHeaderRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 12: order.v1.GetPurchaseOrderHeaderResponse.purchase_order_header:type_name -> order.v1.PurchaseOrderHeader
	25, // 13: order.v1.GetPurchaseOrderHeaderByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 14: order.v1.GetPurchaseOrderHeaderByPkResponse.purchase_order_header:type_name -> order.v1.PurchaseOrderHeader
	0,  // 15: order.v1.GetPurchaseOrderHeadersResponse.purchase_order_headers:type_name -> order.v1.PurchaseOrderHeader
	12, // 16: order.v1.PurchaseOrderLine.purchase_order_line_d:type_name -> order.v1.PurchaseOrderLineD
	13, // 17: order.v1.PurchaseOrderLine.purchase_order_line_t:type_name -> order.v1.PurchaseOrderLineT
	21, // 18: order.v1.PurchaseOrderLine.cr_upd_user:type_name -> common.v1.CrUpdUser
	22, // 19: order.v1.PurchaseOrderLine.cr_upd_time:type_name -> common.v1.CrUpdTime
	23, // 20: order.v1.PurchaseOrderLineT.price_validity_period_start_date:type_name -> google.protobuf.Timestamp
	23, // 21: order.v1.PurchaseOrderLineT.price_validity_period_end_date:type_name -> google.protobuf.Timestamp
	11, // 22: order.v1.CreatePurchaseOrderLineResponse.purchase_order_line:type_name -> order.v1.PurchaseOrderLine
	24, // 23: order.v1.GetPurchaseOrderLinesRequest.get_request:type_name -> common.v1.GetRequest
	11, // 24: order.v1.GetPurchaseOrderLinesResponse.purchase_order_lines:type_name -> order.v1.PurchaseOrderLine
	11, // 25: order.v1.PurchaseOrderLines.purchase_order_lines:type_name -> order.v1.PurchaseOrderLine
	3,  // 26: order.v1.PurchaseOrderHeaderService.CreatePurchaseOrderHeader:input_type -> order.v1.CreatePurchaseOrderHeaderRequest
	10, // 27: order.v1.PurchaseOrderHeaderService.GetPurchaseOrderHeaders:input_type -> order.v1.GetPurchaseOrderHeadersRequest
	5,  // 28: order.v1.PurchaseOrderHeaderService.GetPurchaseOrderHeader:input_type -> order.v1.GetPurchaseOrderHeaderRequest
	7,  // 29: order.v1.PurchaseOrderHeaderService.GetPurchaseOrderHeaderByPk:input_type -> order.v1.GetPurchaseOrderHeaderByPkRequest
	14, // 30: order.v1.PurchaseOrderHeaderService.CreatePurchaseOrderLine:input_type -> order.v1.CreatePurchaseOrderLineRequest
	16, // 31: order.v1.PurchaseOrderHeaderService.GetPurchaseOrderLines:input_type -> order.v1.GetPurchaseOrderLinesRequest
	19, // 32: order.v1.PurchaseOrderHeaderService.UpdatePurchaseOrderHeader:input_type -> order.v1.UpdatePurchaseOrderHeaderRequest
	4,  // 33: order.v1.PurchaseOrderHeaderService.CreatePurchaseOrderHeader:output_type -> order.v1.CreatePurchaseOrderHeaderResponse
	9,  // 34: order.v1.PurchaseOrderHeaderService.GetPurchaseOrderHeaders:output_type -> order.v1.GetPurchaseOrderHeadersResponse
	6,  // 35: order.v1.PurchaseOrderHeaderService.GetPurchaseOrderHeader:output_type -> order.v1.GetPurchaseOrderHeaderResponse
	8,  // 36: order.v1.PurchaseOrderHeaderService.GetPurchaseOrderHeaderByPk:output_type -> order.v1.GetPurchaseOrderHeaderByPkResponse
	15, // 37: order.v1.PurchaseOrderHeaderService.CreatePurchaseOrderLine:output_type -> order.v1.CreatePurchaseOrderLineResponse
	17, // 38: order.v1.PurchaseOrderHeaderService.GetPurchaseOrderLines:output_type -> order.v1.GetPurchaseOrderLinesResponse
	20, // 39: order.v1.PurchaseOrderHeaderService.UpdatePurchaseOrderHeader:output_type -> order.v1.UpdatePurchaseOrderHeaderResponse
	33, // [33:40] is the sub-list for method output_type
	26, // [26:33] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_order_v1_purchaseorder_proto_init() }
func file_order_v1_purchaseorder_proto_init() {
	if File_order_v1_purchaseorder_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_v1_purchaseorder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_v1_purchaseorder_proto_goTypes,
		DependencyIndexes: file_order_v1_purchaseorder_proto_depIdxs,
		MessageInfos:      file_order_v1_purchaseorder_proto_msgTypes,
	}.Build()
	File_order_v1_purchaseorder_proto = out.File
	file_order_v1_purchaseorder_proto_rawDesc = nil
	file_order_v1_purchaseorder_proto_goTypes = nil
	file_order_v1_purchaseorder_proto_depIdxs = nil
}
