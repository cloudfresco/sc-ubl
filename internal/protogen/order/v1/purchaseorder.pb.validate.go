// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/purchaseorder.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PurchaseOrderHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurchaseOrderHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseOrderHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseOrderHeaderMultiError, or nil if none found.
func (m *PurchaseOrderHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseOrderHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPurchaseOrderHeaderD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderHeaderValidationError{
					field:  "PurchaseOrderHeaderD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderHeaderValidationError{
					field:  "PurchaseOrderHeaderD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseOrderHeaderD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderHeaderValidationError{
				field:  "PurchaseOrderHeaderD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPurchaseOrderHeaderT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderHeaderValidationError{
					field:  "PurchaseOrderHeaderT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderHeaderValidationError{
					field:  "PurchaseOrderHeaderT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseOrderHeaderT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderHeaderValidationError{
				field:  "PurchaseOrderHeaderT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderHeaderValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderHeaderValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderHeaderValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderHeaderValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderHeaderValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderHeaderValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PurchaseOrderHeaderMultiError(errors)
	}

	return nil
}

// PurchaseOrderHeaderMultiError is an error wrapping multiple validation
// errors returned by PurchaseOrderHeader.ValidateAll() if the designated
// constraints aren't met.
type PurchaseOrderHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseOrderHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseOrderHeaderMultiError) AllErrors() []error { return m }

// PurchaseOrderHeaderValidationError is the validation error returned by
// PurchaseOrderHeader.Validate if the designated constraints aren't met.
type PurchaseOrderHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseOrderHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseOrderHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseOrderHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseOrderHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseOrderHeaderValidationError) ErrorName() string {
	return "PurchaseOrderHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e PurchaseOrderHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseOrderHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseOrderHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseOrderHeaderValidationError{}

// Validate checks the field values on PurchaseOrderHeaderD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurchaseOrderHeaderD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseOrderHeaderD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseOrderHeaderDMultiError, or nil if none found.
func (m *PurchaseOrderHeaderD) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseOrderHeaderD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PohId

	// no validation rules for SalesOrderId

	// no validation rules for OrderTypeCode

	// no validation rules for Note

	// no validation rules for RequestedInvoiceCurrencyCode

	// no validation rules for DocumentCurrencyCode

	// no validation rules for PricingCurrencyCode

	// no validation rules for TaxCurrencyCode

	// no validation rules for AccountingCostCode

	// no validation rules for AccountingCost

	// no validation rules for LineCountNumeric

	// no validation rules for QuotationId

	// no validation rules for OrderId

	// no validation rules for CatalogueId

	// no validation rules for BuyerCustomerPartyId

	// no validation rules for SellerSupplierPartyId

	// no validation rules for OriginatorCustomerPartyId

	// no validation rules for FreightForwarderPartyId

	// no validation rules for AccountingCustomerPartyId

	// no validation rules for TransactionConditions

	// no validation rules for TaxExSourceCurrencyCode

	// no validation rules for TaxExSourceCurrencyBaseRate

	// no validation rules for TaxExTargetCurrencyCode

	// no validation rules for TaxExTargetCurrencyBaseRate

	// no validation rules for TaxExExchangeMarketId

	// no validation rules for TaxExCalculationRate

	// no validation rules for TaxExMathematicOperatorCode

	// no validation rules for PricingExSourceCurrencyCode

	// no validation rules for PricingExSourceCurrencyBaseRate

	// no validation rules for PricingExTargetCurrencyCode

	// no validation rules for PricingExTargetCurrencyBaseRate

	// no validation rules for PricingExExchangeMarketId

	// no validation rules for PricingExCalculationRate

	// no validation rules for PricingExMathematicOperatorCode

	// no validation rules for PaymentExSourceCurrencyCode

	// no validation rules for PaymentExSourceCurrencyBaseRate

	// no validation rules for PaymentExTargetCurrencyCode

	// no validation rules for PaymentExTargetCurrencyBaseRate

	// no validation rules for PaymentExExchangeMarketId

	// no validation rules for PaymentExCalculationRate

	// no validation rules for PaymentExMathematicOperatorCode

	// no validation rules for DestinationCountry

	// no validation rules for LineExtensionAmount

	// no validation rules for TaxExclusiveAmount

	// no validation rules for TaxInclusiveAmount

	// no validation rules for AllowanceTotalAmount

	// no validation rules for ChargeTotalAmount

	// no validation rules for WithholdingTaxTotalAmount

	// no validation rules for PrepaidAmount

	// no validation rules for PayableRoundingAmount

	// no validation rules for PayableAmount

	// no validation rules for PayableAlternativeAmount

	if len(errors) > 0 {
		return PurchaseOrderHeaderDMultiError(errors)
	}

	return nil
}

// PurchaseOrderHeaderDMultiError is an error wrapping multiple validation
// errors returned by PurchaseOrderHeaderD.ValidateAll() if the designated
// constraints aren't met.
type PurchaseOrderHeaderDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseOrderHeaderDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseOrderHeaderDMultiError) AllErrors() []error { return m }

// PurchaseOrderHeaderDValidationError is the validation error returned by
// PurchaseOrderHeaderD.Validate if the designated constraints aren't met.
type PurchaseOrderHeaderDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseOrderHeaderDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseOrderHeaderDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseOrderHeaderDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseOrderHeaderDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseOrderHeaderDValidationError) ErrorName() string {
	return "PurchaseOrderHeaderDValidationError"
}

// Error satisfies the builtin error interface
func (e PurchaseOrderHeaderDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseOrderHeaderD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseOrderHeaderDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseOrderHeaderDValidationError{}

// Validate checks the field values on PurchaseOrderHeaderT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurchaseOrderHeaderT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseOrderHeaderT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseOrderHeaderTMultiError, or nil if none found.
func (m *PurchaseOrderHeaderT) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseOrderHeaderT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderHeaderTValidationError{
				field:  "IssueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidityPeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "ValidityPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "ValidityPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidityPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderHeaderTValidationError{
				field:  "ValidityPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaxExDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "TaxExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "TaxExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaxExDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderHeaderTValidationError{
				field:  "TaxExDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPricingExDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "PricingExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "PricingExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPricingExDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderHeaderTValidationError{
				field:  "PricingExDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentExDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "PaymentExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderHeaderTValidationError{
					field:  "PaymentExDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentExDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderHeaderTValidationError{
				field:  "PaymentExDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PurchaseOrderHeaderTMultiError(errors)
	}

	return nil
}

// PurchaseOrderHeaderTMultiError is an error wrapping multiple validation
// errors returned by PurchaseOrderHeaderT.ValidateAll() if the designated
// constraints aren't met.
type PurchaseOrderHeaderTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseOrderHeaderTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseOrderHeaderTMultiError) AllErrors() []error { return m }

// PurchaseOrderHeaderTValidationError is the validation error returned by
// PurchaseOrderHeaderT.Validate if the designated constraints aren't met.
type PurchaseOrderHeaderTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseOrderHeaderTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseOrderHeaderTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseOrderHeaderTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseOrderHeaderTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseOrderHeaderTValidationError) ErrorName() string {
	return "PurchaseOrderHeaderTValidationError"
}

// Error satisfies the builtin error interface
func (e PurchaseOrderHeaderTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseOrderHeaderT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseOrderHeaderTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseOrderHeaderTValidationError{}

// Validate checks the field values on CreatePurchaseOrderHeaderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePurchaseOrderHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePurchaseOrderHeaderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePurchaseOrderHeaderRequestMultiError, or nil if none found.
func (m *CreatePurchaseOrderHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePurchaseOrderHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PohId

	// no validation rules for SalesOrderId

	// no validation rules for IssueDate

	// no validation rules for OrderTypeCode

	// no validation rules for Note

	// no validation rules for RequestedInvoiceCurrencyCode

	// no validation rules for DocumentCurrencyCode

	// no validation rules for PricingCurrencyCode

	// no validation rules for TaxCurrencyCode

	// no validation rules for AccountingCostCode

	// no validation rules for AccountingCost

	// no validation rules for LineCountNumeric

	// no validation rules for ValidityPeriod

	// no validation rules for QuotationId

	// no validation rules for OrderId

	// no validation rules for CatalogueId

	// no validation rules for BuyerCustomerPartyId

	// no validation rules for SellerSupplierPartyId

	// no validation rules for OriginatorCustomerPartyId

	// no validation rules for FreightForwarderPartyId

	// no validation rules for AccountingCustomerPartyId

	// no validation rules for TransactionConditions

	// no validation rules for TaxExSourceCurrencyCode

	// no validation rules for TaxExSourceCurrencyBaseRate

	// no validation rules for TaxExTargetCurrencyCode

	// no validation rules for TaxExTargetCurrencyBaseRate

	// no validation rules for TaxExExchangeMarketId

	// no validation rules for TaxExCalculationRate

	// no validation rules for TaxExMathematicOperatorCode

	// no validation rules for TaxExDate

	// no validation rules for PricingExSourceCurrencyCode

	// no validation rules for PricingExSourceCurrencyBaseRate

	// no validation rules for PricingExTargetCurrencyCode

	// no validation rules for PricingExTargetCurrencyBaseRate

	// no validation rules for PricingExExchangeMarketId

	// no validation rules for PricingExCalculationRate

	// no validation rules for PricingExMathematicOperatorCode

	// no validation rules for PricingExDate

	// no validation rules for PaymentExSourceCurrencyCode

	// no validation rules for PaymentExSourceCurrencyBaseRate

	// no validation rules for PaymentExTargetCurrencyCode

	// no validation rules for PaymentExTargetCurrencyBaseRate

	// no validation rules for PaymentExExchangeMarketId

	// no validation rules for PaymentExCalculationRate

	// no validation rules for PaymentExMathematicOperatorCode

	// no validation rules for PaymentExDate

	// no validation rules for DestinationCountry

	// no validation rules for LineExtensionAmount

	// no validation rules for TaxExclusiveAmount

	// no validation rules for TaxInclusiveAmount

	// no validation rules for AllowanceTotalAmount

	// no validation rules for ChargeTotalAmount

	// no validation rules for WithholdingTaxTotalAmount

	// no validation rules for PrepaidAmount

	// no validation rules for PayableRoundingAmount

	// no validation rules for PayableAmount

	// no validation rules for PayableAlternativeAmount

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetPurchaseOrderLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePurchaseOrderHeaderRequestValidationError{
						field:  fmt.Sprintf("PurchaseOrderLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePurchaseOrderHeaderRequestValidationError{
						field:  fmt.Sprintf("PurchaseOrderLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePurchaseOrderHeaderRequestValidationError{
					field:  fmt.Sprintf("PurchaseOrderLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreatePurchaseOrderHeaderRequestMultiError(errors)
	}

	return nil
}

// CreatePurchaseOrderHeaderRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreatePurchaseOrderHeaderRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePurchaseOrderHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePurchaseOrderHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePurchaseOrderHeaderRequestMultiError) AllErrors() []error { return m }

// CreatePurchaseOrderHeaderRequestValidationError is the validation error
// returned by CreatePurchaseOrderHeaderRequest.Validate if the designated
// constraints aren't met.
type CreatePurchaseOrderHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseOrderHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseOrderHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseOrderHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseOrderHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseOrderHeaderRequestValidationError) ErrorName() string {
	return "CreatePurchaseOrderHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseOrderHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseOrderHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseOrderHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseOrderHeaderRequestValidationError{}

// Validate checks the field values on CreatePurchaseOrderHeaderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePurchaseOrderHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePurchaseOrderHeaderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePurchaseOrderHeaderResponseMultiError, or nil if none found.
func (m *CreatePurchaseOrderHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePurchaseOrderHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPurchaseOrderHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePurchaseOrderHeaderResponseValidationError{
					field:  "PurchaseOrderHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePurchaseOrderHeaderResponseValidationError{
					field:  "PurchaseOrderHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseOrderHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePurchaseOrderHeaderResponseValidationError{
				field:  "PurchaseOrderHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePurchaseOrderHeaderResponseMultiError(errors)
	}

	return nil
}

// CreatePurchaseOrderHeaderResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreatePurchaseOrderHeaderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePurchaseOrderHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePurchaseOrderHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePurchaseOrderHeaderResponseMultiError) AllErrors() []error { return m }

// CreatePurchaseOrderHeaderResponseValidationError is the validation error
// returned by CreatePurchaseOrderHeaderResponse.Validate if the designated
// constraints aren't met.
type CreatePurchaseOrderHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseOrderHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseOrderHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseOrderHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseOrderHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseOrderHeaderResponseValidationError) ErrorName() string {
	return "CreatePurchaseOrderHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseOrderHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseOrderHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseOrderHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseOrderHeaderResponseValidationError{}

// Validate checks the field values on GetPurchaseOrderHeaderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseOrderHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderHeaderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderHeaderRequestMultiError, or nil if none found.
func (m *GetPurchaseOrderHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPurchaseOrderHeaderRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPurchaseOrderHeaderRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPurchaseOrderHeaderRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPurchaseOrderHeaderRequestMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderHeaderRequestMultiError is an error wrapping multiple
// validation errors returned by GetPurchaseOrderHeaderRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPurchaseOrderHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderHeaderRequestMultiError) AllErrors() []error { return m }

// GetPurchaseOrderHeaderRequestValidationError is the validation error
// returned by GetPurchaseOrderHeaderRequest.Validate if the designated
// constraints aren't met.
type GetPurchaseOrderHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderHeaderRequestValidationError) ErrorName() string {
	return "GetPurchaseOrderHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderHeaderRequestValidationError{}

// Validate checks the field values on GetPurchaseOrderHeaderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseOrderHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderHeaderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderHeaderResponseMultiError, or nil if none found.
func (m *GetPurchaseOrderHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPurchaseOrderHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPurchaseOrderHeaderResponseValidationError{
					field:  "PurchaseOrderHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPurchaseOrderHeaderResponseValidationError{
					field:  "PurchaseOrderHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseOrderHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPurchaseOrderHeaderResponseValidationError{
				field:  "PurchaseOrderHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPurchaseOrderHeaderResponseMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderHeaderResponseMultiError is an error wrapping multiple
// validation errors returned by GetPurchaseOrderHeaderResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPurchaseOrderHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderHeaderResponseMultiError) AllErrors() []error { return m }

// GetPurchaseOrderHeaderResponseValidationError is the validation error
// returned by GetPurchaseOrderHeaderResponse.Validate if the designated
// constraints aren't met.
type GetPurchaseOrderHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderHeaderResponseValidationError) ErrorName() string {
	return "GetPurchaseOrderHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderHeaderResponseValidationError{}

// Validate checks the field values on GetPurchaseOrderHeaderByPkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPurchaseOrderHeaderByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderHeaderByPkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderHeaderByPkRequestMultiError, or nil if none found.
func (m *GetPurchaseOrderHeaderByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderHeaderByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPurchaseOrderHeaderByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPurchaseOrderHeaderByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPurchaseOrderHeaderByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPurchaseOrderHeaderByPkRequestMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderHeaderByPkRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPurchaseOrderHeaderByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPurchaseOrderHeaderByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderHeaderByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderHeaderByPkRequestMultiError) AllErrors() []error { return m }

// GetPurchaseOrderHeaderByPkRequestValidationError is the validation error
// returned by GetPurchaseOrderHeaderByPkRequest.Validate if the designated
// constraints aren't met.
type GetPurchaseOrderHeaderByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderHeaderByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderHeaderByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderHeaderByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderHeaderByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderHeaderByPkRequestValidationError) ErrorName() string {
	return "GetPurchaseOrderHeaderByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderHeaderByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderHeaderByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderHeaderByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderHeaderByPkRequestValidationError{}

// Validate checks the field values on GetPurchaseOrderHeaderByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPurchaseOrderHeaderByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderHeaderByPkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderHeaderByPkResponseMultiError, or nil if none found.
func (m *GetPurchaseOrderHeaderByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderHeaderByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPurchaseOrderHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPurchaseOrderHeaderByPkResponseValidationError{
					field:  "PurchaseOrderHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPurchaseOrderHeaderByPkResponseValidationError{
					field:  "PurchaseOrderHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseOrderHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPurchaseOrderHeaderByPkResponseValidationError{
				field:  "PurchaseOrderHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPurchaseOrderHeaderByPkResponseMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderHeaderByPkResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPurchaseOrderHeaderByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPurchaseOrderHeaderByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderHeaderByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderHeaderByPkResponseMultiError) AllErrors() []error { return m }

// GetPurchaseOrderHeaderByPkResponseValidationError is the validation error
// returned by GetPurchaseOrderHeaderByPkResponse.Validate if the designated
// constraints aren't met.
type GetPurchaseOrderHeaderByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderHeaderByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderHeaderByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderHeaderByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderHeaderByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderHeaderByPkResponseValidationError) ErrorName() string {
	return "GetPurchaseOrderHeaderByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderHeaderByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderHeaderByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderHeaderByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderHeaderByPkResponseValidationError{}

// Validate checks the field values on GetPurchaseOrderHeadersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseOrderHeadersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderHeadersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderHeadersResponseMultiError, or nil if none found.
func (m *GetPurchaseOrderHeadersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderHeadersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPurchaseOrderHeaders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPurchaseOrderHeadersResponseValidationError{
						field:  fmt.Sprintf("PurchaseOrderHeaders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPurchaseOrderHeadersResponseValidationError{
						field:  fmt.Sprintf("PurchaseOrderHeaders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPurchaseOrderHeadersResponseValidationError{
					field:  fmt.Sprintf("PurchaseOrderHeaders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetPurchaseOrderHeadersResponseMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderHeadersResponseMultiError is an error wrapping multiple
// validation errors returned by GetPurchaseOrderHeadersResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPurchaseOrderHeadersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderHeadersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderHeadersResponseMultiError) AllErrors() []error { return m }

// GetPurchaseOrderHeadersResponseValidationError is the validation error
// returned by GetPurchaseOrderHeadersResponse.Validate if the designated
// constraints aren't met.
type GetPurchaseOrderHeadersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderHeadersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderHeadersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderHeadersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderHeadersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderHeadersResponseValidationError) ErrorName() string {
	return "GetPurchaseOrderHeadersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderHeadersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderHeadersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderHeadersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderHeadersResponseValidationError{}

// Validate checks the field values on GetPurchaseOrderHeadersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseOrderHeadersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderHeadersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderHeadersRequestMultiError, or nil if none found.
func (m *GetPurchaseOrderHeadersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderHeadersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetPurchaseOrderHeadersRequestMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderHeadersRequestMultiError is an error wrapping multiple
// validation errors returned by GetPurchaseOrderHeadersRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPurchaseOrderHeadersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderHeadersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderHeadersRequestMultiError) AllErrors() []error { return m }

// GetPurchaseOrderHeadersRequestValidationError is the validation error
// returned by GetPurchaseOrderHeadersRequest.Validate if the designated
// constraints aren't met.
type GetPurchaseOrderHeadersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderHeadersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderHeadersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderHeadersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderHeadersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderHeadersRequestValidationError) ErrorName() string {
	return "GetPurchaseOrderHeadersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderHeadersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderHeadersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderHeadersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderHeadersRequestValidationError{}

// Validate checks the field values on PurchaseOrderLine with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PurchaseOrderLine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseOrderLine with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseOrderLineMultiError, or nil if none found.
func (m *PurchaseOrderLine) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseOrderLine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPurchaseOrderLineD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderLineValidationError{
					field:  "PurchaseOrderLineD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderLineValidationError{
					field:  "PurchaseOrderLineD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseOrderLineD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderLineValidationError{
				field:  "PurchaseOrderLineD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPurchaseOrderLineT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderLineValidationError{
					field:  "PurchaseOrderLineT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderLineValidationError{
					field:  "PurchaseOrderLineT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseOrderLineT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderLineValidationError{
				field:  "PurchaseOrderLineT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderLineValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderLineValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderLineValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderLineValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderLineValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderLineValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PurchaseOrderLineMultiError(errors)
	}

	return nil
}

// PurchaseOrderLineMultiError is an error wrapping multiple validation errors
// returned by PurchaseOrderLine.ValidateAll() if the designated constraints
// aren't met.
type PurchaseOrderLineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseOrderLineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseOrderLineMultiError) AllErrors() []error { return m }

// PurchaseOrderLineValidationError is the validation error returned by
// PurchaseOrderLine.Validate if the designated constraints aren't met.
type PurchaseOrderLineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseOrderLineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseOrderLineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseOrderLineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseOrderLineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseOrderLineValidationError) ErrorName() string {
	return "PurchaseOrderLineValidationError"
}

// Error satisfies the builtin error interface
func (e PurchaseOrderLineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseOrderLine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseOrderLineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseOrderLineValidationError{}

// Validate checks the field values on PurchaseOrderLineD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurchaseOrderLineD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseOrderLineD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseOrderLineDMultiError, or nil if none found.
func (m *PurchaseOrderLineD) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseOrderLineD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PolId

	// no validation rules for SubstitutionStatusCode

	// no validation rules for Note

	// no validation rules for SalesOrderId

	// no validation rules for LineStatusCode

	// no validation rules for Quantity

	// no validation rules for LineExtensionAmount

	// no validation rules for TotalTaxAmount

	// no validation rules for MinimumQuantity

	// no validation rules for MaximumQuantity

	// no validation rules for MinimumBackorderQuantity

	// no validation rules for MaximumBackorderQuantity

	// no validation rules for InspectionMethodCode

	// no validation rules for PartialDeliveryIndicator

	// no validation rules for BackOrderAllowedIndicator

	// no validation rules for AccountingCostCode

	// no validation rules for AccountingCost

	// no validation rules for WarrantyInformation

	// no validation rules for OriginatorPartyId

	// no validation rules for ItemId

	// no validation rules for PriceAmount

	// no validation rules for PriceBaseQuantity

	// no validation rules for PriceChangeReason

	// no validation rules for PriceTypeCode

	// no validation rules for PriceType

	// no validation rules for OrderableUnitFactorRate

	// no validation rules for PriceListId

	// no validation rules for PurchaseOrderHeaderId

	if len(errors) > 0 {
		return PurchaseOrderLineDMultiError(errors)
	}

	return nil
}

// PurchaseOrderLineDMultiError is an error wrapping multiple validation errors
// returned by PurchaseOrderLineD.ValidateAll() if the designated constraints
// aren't met.
type PurchaseOrderLineDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseOrderLineDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseOrderLineDMultiError) AllErrors() []error { return m }

// PurchaseOrderLineDValidationError is the validation error returned by
// PurchaseOrderLineD.Validate if the designated constraints aren't met.
type PurchaseOrderLineDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseOrderLineDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseOrderLineDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseOrderLineDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseOrderLineDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseOrderLineDValidationError) ErrorName() string {
	return "PurchaseOrderLineDValidationError"
}

// Error satisfies the builtin error interface
func (e PurchaseOrderLineDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseOrderLineD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseOrderLineDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseOrderLineDValidationError{}

// Validate checks the field values on PurchaseOrderLineT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurchaseOrderLineT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseOrderLineT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseOrderLineTMultiError, or nil if none found.
func (m *PurchaseOrderLineT) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseOrderLineT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPriceValidityPeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderLineTValidationError{
					field:  "PriceValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderLineTValidationError{
					field:  "PriceValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPriceValidityPeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderLineTValidationError{
				field:  "PriceValidityPeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPriceValidityPeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurchaseOrderLineTValidationError{
					field:  "PriceValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurchaseOrderLineTValidationError{
					field:  "PriceValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPriceValidityPeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseOrderLineTValidationError{
				field:  "PriceValidityPeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PurchaseOrderLineTMultiError(errors)
	}

	return nil
}

// PurchaseOrderLineTMultiError is an error wrapping multiple validation errors
// returned by PurchaseOrderLineT.ValidateAll() if the designated constraints
// aren't met.
type PurchaseOrderLineTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseOrderLineTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseOrderLineTMultiError) AllErrors() []error { return m }

// PurchaseOrderLineTValidationError is the validation error returned by
// PurchaseOrderLineT.Validate if the designated constraints aren't met.
type PurchaseOrderLineTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseOrderLineTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseOrderLineTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseOrderLineTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseOrderLineTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseOrderLineTValidationError) ErrorName() string {
	return "PurchaseOrderLineTValidationError"
}

// Error satisfies the builtin error interface
func (e PurchaseOrderLineTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseOrderLineT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseOrderLineTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseOrderLineTValidationError{}

// Validate checks the field values on CreatePurchaseOrderLineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePurchaseOrderLineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePurchaseOrderLineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePurchaseOrderLineRequestMultiError, or nil if none found.
func (m *CreatePurchaseOrderLineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePurchaseOrderLineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolId

	// no validation rules for SubstitutionStatusCode

	// no validation rules for Note

	// no validation rules for SalesOrderId

	// no validation rules for LineStatusCode

	// no validation rules for Quantity

	// no validation rules for LineExtensionAmount

	// no validation rules for TotalTaxAmount

	// no validation rules for MinimumQuantity

	// no validation rules for MaximumQuantity

	// no validation rules for MinimumBackorderQuantity

	// no validation rules for MaximumBackorderQuantity

	// no validation rules for InspectionMethodCode

	// no validation rules for PartialDeliveryIndicator

	// no validation rules for BackOrderAllowedIndicator

	// no validation rules for AccountingCostCode

	// no validation rules for AccountingCost

	// no validation rules for WarrantyInformation

	// no validation rules for OriginatorPartyId

	// no validation rules for ItemId

	// no validation rules for PriceAmount

	// no validation rules for PriceBaseQuantity

	// no validation rules for PriceChangeReason

	// no validation rules for PriceTypeCode

	// no validation rules for PriceType

	// no validation rules for OrderableUnitFactorRate

	// no validation rules for PriceValidityPeriodStartDate

	// no validation rules for PriceValidityPeriodEndDate

	// no validation rules for PriceListId

	// no validation rules for PurchaseOrderHeaderId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePurchaseOrderLineRequestMultiError(errors)
	}

	return nil
}

// CreatePurchaseOrderLineRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePurchaseOrderLineRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePurchaseOrderLineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePurchaseOrderLineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePurchaseOrderLineRequestMultiError) AllErrors() []error { return m }

// CreatePurchaseOrderLineRequestValidationError is the validation error
// returned by CreatePurchaseOrderLineRequest.Validate if the designated
// constraints aren't met.
type CreatePurchaseOrderLineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseOrderLineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseOrderLineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseOrderLineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseOrderLineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseOrderLineRequestValidationError) ErrorName() string {
	return "CreatePurchaseOrderLineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseOrderLineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseOrderLineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseOrderLineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseOrderLineRequestValidationError{}

// Validate checks the field values on CreatePurchaseOrderLineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePurchaseOrderLineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePurchaseOrderLineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePurchaseOrderLineResponseMultiError, or nil if none found.
func (m *CreatePurchaseOrderLineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePurchaseOrderLineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPurchaseOrderLine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePurchaseOrderLineResponseValidationError{
					field:  "PurchaseOrderLine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePurchaseOrderLineResponseValidationError{
					field:  "PurchaseOrderLine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseOrderLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePurchaseOrderLineResponseValidationError{
				field:  "PurchaseOrderLine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePurchaseOrderLineResponseMultiError(errors)
	}

	return nil
}

// CreatePurchaseOrderLineResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePurchaseOrderLineResponse.ValidateAll()
// if the designated constraints aren't met.
type CreatePurchaseOrderLineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePurchaseOrderLineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePurchaseOrderLineResponseMultiError) AllErrors() []error { return m }

// CreatePurchaseOrderLineResponseValidationError is the validation error
// returned by CreatePurchaseOrderLineResponse.Validate if the designated
// constraints aren't met.
type CreatePurchaseOrderLineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseOrderLineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseOrderLineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseOrderLineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseOrderLineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseOrderLineResponseValidationError) ErrorName() string {
	return "CreatePurchaseOrderLineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseOrderLineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseOrderLineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseOrderLineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseOrderLineResponseValidationError{}

// Validate checks the field values on GetPurchaseOrderLinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseOrderLinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderLinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderLinesRequestMultiError, or nil if none found.
func (m *GetPurchaseOrderLinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderLinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPurchaseOrderLinesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPurchaseOrderLinesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPurchaseOrderLinesRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPurchaseOrderLinesRequestMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderLinesRequestMultiError is an error wrapping multiple
// validation errors returned by GetPurchaseOrderLinesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPurchaseOrderLinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderLinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderLinesRequestMultiError) AllErrors() []error { return m }

// GetPurchaseOrderLinesRequestValidationError is the validation error returned
// by GetPurchaseOrderLinesRequest.Validate if the designated constraints
// aren't met.
type GetPurchaseOrderLinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderLinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderLinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderLinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderLinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderLinesRequestValidationError) ErrorName() string {
	return "GetPurchaseOrderLinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderLinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderLinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderLinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderLinesRequestValidationError{}

// Validate checks the field values on GetPurchaseOrderLinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseOrderLinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderLinesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderLinesResponseMultiError, or nil if none found.
func (m *GetPurchaseOrderLinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderLinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPurchaseOrderLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPurchaseOrderLinesResponseValidationError{
						field:  fmt.Sprintf("PurchaseOrderLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPurchaseOrderLinesResponseValidationError{
						field:  fmt.Sprintf("PurchaseOrderLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPurchaseOrderLinesResponseValidationError{
					field:  fmt.Sprintf("PurchaseOrderLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPurchaseOrderLinesResponseMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderLinesResponseMultiError is an error wrapping multiple
// validation errors returned by GetPurchaseOrderLinesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPurchaseOrderLinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderLinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderLinesResponseMultiError) AllErrors() []error { return m }

// GetPurchaseOrderLinesResponseValidationError is the validation error
// returned by GetPurchaseOrderLinesResponse.Validate if the designated
// constraints aren't met.
type GetPurchaseOrderLinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderLinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderLinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderLinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderLinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderLinesResponseValidationError) ErrorName() string {
	return "GetPurchaseOrderLinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderLinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderLinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderLinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderLinesResponseValidationError{}

// Validate checks the field values on PurchaseOrderLines with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurchaseOrderLines) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseOrderLines with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseOrderLinesMultiError, or nil if none found.
func (m *PurchaseOrderLines) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseOrderLines) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPurchaseOrderLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PurchaseOrderLinesValidationError{
						field:  fmt.Sprintf("PurchaseOrderLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PurchaseOrderLinesValidationError{
						field:  fmt.Sprintf("PurchaseOrderLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PurchaseOrderLinesValidationError{
					field:  fmt.Sprintf("PurchaseOrderLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PurchaseOrderLinesMultiError(errors)
	}

	return nil
}

// PurchaseOrderLinesMultiError is an error wrapping multiple validation errors
// returned by PurchaseOrderLines.ValidateAll() if the designated constraints
// aren't met.
type PurchaseOrderLinesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseOrderLinesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseOrderLinesMultiError) AllErrors() []error { return m }

// PurchaseOrderLinesValidationError is the validation error returned by
// PurchaseOrderLines.Validate if the designated constraints aren't met.
type PurchaseOrderLinesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseOrderLinesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseOrderLinesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseOrderLinesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseOrderLinesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseOrderLinesValidationError) ErrorName() string {
	return "PurchaseOrderLinesValidationError"
}

// Error satisfies the builtin error interface
func (e PurchaseOrderLinesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseOrderLines.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseOrderLinesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseOrderLinesValidationError{}

// Validate checks the field values on UpdatePurchaseOrderHeaderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePurchaseOrderHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePurchaseOrderHeaderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePurchaseOrderHeaderRequestMultiError, or nil if none found.
func (m *UpdatePurchaseOrderHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePurchaseOrderHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderTypeCode

	// no validation rules for Note

	// no validation rules for RequestedInvoiceCurrencyCode

	// no validation rules for DocumentCurrencyCode

	// no validation rules for PricingCurrencyCode

	// no validation rules for TaxCurrencyCode

	// no validation rules for AccountingCostCode

	// no validation rules for AccountingCost

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdatePurchaseOrderHeaderRequestMultiError(errors)
	}

	return nil
}

// UpdatePurchaseOrderHeaderRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdatePurchaseOrderHeaderRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePurchaseOrderHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePurchaseOrderHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePurchaseOrderHeaderRequestMultiError) AllErrors() []error { return m }

// UpdatePurchaseOrderHeaderRequestValidationError is the validation error
// returned by UpdatePurchaseOrderHeaderRequest.Validate if the designated
// constraints aren't met.
type UpdatePurchaseOrderHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePurchaseOrderHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePurchaseOrderHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePurchaseOrderHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePurchaseOrderHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePurchaseOrderHeaderRequestValidationError) ErrorName() string {
	return "UpdatePurchaseOrderHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePurchaseOrderHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePurchaseOrderHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePurchaseOrderHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePurchaseOrderHeaderRequestValidationError{}

// Validate checks the field values on UpdatePurchaseOrderHeaderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePurchaseOrderHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePurchaseOrderHeaderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdatePurchaseOrderHeaderResponseMultiError, or nil if none found.
func (m *UpdatePurchaseOrderHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePurchaseOrderHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePurchaseOrderHeaderResponseMultiError(errors)
	}

	return nil
}

// UpdatePurchaseOrderHeaderResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdatePurchaseOrderHeaderResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePurchaseOrderHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePurchaseOrderHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePurchaseOrderHeaderResponseMultiError) AllErrors() []error { return m }

// UpdatePurchaseOrderHeaderResponseValidationError is the validation error
// returned by UpdatePurchaseOrderHeaderResponse.Validate if the designated
// constraints aren't met.
type UpdatePurchaseOrderHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePurchaseOrderHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePurchaseOrderHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePurchaseOrderHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePurchaseOrderHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePurchaseOrderHeaderResponseValidationError) ErrorName() string {
	return "UpdatePurchaseOrderHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePurchaseOrderHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePurchaseOrderHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePurchaseOrderHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePurchaseOrderHeaderResponseValidationError{}
