// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: order/v1/purchaseorder.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PurchaseOrderHeaderService_CreatePurchaseOrderHeader_FullMethodName  = "/order.v1.PurchaseOrderHeaderService/CreatePurchaseOrderHeader"
	PurchaseOrderHeaderService_GetPurchaseOrderHeaders_FullMethodName    = "/order.v1.PurchaseOrderHeaderService/GetPurchaseOrderHeaders"
	PurchaseOrderHeaderService_GetPurchaseOrderHeader_FullMethodName     = "/order.v1.PurchaseOrderHeaderService/GetPurchaseOrderHeader"
	PurchaseOrderHeaderService_GetPurchaseOrderHeaderByPk_FullMethodName = "/order.v1.PurchaseOrderHeaderService/GetPurchaseOrderHeaderByPk"
	PurchaseOrderHeaderService_CreatePurchaseOrderLine_FullMethodName    = "/order.v1.PurchaseOrderHeaderService/CreatePurchaseOrderLine"
	PurchaseOrderHeaderService_GetPurchaseOrderLines_FullMethodName      = "/order.v1.PurchaseOrderHeaderService/GetPurchaseOrderLines"
	PurchaseOrderHeaderService_UpdatePurchaseOrderHeader_FullMethodName  = "/order.v1.PurchaseOrderHeaderService/UpdatePurchaseOrderHeader"
)

// PurchaseOrderHeaderServiceClient is the client API for PurchaseOrderHeaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The PurchaseOrderService service definition.
type PurchaseOrderHeaderServiceClient interface {
	CreatePurchaseOrderHeader(ctx context.Context, in *CreatePurchaseOrderHeaderRequest, opts ...grpc.CallOption) (*CreatePurchaseOrderHeaderResponse, error)
	GetPurchaseOrderHeaders(ctx context.Context, in *GetPurchaseOrderHeadersRequest, opts ...grpc.CallOption) (*GetPurchaseOrderHeadersResponse, error)
	GetPurchaseOrderHeader(ctx context.Context, in *GetPurchaseOrderHeaderRequest, opts ...grpc.CallOption) (*GetPurchaseOrderHeaderResponse, error)
	GetPurchaseOrderHeaderByPk(ctx context.Context, in *GetPurchaseOrderHeaderByPkRequest, opts ...grpc.CallOption) (*GetPurchaseOrderHeaderByPkResponse, error)
	CreatePurchaseOrderLine(ctx context.Context, in *CreatePurchaseOrderLineRequest, opts ...grpc.CallOption) (*CreatePurchaseOrderLineResponse, error)
	GetPurchaseOrderLines(ctx context.Context, in *GetPurchaseOrderLinesRequest, opts ...grpc.CallOption) (*GetPurchaseOrderLinesResponse, error)
	UpdatePurchaseOrderHeader(ctx context.Context, in *UpdatePurchaseOrderHeaderRequest, opts ...grpc.CallOption) (*UpdatePurchaseOrderHeaderResponse, error)
}

type purchaseOrderHeaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseOrderHeaderServiceClient(cc grpc.ClientConnInterface) PurchaseOrderHeaderServiceClient {
	return &purchaseOrderHeaderServiceClient{cc}
}

func (c *purchaseOrderHeaderServiceClient) CreatePurchaseOrderHeader(ctx context.Context, in *CreatePurchaseOrderHeaderRequest, opts ...grpc.CallOption) (*CreatePurchaseOrderHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePurchaseOrderHeaderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderHeaderService_CreatePurchaseOrderHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderHeaderServiceClient) GetPurchaseOrderHeaders(ctx context.Context, in *GetPurchaseOrderHeadersRequest, opts ...grpc.CallOption) (*GetPurchaseOrderHeadersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPurchaseOrderHeadersResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderHeaderService_GetPurchaseOrderHeaders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderHeaderServiceClient) GetPurchaseOrderHeader(ctx context.Context, in *GetPurchaseOrderHeaderRequest, opts ...grpc.CallOption) (*GetPurchaseOrderHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPurchaseOrderHeaderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderHeaderService_GetPurchaseOrderHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderHeaderServiceClient) GetPurchaseOrderHeaderByPk(ctx context.Context, in *GetPurchaseOrderHeaderByPkRequest, opts ...grpc.CallOption) (*GetPurchaseOrderHeaderByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPurchaseOrderHeaderByPkResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderHeaderService_GetPurchaseOrderHeaderByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderHeaderServiceClient) CreatePurchaseOrderLine(ctx context.Context, in *CreatePurchaseOrderLineRequest, opts ...grpc.CallOption) (*CreatePurchaseOrderLineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePurchaseOrderLineResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderHeaderService_CreatePurchaseOrderLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderHeaderServiceClient) GetPurchaseOrderLines(ctx context.Context, in *GetPurchaseOrderLinesRequest, opts ...grpc.CallOption) (*GetPurchaseOrderLinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPurchaseOrderLinesResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderHeaderService_GetPurchaseOrderLines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderHeaderServiceClient) UpdatePurchaseOrderHeader(ctx context.Context, in *UpdatePurchaseOrderHeaderRequest, opts ...grpc.CallOption) (*UpdatePurchaseOrderHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePurchaseOrderHeaderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderHeaderService_UpdatePurchaseOrderHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseOrderHeaderServiceServer is the server API for PurchaseOrderHeaderService service.
// All implementations must embed UnimplementedPurchaseOrderHeaderServiceServer
// for forward compatibility.
//
// The PurchaseOrderService service definition.
type PurchaseOrderHeaderServiceServer interface {
	CreatePurchaseOrderHeader(context.Context, *CreatePurchaseOrderHeaderRequest) (*CreatePurchaseOrderHeaderResponse, error)
	GetPurchaseOrderHeaders(context.Context, *GetPurchaseOrderHeadersRequest) (*GetPurchaseOrderHeadersResponse, error)
	GetPurchaseOrderHeader(context.Context, *GetPurchaseOrderHeaderRequest) (*GetPurchaseOrderHeaderResponse, error)
	GetPurchaseOrderHeaderByPk(context.Context, *GetPurchaseOrderHeaderByPkRequest) (*GetPurchaseOrderHeaderByPkResponse, error)
	CreatePurchaseOrderLine(context.Context, *CreatePurchaseOrderLineRequest) (*CreatePurchaseOrderLineResponse, error)
	GetPurchaseOrderLines(context.Context, *GetPurchaseOrderLinesRequest) (*GetPurchaseOrderLinesResponse, error)
	UpdatePurchaseOrderHeader(context.Context, *UpdatePurchaseOrderHeaderRequest) (*UpdatePurchaseOrderHeaderResponse, error)
	mustEmbedUnimplementedPurchaseOrderHeaderServiceServer()
}

// UnimplementedPurchaseOrderHeaderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPurchaseOrderHeaderServiceServer struct{}

func (UnimplementedPurchaseOrderHeaderServiceServer) CreatePurchaseOrderHeader(context.Context, *CreatePurchaseOrderHeaderRequest) (*CreatePurchaseOrderHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchaseOrderHeader not implemented")
}
func (UnimplementedPurchaseOrderHeaderServiceServer) GetPurchaseOrderHeaders(context.Context, *GetPurchaseOrderHeadersRequest) (*GetPurchaseOrderHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseOrderHeaders not implemented")
}
func (UnimplementedPurchaseOrderHeaderServiceServer) GetPurchaseOrderHeader(context.Context, *GetPurchaseOrderHeaderRequest) (*GetPurchaseOrderHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseOrderHeader not implemented")
}
func (UnimplementedPurchaseOrderHeaderServiceServer) GetPurchaseOrderHeaderByPk(context.Context, *GetPurchaseOrderHeaderByPkRequest) (*GetPurchaseOrderHeaderByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseOrderHeaderByPk not implemented")
}
func (UnimplementedPurchaseOrderHeaderServiceServer) CreatePurchaseOrderLine(context.Context, *CreatePurchaseOrderLineRequest) (*CreatePurchaseOrderLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchaseOrderLine not implemented")
}
func (UnimplementedPurchaseOrderHeaderServiceServer) GetPurchaseOrderLines(context.Context, *GetPurchaseOrderLinesRequest) (*GetPurchaseOrderLinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseOrderLines not implemented")
}
func (UnimplementedPurchaseOrderHeaderServiceServer) UpdatePurchaseOrderHeader(context.Context, *UpdatePurchaseOrderHeaderRequest) (*UpdatePurchaseOrderHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchaseOrderHeader not implemented")
}
func (UnimplementedPurchaseOrderHeaderServiceServer) mustEmbedUnimplementedPurchaseOrderHeaderServiceServer() {
}
func (UnimplementedPurchaseOrderHeaderServiceServer) testEmbeddedByValue() {}

// UnsafePurchaseOrderHeaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseOrderHeaderServiceServer will
// result in compilation errors.
type UnsafePurchaseOrderHeaderServiceServer interface {
	mustEmbedUnimplementedPurchaseOrderHeaderServiceServer()
}

func RegisterPurchaseOrderHeaderServiceServer(s grpc.ServiceRegistrar, srv PurchaseOrderHeaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedPurchaseOrderHeaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PurchaseOrderHeaderService_ServiceDesc, srv)
}

func _PurchaseOrderHeaderService_CreatePurchaseOrderHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseOrderHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderHeaderServiceServer).CreatePurchaseOrderHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderHeaderService_CreatePurchaseOrderHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderHeaderServiceServer).CreatePurchaseOrderHeader(ctx, req.(*CreatePurchaseOrderHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderHeaderService_GetPurchaseOrderHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseOrderHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderHeaderServiceServer).GetPurchaseOrderHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderHeaderService_GetPurchaseOrderHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderHeaderServiceServer).GetPurchaseOrderHeaders(ctx, req.(*GetPurchaseOrderHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderHeaderService_GetPurchaseOrderHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseOrderHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderHeaderServiceServer).GetPurchaseOrderHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderHeaderService_GetPurchaseOrderHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderHeaderServiceServer).GetPurchaseOrderHeader(ctx, req.(*GetPurchaseOrderHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderHeaderService_GetPurchaseOrderHeaderByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseOrderHeaderByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderHeaderServiceServer).GetPurchaseOrderHeaderByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderHeaderService_GetPurchaseOrderHeaderByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderHeaderServiceServer).GetPurchaseOrderHeaderByPk(ctx, req.(*GetPurchaseOrderHeaderByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderHeaderService_CreatePurchaseOrderLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseOrderLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderHeaderServiceServer).CreatePurchaseOrderLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderHeaderService_CreatePurchaseOrderLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderHeaderServiceServer).CreatePurchaseOrderLine(ctx, req.(*CreatePurchaseOrderLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderHeaderService_GetPurchaseOrderLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseOrderLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderHeaderServiceServer).GetPurchaseOrderLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderHeaderService_GetPurchaseOrderLines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderHeaderServiceServer).GetPurchaseOrderLines(ctx, req.(*GetPurchaseOrderLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderHeaderService_UpdatePurchaseOrderHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePurchaseOrderHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderHeaderServiceServer).UpdatePurchaseOrderHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderHeaderService_UpdatePurchaseOrderHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderHeaderServiceServer).UpdatePurchaseOrderHeader(ctx, req.(*UpdatePurchaseOrderHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PurchaseOrderHeaderService_ServiceDesc is the grpc.ServiceDesc for PurchaseOrderHeaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurchaseOrderHeaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.v1.PurchaseOrderHeaderService",
	HandlerType: (*PurchaseOrderHeaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePurchaseOrderHeader",
			Handler:    _PurchaseOrderHeaderService_CreatePurchaseOrderHeader_Handler,
		},
		{
			MethodName: "GetPurchaseOrderHeaders",
			Handler:    _PurchaseOrderHeaderService_GetPurchaseOrderHeaders_Handler,
		},
		{
			MethodName: "GetPurchaseOrderHeader",
			Handler:    _PurchaseOrderHeaderService_GetPurchaseOrderHeader_Handler,
		},
		{
			MethodName: "GetPurchaseOrderHeaderByPk",
			Handler:    _PurchaseOrderHeaderService_GetPurchaseOrderHeaderByPk_Handler,
		},
		{
			MethodName: "CreatePurchaseOrderLine",
			Handler:    _PurchaseOrderHeaderService_CreatePurchaseOrderLine_Handler,
		},
		{
			MethodName: "GetPurchaseOrderLines",
			Handler:    _PurchaseOrderHeaderService_GetPurchaseOrderLines_Handler,
		},
		{
			MethodName: "UpdatePurchaseOrderHeader",
			Handler:    _PurchaseOrderHeaderService_UpdatePurchaseOrderHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/v1/purchaseorder.proto",
}
