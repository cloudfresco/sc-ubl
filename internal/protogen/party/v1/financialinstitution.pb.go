// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: party/v1/financialinstitution.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FinancialInstitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitutionD        *FinancialInstitutionD        `protobuf:"bytes,1,opt,name=financial_institution_d,json=financialInstitutionD,proto3" json:"financial_institution_d,omitempty"`
	CrUpdUser                    *v1.CrUpdUser                 `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                    *v1.CrUpdTime                 `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	FinancialInstitutionBranches []*FinancialInstitutionBranch `protobuf:"bytes,4,rep,name=financial_institution_branches,json=financialInstitutionBranches,proto3" json:"financial_institution_branches,omitempty"`
}

func (x *FinancialInstitution) Reset() {
	*x = FinancialInstitution{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinancialInstitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialInstitution) ProtoMessage() {}

func (x *FinancialInstitution) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialInstitution.ProtoReflect.Descriptor instead.
func (*FinancialInstitution) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{0}
}

func (x *FinancialInstitution) GetFinancialInstitutionD() *FinancialInstitutionD {
	if x != nil {
		return x.FinancialInstitutionD
	}
	return nil
}

func (x *FinancialInstitution) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *FinancialInstitution) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *FinancialInstitution) GetFinancialInstitutionBranches() []*FinancialInstitutionBranch {
	if x != nil {
		return x.FinancialInstitutionBranches
	}
	return nil
}

type FinancialInstitutionD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	FiId      string `protobuf:"bytes,4,opt,name=fi_id,json=fiId,proto3" json:"fi_id,omitempty"`
	Name1     string `protobuf:"bytes,5,opt,name=name1,proto3" json:"name1,omitempty"`
	AddressId uint32 `protobuf:"varint,6,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *FinancialInstitutionD) Reset() {
	*x = FinancialInstitutionD{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinancialInstitutionD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialInstitutionD) ProtoMessage() {}

func (x *FinancialInstitutionD) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialInstitutionD.ProtoReflect.Descriptor instead.
func (*FinancialInstitutionD) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{1}
}

func (x *FinancialInstitutionD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialInstitutionD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *FinancialInstitutionD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *FinancialInstitutionD) GetFiId() string {
	if x != nil {
		return x.FiId
	}
	return ""
}

func (x *FinancialInstitutionD) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *FinancialInstitutionD) GetAddressId() uint32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type FinancialInstitutions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitutions []*FinancialInstitution `protobuf:"bytes,1,rep,name=financial_institutions,json=financialInstitutions,proto3" json:"financial_institutions,omitempty"`
}

func (x *FinancialInstitutions) Reset() {
	*x = FinancialInstitutions{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinancialInstitutions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialInstitutions) ProtoMessage() {}

func (x *FinancialInstitutions) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialInstitutions.ProtoReflect.Descriptor instead.
func (*FinancialInstitutions) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{2}
}

func (x *FinancialInstitutions) GetFinancialInstitutions() []*FinancialInstitution {
	if x != nil {
		return x.FinancialInstitutions
	}
	return nil
}

type CreateFinancialInstitutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiId                 string  `protobuf:"bytes,1,opt,name=fi_id,json=fiId,proto3" json:"fi_id,omitempty"`
	Name1                string  `protobuf:"bytes,2,opt,name=name1,proto3" json:"name1,omitempty"`
	AddrListAgencyId     string  `protobuf:"bytes,3,opt,name=addr_list_agency_id,json=addrListAgencyId,proto3" json:"addr_list_agency_id,omitempty"`
	AddrListId           string  `protobuf:"bytes,4,opt,name=addr_list_id,json=addrListId,proto3" json:"addr_list_id,omitempty"`
	AddrListVersionId    string  `protobuf:"bytes,5,opt,name=addr_list_version_id,json=addrListVersionId,proto3" json:"addr_list_version_id,omitempty"`
	AddressTypeCode      string  `protobuf:"bytes,6,opt,name=address_type_code,json=addressTypeCode,proto3" json:"address_type_code,omitempty"`
	AddressFormatCode    string  `protobuf:"bytes,7,opt,name=address_format_code,json=addressFormatCode,proto3" json:"address_format_code,omitempty"`
	Postbox              string  `protobuf:"bytes,8,opt,name=postbox,proto3" json:"postbox,omitempty"`
	Floor                string  `protobuf:"bytes,9,opt,name=floor,proto3" json:"floor,omitempty"`
	Room                 string  `protobuf:"bytes,10,opt,name=room,proto3" json:"room,omitempty"`
	StreetName           string  `protobuf:"bytes,11,opt,name=street_name,json=streetName,proto3" json:"street_name,omitempty"`
	AdditionalStreetName string  `protobuf:"bytes,12,opt,name=additional_street_name,json=additionalStreetName,proto3" json:"additional_street_name,omitempty"`
	BlockName            string  `protobuf:"bytes,13,opt,name=block_name,json=blockName,proto3" json:"block_name,omitempty"`
	BuildingName         string  `protobuf:"bytes,14,opt,name=building_name,json=buildingName,proto3" json:"building_name,omitempty"`
	BuildingNumber       string  `protobuf:"bytes,15,opt,name=building_number,json=buildingNumber,proto3" json:"building_number,omitempty"`
	InhouseMail          string  `protobuf:"bytes,16,opt,name=inhouse_mail,json=inhouseMail,proto3" json:"inhouse_mail,omitempty"`
	Department           string  `protobuf:"bytes,17,opt,name=department,proto3" json:"department,omitempty"`
	MarkAttention        string  `protobuf:"bytes,18,opt,name=mark_attention,json=markAttention,proto3" json:"mark_attention,omitempty"`
	MarkCare             string  `protobuf:"bytes,19,opt,name=mark_care,json=markCare,proto3" json:"mark_care,omitempty"`
	PlotIdentification   string  `protobuf:"bytes,20,opt,name=plot_identification,json=plotIdentification,proto3" json:"plot_identification,omitempty"`
	CitySubdivisionName  string  `protobuf:"bytes,21,opt,name=city_subdivision_name,json=citySubdivisionName,proto3" json:"city_subdivision_name,omitempty"`
	CityName             string  `protobuf:"bytes,22,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	PostalZone           string  `protobuf:"bytes,23,opt,name=postal_zone,json=postalZone,proto3" json:"postal_zone,omitempty"`
	CountrySubentity     string  `protobuf:"bytes,24,opt,name=country_subentity,json=countrySubentity,proto3" json:"country_subentity,omitempty"`
	CountrySubentityCode string  `protobuf:"bytes,25,opt,name=country_subentity_code,json=countrySubentityCode,proto3" json:"country_subentity_code,omitempty"`
	Region               string  `protobuf:"bytes,26,opt,name=region,proto3" json:"region,omitempty"`
	District             string  `protobuf:"bytes,27,opt,name=district,proto3" json:"district,omitempty"`
	TimezoneOffset       string  `protobuf:"bytes,28,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	CountryIdCode        string  `protobuf:"bytes,29,opt,name=country_id_code,json=countryIdCode,proto3" json:"country_id_code,omitempty"`
	CountryName          string  `protobuf:"bytes,30,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	LocationCoordLat     float64 `protobuf:"fixed64,31,opt,name=location_coord_lat,json=locationCoordLat,proto3" json:"location_coord_lat,omitempty"`
	LocationCoordLon     float64 `protobuf:"fixed64,32,opt,name=location_coord_lon,json=locationCoordLon,proto3" json:"location_coord_lon,omitempty"`
	Note                 string  `protobuf:"bytes,33,opt,name=note,proto3" json:"note,omitempty"`
	UserId               string  `protobuf:"bytes,34,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string  `protobuf:"bytes,35,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string  `protobuf:"bytes,36,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateFinancialInstitutionRequest) Reset() {
	*x = CreateFinancialInstitutionRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinancialInstitutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinancialInstitutionRequest) ProtoMessage() {}

func (x *CreateFinancialInstitutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinancialInstitutionRequest.ProtoReflect.Descriptor instead.
func (*CreateFinancialInstitutionRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFinancialInstitutionRequest) GetFiId() string {
	if x != nil {
		return x.FiId
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetAddrListAgencyId() string {
	if x != nil {
		return x.AddrListAgencyId
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetAddrListId() string {
	if x != nil {
		return x.AddrListId
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetAddrListVersionId() string {
	if x != nil {
		return x.AddrListVersionId
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetAddressTypeCode() string {
	if x != nil {
		return x.AddressTypeCode
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetAddressFormatCode() string {
	if x != nil {
		return x.AddressFormatCode
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetPostbox() string {
	if x != nil {
		return x.Postbox
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetAdditionalStreetName() string {
	if x != nil {
		return x.AdditionalStreetName
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetInhouseMail() string {
	if x != nil {
		return x.InhouseMail
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetMarkAttention() string {
	if x != nil {
		return x.MarkAttention
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetMarkCare() string {
	if x != nil {
		return x.MarkCare
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetPlotIdentification() string {
	if x != nil {
		return x.PlotIdentification
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetCitySubdivisionName() string {
	if x != nil {
		return x.CitySubdivisionName
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetPostalZone() string {
	if x != nil {
		return x.PostalZone
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetCountrySubentity() string {
	if x != nil {
		return x.CountrySubentity
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetCountrySubentityCode() string {
	if x != nil {
		return x.CountrySubentityCode
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetTimezoneOffset() string {
	if x != nil {
		return x.TimezoneOffset
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetCountryIdCode() string {
	if x != nil {
		return x.CountryIdCode
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetLocationCoordLat() float64 {
	if x != nil {
		return x.LocationCoordLat
	}
	return 0
}

func (x *CreateFinancialInstitutionRequest) GetLocationCoordLon() float64 {
	if x != nil {
		return x.LocationCoordLon
	}
	return 0
}

func (x *CreateFinancialInstitutionRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateFinancialInstitutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateFinancialInstitutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitution *FinancialInstitution `protobuf:"bytes,1,opt,name=financial_institution,json=financialInstitution,proto3" json:"financial_institution,omitempty"`
}

func (x *CreateFinancialInstitutionResponse) Reset() {
	*x = CreateFinancialInstitutionResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinancialInstitutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinancialInstitutionResponse) ProtoMessage() {}

func (x *CreateFinancialInstitutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinancialInstitutionResponse.ProtoReflect.Descriptor instead.
func (*CreateFinancialInstitutionResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFinancialInstitutionResponse) GetFinancialInstitution() *FinancialInstitution {
	if x != nil {
		return x.FinancialInstitution
	}
	return nil
}

type UpdateFinancialInstitutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiId      string `protobuf:"bytes,1,opt,name=fi_id,json=fiId,proto3" json:"fi_id,omitempty"`
	Name1     string `protobuf:"bytes,2,opt,name=name1,proto3" json:"name1,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateFinancialInstitutionRequest) Reset() {
	*x = UpdateFinancialInstitutionRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFinancialInstitutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinancialInstitutionRequest) ProtoMessage() {}

func (x *UpdateFinancialInstitutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinancialInstitutionRequest.ProtoReflect.Descriptor instead.
func (*UpdateFinancialInstitutionRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateFinancialInstitutionRequest) GetFiId() string {
	if x != nil {
		return x.FiId
	}
	return ""
}

func (x *UpdateFinancialInstitutionRequest) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *UpdateFinancialInstitutionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateFinancialInstitutionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateFinancialInstitutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateFinancialInstitutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFinancialInstitutionResponse) Reset() {
	*x = UpdateFinancialInstitutionResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFinancialInstitutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinancialInstitutionResponse) ProtoMessage() {}

func (x *UpdateFinancialInstitutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinancialInstitutionResponse.ProtoReflect.Descriptor instead.
func (*UpdateFinancialInstitutionResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{6}
}

type GetFinancialInstitutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetFinancialInstitutionsRequest) Reset() {
	*x = GetFinancialInstitutionsRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialInstitutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialInstitutionsRequest) ProtoMessage() {}

func (x *GetFinancialInstitutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialInstitutionsRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialInstitutionsRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{7}
}

func (x *GetFinancialInstitutionsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetFinancialInstitutionsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetFinancialInstitutionsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetFinancialInstitutionsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetFinancialInstitutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitutions []*FinancialInstitution `protobuf:"bytes,1,rep,name=financial_institutions,json=financialInstitutions,proto3" json:"financial_institutions,omitempty"`
	NextCursor            string                  `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetFinancialInstitutionsResponse) Reset() {
	*x = GetFinancialInstitutionsResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialInstitutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialInstitutionsResponse) ProtoMessage() {}

func (x *GetFinancialInstitutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialInstitutionsResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialInstitutionsResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{8}
}

func (x *GetFinancialInstitutionsResponse) GetFinancialInstitutions() []*FinancialInstitution {
	if x != nil {
		return x.FinancialInstitutions
	}
	return nil
}

func (x *GetFinancialInstitutionsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetFinancialInstitutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetFinancialInstitutionRequest) Reset() {
	*x = GetFinancialInstitutionRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialInstitutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialInstitutionRequest) ProtoMessage() {}

func (x *GetFinancialInstitutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialInstitutionRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialInstitutionRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{9}
}

func (x *GetFinancialInstitutionRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetFinancialInstitutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitution *FinancialInstitution `protobuf:"bytes,1,opt,name=financial_institution,json=financialInstitution,proto3" json:"financial_institution,omitempty"`
}

func (x *GetFinancialInstitutionResponse) Reset() {
	*x = GetFinancialInstitutionResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialInstitutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialInstitutionResponse) ProtoMessage() {}

func (x *GetFinancialInstitutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialInstitutionResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialInstitutionResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{10}
}

func (x *GetFinancialInstitutionResponse) GetFinancialInstitution() *FinancialInstitution {
	if x != nil {
		return x.FinancialInstitution
	}
	return nil
}

type DeleteFinancialInstitutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *DeleteFinancialInstitutionRequest) Reset() {
	*x = DeleteFinancialInstitutionRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFinancialInstitutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFinancialInstitutionRequest) ProtoMessage() {}

func (x *DeleteFinancialInstitutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFinancialInstitutionRequest.ProtoReflect.Descriptor instead.
func (*DeleteFinancialInstitutionRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteFinancialInstitutionRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type DeleteFinancialInstitutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFinancialInstitutionResponse) Reset() {
	*x = DeleteFinancialInstitutionResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFinancialInstitutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFinancialInstitutionResponse) ProtoMessage() {}

func (x *DeleteFinancialInstitutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFinancialInstitutionResponse.ProtoReflect.Descriptor instead.
func (*DeleteFinancialInstitutionResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{12}
}

type FinancialInstitutionBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitutionBranchD *FinancialInstitutionBranchD `protobuf:"bytes,1,opt,name=financial_institution_branch_d,json=financialInstitutionBranchD,proto3" json:"financial_institution_branch_d,omitempty"`
	CrUpdUser                   *v1.CrUpdUser                `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                   *v1.CrUpdTime                `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *FinancialInstitutionBranch) Reset() {
	*x = FinancialInstitutionBranch{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinancialInstitutionBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialInstitutionBranch) ProtoMessage() {}

func (x *FinancialInstitutionBranch) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialInstitutionBranch.ProtoReflect.Descriptor instead.
func (*FinancialInstitutionBranch) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{13}
}

func (x *FinancialInstitutionBranch) GetFinancialInstitutionBranchD() *FinancialInstitutionBranchD {
	if x != nil {
		return x.FinancialInstitutionBranchD
	}
	return nil
}

func (x *FinancialInstitutionBranch) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *FinancialInstitutionBranch) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type FinancialInstitutionBranchD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                  []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                    string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	FbId                   string `protobuf:"bytes,4,opt,name=fb_id,json=fbId,proto3" json:"fb_id,omitempty"`
	Name1                  string `protobuf:"bytes,5,opt,name=name1,proto3" json:"name1,omitempty"`
	FinancialInstitutionId uint32 `protobuf:"varint,6,opt,name=financial_institution_id,json=financialInstitutionId,proto3" json:"financial_institution_id,omitempty"`
	AddressId              uint32 `protobuf:"varint,7,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *FinancialInstitutionBranchD) Reset() {
	*x = FinancialInstitutionBranchD{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinancialInstitutionBranchD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialInstitutionBranchD) ProtoMessage() {}

func (x *FinancialInstitutionBranchD) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialInstitutionBranchD.ProtoReflect.Descriptor instead.
func (*FinancialInstitutionBranchD) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{14}
}

func (x *FinancialInstitutionBranchD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialInstitutionBranchD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *FinancialInstitutionBranchD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *FinancialInstitutionBranchD) GetFbId() string {
	if x != nil {
		return x.FbId
	}
	return ""
}

func (x *FinancialInstitutionBranchD) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *FinancialInstitutionBranchD) GetFinancialInstitutionId() uint32 {
	if x != nil {
		return x.FinancialInstitutionId
	}
	return 0
}

func (x *FinancialInstitutionBranchD) GetAddressId() uint32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type CreateFinancialInstitutionBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FbId                   string  `protobuf:"bytes,1,opt,name=fb_id,json=fbId,proto3" json:"fb_id,omitempty"`
	Name1                  string  `protobuf:"bytes,2,opt,name=name1,proto3" json:"name1,omitempty"`
	FinancialInstitutionId uint32  `protobuf:"varint,3,opt,name=financial_institution_id,json=financialInstitutionId,proto3" json:"financial_institution_id,omitempty"`
	AddrListAgencyId       string  `protobuf:"bytes,4,opt,name=addr_list_agency_id,json=addrListAgencyId,proto3" json:"addr_list_agency_id,omitempty"`
	AddrListId             string  `protobuf:"bytes,5,opt,name=addr_list_id,json=addrListId,proto3" json:"addr_list_id,omitempty"`
	AddrListVersionId      string  `protobuf:"bytes,6,opt,name=addr_list_version_id,json=addrListVersionId,proto3" json:"addr_list_version_id,omitempty"`
	AddressTypeCode        string  `protobuf:"bytes,7,opt,name=address_type_code,json=addressTypeCode,proto3" json:"address_type_code,omitempty"`
	AddressFormatCode      string  `protobuf:"bytes,8,opt,name=address_format_code,json=addressFormatCode,proto3" json:"address_format_code,omitempty"`
	Postbox                string  `protobuf:"bytes,9,opt,name=postbox,proto3" json:"postbox,omitempty"`
	Floor                  string  `protobuf:"bytes,10,opt,name=floor,proto3" json:"floor,omitempty"`
	Room                   string  `protobuf:"bytes,11,opt,name=room,proto3" json:"room,omitempty"`
	StreetName             string  `protobuf:"bytes,12,opt,name=street_name,json=streetName,proto3" json:"street_name,omitempty"`
	AdditionalStreetName   string  `protobuf:"bytes,13,opt,name=additional_street_name,json=additionalStreetName,proto3" json:"additional_street_name,omitempty"`
	BlockName              string  `protobuf:"bytes,14,opt,name=block_name,json=blockName,proto3" json:"block_name,omitempty"`
	BuildingName           string  `protobuf:"bytes,15,opt,name=building_name,json=buildingName,proto3" json:"building_name,omitempty"`
	BuildingNumber         string  `protobuf:"bytes,16,opt,name=building_number,json=buildingNumber,proto3" json:"building_number,omitempty"`
	InhouseMail            string  `protobuf:"bytes,17,opt,name=inhouse_mail,json=inhouseMail,proto3" json:"inhouse_mail,omitempty"`
	Department             string  `protobuf:"bytes,18,opt,name=department,proto3" json:"department,omitempty"`
	MarkAttention          string  `protobuf:"bytes,19,opt,name=mark_attention,json=markAttention,proto3" json:"mark_attention,omitempty"`
	MarkCare               string  `protobuf:"bytes,20,opt,name=mark_care,json=markCare,proto3" json:"mark_care,omitempty"`
	PlotIdentification     string  `protobuf:"bytes,21,opt,name=plot_identification,json=plotIdentification,proto3" json:"plot_identification,omitempty"`
	CitySubdivisionName    string  `protobuf:"bytes,22,opt,name=city_subdivision_name,json=citySubdivisionName,proto3" json:"city_subdivision_name,omitempty"`
	CityName               string  `protobuf:"bytes,23,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	PostalZone             string  `protobuf:"bytes,24,opt,name=postal_zone,json=postalZone,proto3" json:"postal_zone,omitempty"`
	CountrySubentity       string  `protobuf:"bytes,25,opt,name=country_subentity,json=countrySubentity,proto3" json:"country_subentity,omitempty"`
	CountrySubentityCode   string  `protobuf:"bytes,26,opt,name=country_subentity_code,json=countrySubentityCode,proto3" json:"country_subentity_code,omitempty"`
	Region                 string  `protobuf:"bytes,27,opt,name=region,proto3" json:"region,omitempty"`
	District               string  `protobuf:"bytes,28,opt,name=district,proto3" json:"district,omitempty"`
	TimezoneOffset         string  `protobuf:"bytes,29,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	CountryIdCode          string  `protobuf:"bytes,30,opt,name=country_id_code,json=countryIdCode,proto3" json:"country_id_code,omitempty"`
	CountryName            string  `protobuf:"bytes,31,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	LocationCoordLat       float64 `protobuf:"fixed64,32,opt,name=location_coord_lat,json=locationCoordLat,proto3" json:"location_coord_lat,omitempty"`
	LocationCoordLon       float64 `protobuf:"fixed64,33,opt,name=location_coord_lon,json=locationCoordLon,proto3" json:"location_coord_lon,omitempty"`
	Note                   string  `protobuf:"bytes,34,opt,name=note,proto3" json:"note,omitempty"`
	UserId                 string  `protobuf:"bytes,35,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string  `protobuf:"bytes,36,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string  `protobuf:"bytes,37,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateFinancialInstitutionBranchRequest) Reset() {
	*x = CreateFinancialInstitutionBranchRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinancialInstitutionBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinancialInstitutionBranchRequest) ProtoMessage() {}

func (x *CreateFinancialInstitutionBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinancialInstitutionBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateFinancialInstitutionBranchRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{15}
}

func (x *CreateFinancialInstitutionBranchRequest) GetFbId() string {
	if x != nil {
		return x.FbId
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetFinancialInstitutionId() uint32 {
	if x != nil {
		return x.FinancialInstitutionId
	}
	return 0
}

func (x *CreateFinancialInstitutionBranchRequest) GetAddrListAgencyId() string {
	if x != nil {
		return x.AddrListAgencyId
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetAddrListId() string {
	if x != nil {
		return x.AddrListId
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetAddrListVersionId() string {
	if x != nil {
		return x.AddrListVersionId
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetAddressTypeCode() string {
	if x != nil {
		return x.AddressTypeCode
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetAddressFormatCode() string {
	if x != nil {
		return x.AddressFormatCode
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetPostbox() string {
	if x != nil {
		return x.Postbox
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetAdditionalStreetName() string {
	if x != nil {
		return x.AdditionalStreetName
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetInhouseMail() string {
	if x != nil {
		return x.InhouseMail
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetMarkAttention() string {
	if x != nil {
		return x.MarkAttention
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetMarkCare() string {
	if x != nil {
		return x.MarkCare
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetPlotIdentification() string {
	if x != nil {
		return x.PlotIdentification
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetCitySubdivisionName() string {
	if x != nil {
		return x.CitySubdivisionName
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetPostalZone() string {
	if x != nil {
		return x.PostalZone
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetCountrySubentity() string {
	if x != nil {
		return x.CountrySubentity
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetCountrySubentityCode() string {
	if x != nil {
		return x.CountrySubentityCode
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetTimezoneOffset() string {
	if x != nil {
		return x.TimezoneOffset
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetCountryIdCode() string {
	if x != nil {
		return x.CountryIdCode
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetLocationCoordLat() float64 {
	if x != nil {
		return x.LocationCoordLat
	}
	return 0
}

func (x *CreateFinancialInstitutionBranchRequest) GetLocationCoordLon() float64 {
	if x != nil {
		return x.LocationCoordLon
	}
	return 0
}

func (x *CreateFinancialInstitutionBranchRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateFinancialInstitutionBranchRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateFinancialInstitutionBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitutionBranch *FinancialInstitutionBranch `protobuf:"bytes,1,opt,name=financial_institution_branch,json=financialInstitutionBranch,proto3" json:"financial_institution_branch,omitempty"`
}

func (x *CreateFinancialInstitutionBranchResponse) Reset() {
	*x = CreateFinancialInstitutionBranchResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinancialInstitutionBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinancialInstitutionBranchResponse) ProtoMessage() {}

func (x *CreateFinancialInstitutionBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinancialInstitutionBranchResponse.ProtoReflect.Descriptor instead.
func (*CreateFinancialInstitutionBranchResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{16}
}

func (x *CreateFinancialInstitutionBranchResponse) GetFinancialInstitutionBranch() *FinancialInstitutionBranch {
	if x != nil {
		return x.FinancialInstitutionBranch
	}
	return nil
}

type UpdateFinancialInstitutionBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FbId                         string  `protobuf:"bytes,1,opt,name=fb_id,json=fbId,proto3" json:"fb_id,omitempty"`
	Name1                        string  `protobuf:"bytes,2,opt,name=name1,proto3" json:"name1,omitempty"`
	FinancialInstitutionId       uint32  `protobuf:"varint,3,opt,name=financial_institution_id,json=financialInstitutionId,proto3" json:"financial_institution_id,omitempty"`
	AddrListAgencyId             string  `protobuf:"bytes,4,opt,name=addr_list_agency_id,json=addrListAgencyId,proto3" json:"addr_list_agency_id,omitempty"`
	AddrListId                   string  `protobuf:"bytes,5,opt,name=addr_list_id,json=addrListId,proto3" json:"addr_list_id,omitempty"`
	AddrListVersionId            string  `protobuf:"bytes,6,opt,name=addr_list_version_id,json=addrListVersionId,proto3" json:"addr_list_version_id,omitempty"`
	AddressTypeCode              string  `protobuf:"bytes,7,opt,name=address_type_code,json=addressTypeCode,proto3" json:"address_type_code,omitempty"`
	AddressFormatCode            string  `protobuf:"bytes,8,opt,name=address_format_code,json=addressFormatCode,proto3" json:"address_format_code,omitempty"`
	Postbox                      string  `protobuf:"bytes,9,opt,name=postbox,proto3" json:"postbox,omitempty"`
	Floor                        string  `protobuf:"bytes,10,opt,name=floor,proto3" json:"floor,omitempty"`
	Room                         string  `protobuf:"bytes,11,opt,name=room,proto3" json:"room,omitempty"`
	StreetName                   string  `protobuf:"bytes,12,opt,name=street_name,json=streetName,proto3" json:"street_name,omitempty"`
	AdditionalStreetName         string  `protobuf:"bytes,13,opt,name=additional_street_name,json=additionalStreetName,proto3" json:"additional_street_name,omitempty"`
	BlockName                    string  `protobuf:"bytes,14,opt,name=block_name,json=blockName,proto3" json:"block_name,omitempty"`
	BuildingName                 string  `protobuf:"bytes,15,opt,name=building_name,json=buildingName,proto3" json:"building_name,omitempty"`
	BuildingNumber               string  `protobuf:"bytes,16,opt,name=building_number,json=buildingNumber,proto3" json:"building_number,omitempty"`
	InhouseMail                  string  `protobuf:"bytes,17,opt,name=inhouse_mail,json=inhouseMail,proto3" json:"inhouse_mail,omitempty"`
	Department                   string  `protobuf:"bytes,18,opt,name=department,proto3" json:"department,omitempty"`
	MarkAttention                string  `protobuf:"bytes,19,opt,name=mark_attention,json=markAttention,proto3" json:"mark_attention,omitempty"`
	MarkCare                     string  `protobuf:"bytes,20,opt,name=mark_care,json=markCare,proto3" json:"mark_care,omitempty"`
	PlotIdentification           string  `protobuf:"bytes,21,opt,name=plot_identification,json=plotIdentification,proto3" json:"plot_identification,omitempty"`
	CitySubdivisionName          string  `protobuf:"bytes,22,opt,name=city_subdivision_name,json=citySubdivisionName,proto3" json:"city_subdivision_name,omitempty"`
	CityName                     string  `protobuf:"bytes,23,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	PostalZone                   string  `protobuf:"bytes,24,opt,name=postal_zone,json=postalZone,proto3" json:"postal_zone,omitempty"`
	CountrySubentity             string  `protobuf:"bytes,25,opt,name=country_subentity,json=countrySubentity,proto3" json:"country_subentity,omitempty"`
	CountrySubentityCode         string  `protobuf:"bytes,26,opt,name=country_subentity_code,json=countrySubentityCode,proto3" json:"country_subentity_code,omitempty"`
	Region                       string  `protobuf:"bytes,27,opt,name=region,proto3" json:"region,omitempty"`
	District                     string  `protobuf:"bytes,28,opt,name=district,proto3" json:"district,omitempty"`
	TimezoneOffset               string  `protobuf:"bytes,29,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	CountryIdCode                string  `protobuf:"bytes,30,opt,name=country_id_code,json=countryIdCode,proto3" json:"country_id_code,omitempty"`
	CountryName                  string  `protobuf:"bytes,31,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	LocationCoordLat             float64 `protobuf:"fixed64,32,opt,name=location_coord_lat,json=locationCoordLat,proto3" json:"location_coord_lat,omitempty"`
	LocationCoordLon             float64 `protobuf:"fixed64,33,opt,name=location_coord_lon,json=locationCoordLon,proto3" json:"location_coord_lon,omitempty"`
	Note                         string  `protobuf:"bytes,34,opt,name=note,proto3" json:"note,omitempty"`
	UserId                       string  `protobuf:"bytes,35,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string  `protobuf:"bytes,36,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string  `protobuf:"bytes,37,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FinancialInstitutionBranchId string  `protobuf:"bytes,38,opt,name=financial_institution_branch_id,json=financialInstitutionBranchId,proto3" json:"financial_institution_branch_id,omitempty"`
}

func (x *UpdateFinancialInstitutionBranchRequest) Reset() {
	*x = UpdateFinancialInstitutionBranchRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFinancialInstitutionBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinancialInstitutionBranchRequest) ProtoMessage() {}

func (x *UpdateFinancialInstitutionBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinancialInstitutionBranchRequest.ProtoReflect.Descriptor instead.
func (*UpdateFinancialInstitutionBranchRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateFinancialInstitutionBranchRequest) GetFbId() string {
	if x != nil {
		return x.FbId
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetFinancialInstitutionId() uint32 {
	if x != nil {
		return x.FinancialInstitutionId
	}
	return 0
}

func (x *UpdateFinancialInstitutionBranchRequest) GetAddrListAgencyId() string {
	if x != nil {
		return x.AddrListAgencyId
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetAddrListId() string {
	if x != nil {
		return x.AddrListId
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetAddrListVersionId() string {
	if x != nil {
		return x.AddrListVersionId
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetAddressTypeCode() string {
	if x != nil {
		return x.AddressTypeCode
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetAddressFormatCode() string {
	if x != nil {
		return x.AddressFormatCode
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetPostbox() string {
	if x != nil {
		return x.Postbox
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetAdditionalStreetName() string {
	if x != nil {
		return x.AdditionalStreetName
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetInhouseMail() string {
	if x != nil {
		return x.InhouseMail
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetMarkAttention() string {
	if x != nil {
		return x.MarkAttention
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetMarkCare() string {
	if x != nil {
		return x.MarkCare
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetPlotIdentification() string {
	if x != nil {
		return x.PlotIdentification
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetCitySubdivisionName() string {
	if x != nil {
		return x.CitySubdivisionName
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetPostalZone() string {
	if x != nil {
		return x.PostalZone
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetCountrySubentity() string {
	if x != nil {
		return x.CountrySubentity
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetCountrySubentityCode() string {
	if x != nil {
		return x.CountrySubentityCode
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetTimezoneOffset() string {
	if x != nil {
		return x.TimezoneOffset
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetCountryIdCode() string {
	if x != nil {
		return x.CountryIdCode
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetLocationCoordLat() float64 {
	if x != nil {
		return x.LocationCoordLat
	}
	return 0
}

func (x *UpdateFinancialInstitutionBranchRequest) GetLocationCoordLon() float64 {
	if x != nil {
		return x.LocationCoordLon
	}
	return 0
}

func (x *UpdateFinancialInstitutionBranchRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UpdateFinancialInstitutionBranchRequest) GetFinancialInstitutionBranchId() string {
	if x != nil {
		return x.FinancialInstitutionBranchId
	}
	return ""
}

type UpdateFinancialInstitutionBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFinancialInstitutionBranchResponse) Reset() {
	*x = UpdateFinancialInstitutionBranchResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFinancialInstitutionBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinancialInstitutionBranchResponse) ProtoMessage() {}

func (x *UpdateFinancialInstitutionBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinancialInstitutionBranchResponse.ProtoReflect.Descriptor instead.
func (*UpdateFinancialInstitutionBranchResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{18}
}

type GetFinancialInstitutionBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetFinancialInstitutionBranchRequest) Reset() {
	*x = GetFinancialInstitutionBranchRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialInstitutionBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialInstitutionBranchRequest) ProtoMessage() {}

func (x *GetFinancialInstitutionBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialInstitutionBranchRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialInstitutionBranchRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{19}
}

func (x *GetFinancialInstitutionBranchRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetFinancialInstitutionBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitutionBranch *FinancialInstitutionBranch `protobuf:"bytes,1,opt,name=financial_institution_branch,json=financialInstitutionBranch,proto3" json:"financial_institution_branch,omitempty"`
}

func (x *GetFinancialInstitutionBranchResponse) Reset() {
	*x = GetFinancialInstitutionBranchResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialInstitutionBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialInstitutionBranchResponse) ProtoMessage() {}

func (x *GetFinancialInstitutionBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialInstitutionBranchResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialInstitutionBranchResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{20}
}

func (x *GetFinancialInstitutionBranchResponse) GetFinancialInstitutionBranch() *FinancialInstitutionBranch {
	if x != nil {
		return x.FinancialInstitutionBranch
	}
	return nil
}

type GetFinancialInstitutionWithBranchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetFinancialInstitutionWithBranchesRequest) Reset() {
	*x = GetFinancialInstitutionWithBranchesRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialInstitutionWithBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialInstitutionWithBranchesRequest) ProtoMessage() {}

func (x *GetFinancialInstitutionWithBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialInstitutionWithBranchesRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialInstitutionWithBranchesRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{21}
}

func (x *GetFinancialInstitutionWithBranchesRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetFinancialInstitutionWithBranchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitution *FinancialInstitution `protobuf:"bytes,1,opt,name=financial_institution,json=financialInstitution,proto3" json:"financial_institution,omitempty"`
}

func (x *GetFinancialInstitutionWithBranchesResponse) Reset() {
	*x = GetFinancialInstitutionWithBranchesResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialInstitutionWithBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialInstitutionWithBranchesResponse) ProtoMessage() {}

func (x *GetFinancialInstitutionWithBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialInstitutionWithBranchesResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialInstitutionWithBranchesResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{22}
}

func (x *GetFinancialInstitutionWithBranchesResponse) GetFinancialInstitution() *FinancialInstitution {
	if x != nil {
		return x.FinancialInstitution
	}
	return nil
}

type DeleteFinancialInstitutionBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *DeleteFinancialInstitutionBranchRequest) Reset() {
	*x = DeleteFinancialInstitutionBranchRequest{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFinancialInstitutionBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFinancialInstitutionBranchRequest) ProtoMessage() {}

func (x *DeleteFinancialInstitutionBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFinancialInstitutionBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteFinancialInstitutionBranchRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteFinancialInstitutionBranchRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type DeleteFinancialInstitutionBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFinancialInstitutionBranchResponse) Reset() {
	*x = DeleteFinancialInstitutionBranchResponse{}
	mi := &file_party_v1_financialinstitution_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFinancialInstitutionBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFinancialInstitutionBranchResponse) ProtoMessage() {}

func (x *DeleteFinancialInstitutionBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_financialinstitution_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFinancialInstitutionBranchResponse.ProtoReflect.Descriptor instead.
func (*DeleteFinancialInstitutionBranchResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_financialinstitution_proto_rawDescGZIP(), []int{24}
}

var File_party_v1_financialinstitution_proto protoreflect.FileDescriptor

var file_party_v1_financialinstitution_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a,
	0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x52, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x1c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64,
	0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x6e,
	0x0a, 0x15, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb0,
	0x0a, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x12,
	0x2d, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64,
	0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x69,
	0x74, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x79, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x22, 0x58, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x24, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x6a, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x44, 0x52, 0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x44,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a,
	0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31,
	0x12, 0x38, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xf0, 0x0a, 0x0a, 0x27, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31,
	0x12, 0x38, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74,
	0x62, 0x6f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x62,
	0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4d,
	0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72,
	0x6b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x6c, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x4c, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x1c, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x1a, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x22, 0xb7, 0x0b, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x66, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x62,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75,
	0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f,
	0x6c, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x6f,
	0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x66, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x1a, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x64, 0x0a, 0x2a, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x82, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xa7, 0x0a, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x31, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x2e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x31, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x31, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75, 0x62, 0x6c, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_party_v1_financialinstitution_proto_rawDescOnce sync.Once
	file_party_v1_financialinstitution_proto_rawDescData = file_party_v1_financialinstitution_proto_rawDesc
)

func file_party_v1_financialinstitution_proto_rawDescGZIP() []byte {
	file_party_v1_financialinstitution_proto_rawDescOnce.Do(func() {
		file_party_v1_financialinstitution_proto_rawDescData = protoimpl.X.CompressGZIP(file_party_v1_financialinstitution_proto_rawDescData)
	})
	return file_party_v1_financialinstitution_proto_rawDescData
}

var file_party_v1_financialinstitution_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_party_v1_financialinstitution_proto_goTypes = []any{
	(*FinancialInstitution)(nil),                        // 0: party.v1.FinancialInstitution
	(*FinancialInstitutionD)(nil),                       // 1: party.v1.FinancialInstitutionD
	(*FinancialInstitutions)(nil),                       // 2: party.v1.FinancialInstitutions
	(*CreateFinancialInstitutionRequest)(nil),           // 3: party.v1.CreateFinancialInstitutionRequest
	(*CreateFinancialInstitutionResponse)(nil),          // 4: party.v1.CreateFinancialInstitutionResponse
	(*UpdateFinancialInstitutionRequest)(nil),           // 5: party.v1.UpdateFinancialInstitutionRequest
	(*UpdateFinancialInstitutionResponse)(nil),          // 6: party.v1.UpdateFinancialInstitutionResponse
	(*GetFinancialInstitutionsRequest)(nil),             // 7: party.v1.GetFinancialInstitutionsRequest
	(*GetFinancialInstitutionsResponse)(nil),            // 8: party.v1.GetFinancialInstitutionsResponse
	(*GetFinancialInstitutionRequest)(nil),              // 9: party.v1.GetFinancialInstitutionRequest
	(*GetFinancialInstitutionResponse)(nil),             // 10: party.v1.GetFinancialInstitutionResponse
	(*DeleteFinancialInstitutionRequest)(nil),           // 11: party.v1.DeleteFinancialInstitutionRequest
	(*DeleteFinancialInstitutionResponse)(nil),          // 12: party.v1.DeleteFinancialInstitutionResponse
	(*FinancialInstitutionBranch)(nil),                  // 13: party.v1.FinancialInstitutionBranch
	(*FinancialInstitutionBranchD)(nil),                 // 14: party.v1.FinancialInstitutionBranchD
	(*CreateFinancialInstitutionBranchRequest)(nil),     // 15: party.v1.CreateFinancialInstitutionBranchRequest
	(*CreateFinancialInstitutionBranchResponse)(nil),    // 16: party.v1.CreateFinancialInstitutionBranchResponse
	(*UpdateFinancialInstitutionBranchRequest)(nil),     // 17: party.v1.UpdateFinancialInstitutionBranchRequest
	(*UpdateFinancialInstitutionBranchResponse)(nil),    // 18: party.v1.UpdateFinancialInstitutionBranchResponse
	(*GetFinancialInstitutionBranchRequest)(nil),        // 19: party.v1.GetFinancialInstitutionBranchRequest
	(*GetFinancialInstitutionBranchResponse)(nil),       // 20: party.v1.GetFinancialInstitutionBranchResponse
	(*GetFinancialInstitutionWithBranchesRequest)(nil),  // 21: party.v1.GetFinancialInstitutionWithBranchesRequest
	(*GetFinancialInstitutionWithBranchesResponse)(nil), // 22: party.v1.GetFinancialInstitutionWithBranchesResponse
	(*DeleteFinancialInstitutionBranchRequest)(nil),     // 23: party.v1.DeleteFinancialInstitutionBranchRequest
	(*DeleteFinancialInstitutionBranchResponse)(nil),    // 24: party.v1.DeleteFinancialInstitutionBranchResponse
	(*v1.CrUpdUser)(nil),                                // 25: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                // 26: common.v1.CrUpdTime
	(*v1.GetRequest)(nil),                               // 27: common.v1.GetRequest
}
var file_party_v1_financialinstitution_proto_depIdxs = []int32{
	1,  // 0: party.v1.FinancialInstitution.financial_institution_d:type_name -> party.v1.FinancialInstitutionD
	25, // 1: party.v1.FinancialInstitution.cr_upd_user:type_name -> common.v1.CrUpdUser
	26, // 2: party.v1.FinancialInstitution.cr_upd_time:type_name -> common.v1.CrUpdTime
	13, // 3: party.v1.FinancialInstitution.financial_institution_branches:type_name -> party.v1.FinancialInstitutionBranch
	0,  // 4: party.v1.FinancialInstitutions.financial_institutions:type_name -> party.v1.FinancialInstitution
	0,  // 5: party.v1.CreateFinancialInstitutionResponse.financial_institution:type_name -> party.v1.FinancialInstitution
	0,  // 6: party.v1.GetFinancialInstitutionsResponse.financial_institutions:type_name -> party.v1.FinancialInstitution
	27, // 7: party.v1.GetFinancialInstitutionRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 8: party.v1.GetFinancialInstitutionResponse.financial_institution:type_name -> party.v1.FinancialInstitution
	27, // 9: party.v1.DeleteFinancialInstitutionRequest.get_request:type_name -> common.v1.GetRequest
	14, // 10: party.v1.FinancialInstitutionBranch.financial_institution_branch_d:type_name -> party.v1.FinancialInstitutionBranchD
	25, // 11: party.v1.FinancialInstitutionBranch.cr_upd_user:type_name -> common.v1.CrUpdUser
	26, // 12: party.v1.FinancialInstitutionBranch.cr_upd_time:type_name -> common.v1.CrUpdTime
	13, // 13: party.v1.CreateFinancialInstitutionBranchResponse.financial_institution_branch:type_name -> party.v1.FinancialInstitutionBranch
	27, // 14: party.v1.GetFinancialInstitutionBranchRequest.get_request:type_name -> common.v1.GetRequest
	13, // 15: party.v1.GetFinancialInstitutionBranchResponse.financial_institution_branch:type_name -> party.v1.FinancialInstitutionBranch
	27, // 16: party.v1.GetFinancialInstitutionWithBranchesRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 17: party.v1.GetFinancialInstitutionWithBranchesResponse.financial_institution:type_name -> party.v1.FinancialInstitution
	27, // 18: party.v1.DeleteFinancialInstitutionBranchRequest.get_request:type_name -> common.v1.GetRequest
	3,  // 19: party.v1.FinancialInstitutionService.CreateFinancialInstitution:input_type -> party.v1.CreateFinancialInstitutionRequest
	7,  // 20: party.v1.FinancialInstitutionService.GetFinancialInstitutions:input_type -> party.v1.GetFinancialInstitutionsRequest
	9,  // 21: party.v1.FinancialInstitutionService.GetFinancialInstitution:input_type -> party.v1.GetFinancialInstitutionRequest
	5,  // 22: party.v1.FinancialInstitutionService.UpdateFinancialInstitution:input_type -> party.v1.UpdateFinancialInstitutionRequest
	11, // 23: party.v1.FinancialInstitutionService.DeleteFinancialInstitution:input_type -> party.v1.DeleteFinancialInstitutionRequest
	15, // 24: party.v1.FinancialInstitutionService.CreateFinancialInstitutionBranch:input_type -> party.v1.CreateFinancialInstitutionBranchRequest
	21, // 25: party.v1.FinancialInstitutionService.GetFinancialInstitutionWithBranches:input_type -> party.v1.GetFinancialInstitutionWithBranchesRequest
	19, // 26: party.v1.FinancialInstitutionService.GetFinancialInstitutionBranch:input_type -> party.v1.GetFinancialInstitutionBranchRequest
	17, // 27: party.v1.FinancialInstitutionService.UpdateFinancialInstitutionBranch:input_type -> party.v1.UpdateFinancialInstitutionBranchRequest
	23, // 28: party.v1.FinancialInstitutionService.DeleteFinancialInstitutionBranch:input_type -> party.v1.DeleteFinancialInstitutionBranchRequest
	4,  // 29: party.v1.FinancialInstitutionService.CreateFinancialInstitution:output_type -> party.v1.CreateFinancialInstitutionResponse
	8,  // 30: party.v1.FinancialInstitutionService.GetFinancialInstitutions:output_type -> party.v1.GetFinancialInstitutionsResponse
	10, // 31: party.v1.FinancialInstitutionService.GetFinancialInstitution:output_type -> party.v1.GetFinancialInstitutionResponse
	6,  // 32: party.v1.FinancialInstitutionService.UpdateFinancialInstitution:output_type -> party.v1.UpdateFinancialInstitutionResponse
	12, // 33: party.v1.FinancialInstitutionService.DeleteFinancialInstitution:output_type -> party.v1.DeleteFinancialInstitutionResponse
	16, // 34: party.v1.FinancialInstitutionService.CreateFinancialInstitutionBranch:output_type -> party.v1.CreateFinancialInstitutionBranchResponse
	22, // 35: party.v1.FinancialInstitutionService.GetFinancialInstitutionWithBranches:output_type -> party.v1.GetFinancialInstitutionWithBranchesResponse
	20, // 36: party.v1.FinancialInstitutionService.GetFinancialInstitutionBranch:output_type -> party.v1.GetFinancialInstitutionBranchResponse
	18, // 37: party.v1.FinancialInstitutionService.UpdateFinancialInstitutionBranch:output_type -> party.v1.UpdateFinancialInstitutionBranchResponse
	24, // 38: party.v1.FinancialInstitutionService.DeleteFinancialInstitutionBranch:output_type -> party.v1.DeleteFinancialInstitutionBranchResponse
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_party_v1_financialinstitution_proto_init() }
func file_party_v1_financialinstitution_proto_init() {
	if File_party_v1_financialinstitution_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_party_v1_financialinstitution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_party_v1_financialinstitution_proto_goTypes,
		DependencyIndexes: file_party_v1_financialinstitution_proto_depIdxs,
		MessageInfos:      file_party_v1_financialinstitution_proto_msgTypes,
	}.Build()
	File_party_v1_financialinstitution_proto = out.File
	file_party_v1_financialinstitution_proto_rawDesc = nil
	file_party_v1_financialinstitution_proto_goTypes = nil
	file_party_v1_financialinstitution_proto_depIdxs = nil
}
