// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: party/v1/financialinstitution.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FinancialInstitution with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinancialInstitution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinancialInstitution with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinancialInstitutionMultiError, or nil if none found.
func (m *FinancialInstitution) ValidateAll() error {
	return m.validate(true)
}

func (m *FinancialInstitution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinancialInstitutionD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinancialInstitutionValidationError{
					field:  "FinancialInstitutionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinancialInstitutionValidationError{
					field:  "FinancialInstitutionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialInstitutionD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinancialInstitutionValidationError{
				field:  "FinancialInstitutionD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinancialInstitutionValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinancialInstitutionValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinancialInstitutionValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinancialInstitutionValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinancialInstitutionValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinancialInstitutionValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFinancialInstitutionBranches() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FinancialInstitutionValidationError{
						field:  fmt.Sprintf("FinancialInstitutionBranches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FinancialInstitutionValidationError{
						field:  fmt.Sprintf("FinancialInstitutionBranches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FinancialInstitutionValidationError{
					field:  fmt.Sprintf("FinancialInstitutionBranches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FinancialInstitutionMultiError(errors)
	}

	return nil
}

// FinancialInstitutionMultiError is an error wrapping multiple validation
// errors returned by FinancialInstitution.ValidateAll() if the designated
// constraints aren't met.
type FinancialInstitutionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinancialInstitutionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinancialInstitutionMultiError) AllErrors() []error { return m }

// FinancialInstitutionValidationError is the validation error returned by
// FinancialInstitution.Validate if the designated constraints aren't met.
type FinancialInstitutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinancialInstitutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinancialInstitutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinancialInstitutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinancialInstitutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinancialInstitutionValidationError) ErrorName() string {
	return "FinancialInstitutionValidationError"
}

// Error satisfies the builtin error interface
func (e FinancialInstitutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinancialInstitution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinancialInstitutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinancialInstitutionValidationError{}

// Validate checks the field values on FinancialInstitutionD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinancialInstitutionD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinancialInstitutionD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinancialInstitutionDMultiError, or nil if none found.
func (m *FinancialInstitutionD) ValidateAll() error {
	return m.validate(true)
}

func (m *FinancialInstitutionD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for FiId

	// no validation rules for Name1

	// no validation rules for AddressId

	if len(errors) > 0 {
		return FinancialInstitutionDMultiError(errors)
	}

	return nil
}

// FinancialInstitutionDMultiError is an error wrapping multiple validation
// errors returned by FinancialInstitutionD.ValidateAll() if the designated
// constraints aren't met.
type FinancialInstitutionDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinancialInstitutionDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinancialInstitutionDMultiError) AllErrors() []error { return m }

// FinancialInstitutionDValidationError is the validation error returned by
// FinancialInstitutionD.Validate if the designated constraints aren't met.
type FinancialInstitutionDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinancialInstitutionDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinancialInstitutionDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinancialInstitutionDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinancialInstitutionDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinancialInstitutionDValidationError) ErrorName() string {
	return "FinancialInstitutionDValidationError"
}

// Error satisfies the builtin error interface
func (e FinancialInstitutionDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinancialInstitutionD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinancialInstitutionDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinancialInstitutionDValidationError{}

// Validate checks the field values on FinancialInstitutions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinancialInstitutions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinancialInstitutions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinancialInstitutionsMultiError, or nil if none found.
func (m *FinancialInstitutions) ValidateAll() error {
	return m.validate(true)
}

func (m *FinancialInstitutions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFinancialInstitutions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FinancialInstitutionsValidationError{
						field:  fmt.Sprintf("FinancialInstitutions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FinancialInstitutionsValidationError{
						field:  fmt.Sprintf("FinancialInstitutions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FinancialInstitutionsValidationError{
					field:  fmt.Sprintf("FinancialInstitutions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FinancialInstitutionsMultiError(errors)
	}

	return nil
}

// FinancialInstitutionsMultiError is an error wrapping multiple validation
// errors returned by FinancialInstitutions.ValidateAll() if the designated
// constraints aren't met.
type FinancialInstitutionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinancialInstitutionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinancialInstitutionsMultiError) AllErrors() []error { return m }

// FinancialInstitutionsValidationError is the validation error returned by
// FinancialInstitutions.Validate if the designated constraints aren't met.
type FinancialInstitutionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinancialInstitutionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinancialInstitutionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinancialInstitutionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinancialInstitutionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinancialInstitutionsValidationError) ErrorName() string {
	return "FinancialInstitutionsValidationError"
}

// Error satisfies the builtin error interface
func (e FinancialInstitutionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinancialInstitutions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinancialInstitutionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinancialInstitutionsValidationError{}

// Validate checks the field values on CreateFinancialInstitutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateFinancialInstitutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFinancialInstitutionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateFinancialInstitutionRequestMultiError, or nil if none found.
func (m *CreateFinancialInstitutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFinancialInstitutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FiId

	// no validation rules for Name1

	// no validation rules for AddrListAgencyId

	// no validation rules for AddrListId

	// no validation rules for AddrListVersionId

	// no validation rules for AddressTypeCode

	// no validation rules for AddressFormatCode

	// no validation rules for Postbox

	// no validation rules for Floor

	// no validation rules for Room

	// no validation rules for StreetName

	// no validation rules for AdditionalStreetName

	// no validation rules for BlockName

	// no validation rules for BuildingName

	// no validation rules for BuildingNumber

	// no validation rules for InhouseMail

	// no validation rules for Department

	// no validation rules for MarkAttention

	// no validation rules for MarkCare

	// no validation rules for PlotIdentification

	// no validation rules for CitySubdivisionName

	// no validation rules for CityName

	// no validation rules for PostalZone

	// no validation rules for CountrySubentity

	// no validation rules for CountrySubentityCode

	// no validation rules for Region

	// no validation rules for District

	// no validation rules for TimezoneOffset

	// no validation rules for CountryIdCode

	// no validation rules for CountryName

	// no validation rules for LocationCoordLat

	// no validation rules for LocationCoordLon

	// no validation rules for Note

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateFinancialInstitutionRequestMultiError(errors)
	}

	return nil
}

// CreateFinancialInstitutionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateFinancialInstitutionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFinancialInstitutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFinancialInstitutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFinancialInstitutionRequestMultiError) AllErrors() []error { return m }

// CreateFinancialInstitutionRequestValidationError is the validation error
// returned by CreateFinancialInstitutionRequest.Validate if the designated
// constraints aren't met.
type CreateFinancialInstitutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFinancialInstitutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFinancialInstitutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFinancialInstitutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFinancialInstitutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFinancialInstitutionRequestValidationError) ErrorName() string {
	return "CreateFinancialInstitutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFinancialInstitutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFinancialInstitutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFinancialInstitutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFinancialInstitutionRequestValidationError{}

// Validate checks the field values on CreateFinancialInstitutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateFinancialInstitutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFinancialInstitutionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateFinancialInstitutionResponseMultiError, or nil if none found.
func (m *CreateFinancialInstitutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFinancialInstitutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinancialInstitution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFinancialInstitutionResponseValidationError{
					field:  "FinancialInstitution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFinancialInstitutionResponseValidationError{
					field:  "FinancialInstitution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialInstitution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFinancialInstitutionResponseValidationError{
				field:  "FinancialInstitution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFinancialInstitutionResponseMultiError(errors)
	}

	return nil
}

// CreateFinancialInstitutionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateFinancialInstitutionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateFinancialInstitutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFinancialInstitutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFinancialInstitutionResponseMultiError) AllErrors() []error { return m }

// CreateFinancialInstitutionResponseValidationError is the validation error
// returned by CreateFinancialInstitutionResponse.Validate if the designated
// constraints aren't met.
type CreateFinancialInstitutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFinancialInstitutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFinancialInstitutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFinancialInstitutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFinancialInstitutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFinancialInstitutionResponseValidationError) ErrorName() string {
	return "CreateFinancialInstitutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFinancialInstitutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFinancialInstitutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFinancialInstitutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFinancialInstitutionResponseValidationError{}

// Validate checks the field values on UpdateFinancialInstitutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateFinancialInstitutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFinancialInstitutionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateFinancialInstitutionRequestMultiError, or nil if none found.
func (m *UpdateFinancialInstitutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFinancialInstitutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FiId

	// no validation rules for Name1

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateFinancialInstitutionRequestMultiError(errors)
	}

	return nil
}

// UpdateFinancialInstitutionRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateFinancialInstitutionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFinancialInstitutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFinancialInstitutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFinancialInstitutionRequestMultiError) AllErrors() []error { return m }

// UpdateFinancialInstitutionRequestValidationError is the validation error
// returned by UpdateFinancialInstitutionRequest.Validate if the designated
// constraints aren't met.
type UpdateFinancialInstitutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFinancialInstitutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFinancialInstitutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFinancialInstitutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFinancialInstitutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFinancialInstitutionRequestValidationError) ErrorName() string {
	return "UpdateFinancialInstitutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFinancialInstitutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFinancialInstitutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFinancialInstitutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFinancialInstitutionRequestValidationError{}

// Validate checks the field values on UpdateFinancialInstitutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateFinancialInstitutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFinancialInstitutionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateFinancialInstitutionResponseMultiError, or nil if none found.
func (m *UpdateFinancialInstitutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFinancialInstitutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFinancialInstitutionResponseMultiError(errors)
	}

	return nil
}

// UpdateFinancialInstitutionResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateFinancialInstitutionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateFinancialInstitutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFinancialInstitutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFinancialInstitutionResponseMultiError) AllErrors() []error { return m }

// UpdateFinancialInstitutionResponseValidationError is the validation error
// returned by UpdateFinancialInstitutionResponse.Validate if the designated
// constraints aren't met.
type UpdateFinancialInstitutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFinancialInstitutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFinancialInstitutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFinancialInstitutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFinancialInstitutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFinancialInstitutionResponseValidationError) ErrorName() string {
	return "UpdateFinancialInstitutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFinancialInstitutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFinancialInstitutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFinancialInstitutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFinancialInstitutionResponseValidationError{}

// Validate checks the field values on GetFinancialInstitutionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFinancialInstitutionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialInstitutionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFinancialInstitutionsRequestMultiError, or nil if none found.
func (m *GetFinancialInstitutionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialInstitutionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetFinancialInstitutionsRequestMultiError(errors)
	}

	return nil
}

// GetFinancialInstitutionsRequestMultiError is an error wrapping multiple
// validation errors returned by GetFinancialInstitutionsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetFinancialInstitutionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialInstitutionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialInstitutionsRequestMultiError) AllErrors() []error { return m }

// GetFinancialInstitutionsRequestValidationError is the validation error
// returned by GetFinancialInstitutionsRequest.Validate if the designated
// constraints aren't met.
type GetFinancialInstitutionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialInstitutionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialInstitutionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialInstitutionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialInstitutionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialInstitutionsRequestValidationError) ErrorName() string {
	return "GetFinancialInstitutionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialInstitutionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialInstitutionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialInstitutionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialInstitutionsRequestValidationError{}

// Validate checks the field values on GetFinancialInstitutionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetFinancialInstitutionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialInstitutionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFinancialInstitutionsResponseMultiError, or nil if none found.
func (m *GetFinancialInstitutionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialInstitutionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFinancialInstitutions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFinancialInstitutionsResponseValidationError{
						field:  fmt.Sprintf("FinancialInstitutions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFinancialInstitutionsResponseValidationError{
						field:  fmt.Sprintf("FinancialInstitutions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFinancialInstitutionsResponseValidationError{
					field:  fmt.Sprintf("FinancialInstitutions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetFinancialInstitutionsResponseMultiError(errors)
	}

	return nil
}

// GetFinancialInstitutionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetFinancialInstitutionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFinancialInstitutionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialInstitutionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialInstitutionsResponseMultiError) AllErrors() []error { return m }

// GetFinancialInstitutionsResponseValidationError is the validation error
// returned by GetFinancialInstitutionsResponse.Validate if the designated
// constraints aren't met.
type GetFinancialInstitutionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialInstitutionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialInstitutionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialInstitutionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialInstitutionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialInstitutionsResponseValidationError) ErrorName() string {
	return "GetFinancialInstitutionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialInstitutionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialInstitutionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialInstitutionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialInstitutionsResponseValidationError{}

// Validate checks the field values on GetFinancialInstitutionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFinancialInstitutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialInstitutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFinancialInstitutionRequestMultiError, or nil if none found.
func (m *GetFinancialInstitutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialInstitutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFinancialInstitutionRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFinancialInstitutionRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFinancialInstitutionRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFinancialInstitutionRequestMultiError(errors)
	}

	return nil
}

// GetFinancialInstitutionRequestMultiError is an error wrapping multiple
// validation errors returned by GetFinancialInstitutionRequest.ValidateAll()
// if the designated constraints aren't met.
type GetFinancialInstitutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialInstitutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialInstitutionRequestMultiError) AllErrors() []error { return m }

// GetFinancialInstitutionRequestValidationError is the validation error
// returned by GetFinancialInstitutionRequest.Validate if the designated
// constraints aren't met.
type GetFinancialInstitutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialInstitutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialInstitutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialInstitutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialInstitutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialInstitutionRequestValidationError) ErrorName() string {
	return "GetFinancialInstitutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialInstitutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialInstitutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialInstitutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialInstitutionRequestValidationError{}

// Validate checks the field values on GetFinancialInstitutionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFinancialInstitutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialInstitutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFinancialInstitutionResponseMultiError, or nil if none found.
func (m *GetFinancialInstitutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialInstitutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinancialInstitution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFinancialInstitutionResponseValidationError{
					field:  "FinancialInstitution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFinancialInstitutionResponseValidationError{
					field:  "FinancialInstitution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialInstitution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFinancialInstitutionResponseValidationError{
				field:  "FinancialInstitution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFinancialInstitutionResponseMultiError(errors)
	}

	return nil
}

// GetFinancialInstitutionResponseMultiError is an error wrapping multiple
// validation errors returned by GetFinancialInstitutionResponse.ValidateAll()
// if the designated constraints aren't met.
type GetFinancialInstitutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialInstitutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialInstitutionResponseMultiError) AllErrors() []error { return m }

// GetFinancialInstitutionResponseValidationError is the validation error
// returned by GetFinancialInstitutionResponse.Validate if the designated
// constraints aren't met.
type GetFinancialInstitutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialInstitutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialInstitutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialInstitutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialInstitutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialInstitutionResponseValidationError) ErrorName() string {
	return "GetFinancialInstitutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialInstitutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialInstitutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialInstitutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialInstitutionResponseValidationError{}

// Validate checks the field values on DeleteFinancialInstitutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteFinancialInstitutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFinancialInstitutionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteFinancialInstitutionRequestMultiError, or nil if none found.
func (m *DeleteFinancialInstitutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFinancialInstitutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteFinancialInstitutionRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteFinancialInstitutionRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteFinancialInstitutionRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteFinancialInstitutionRequestMultiError(errors)
	}

	return nil
}

// DeleteFinancialInstitutionRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteFinancialInstitutionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFinancialInstitutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFinancialInstitutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFinancialInstitutionRequestMultiError) AllErrors() []error { return m }

// DeleteFinancialInstitutionRequestValidationError is the validation error
// returned by DeleteFinancialInstitutionRequest.Validate if the designated
// constraints aren't met.
type DeleteFinancialInstitutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFinancialInstitutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFinancialInstitutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFinancialInstitutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFinancialInstitutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFinancialInstitutionRequestValidationError) ErrorName() string {
	return "DeleteFinancialInstitutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFinancialInstitutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFinancialInstitutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFinancialInstitutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFinancialInstitutionRequestValidationError{}

// Validate checks the field values on DeleteFinancialInstitutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteFinancialInstitutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFinancialInstitutionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteFinancialInstitutionResponseMultiError, or nil if none found.
func (m *DeleteFinancialInstitutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFinancialInstitutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFinancialInstitutionResponseMultiError(errors)
	}

	return nil
}

// DeleteFinancialInstitutionResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteFinancialInstitutionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteFinancialInstitutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFinancialInstitutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFinancialInstitutionResponseMultiError) AllErrors() []error { return m }

// DeleteFinancialInstitutionResponseValidationError is the validation error
// returned by DeleteFinancialInstitutionResponse.Validate if the designated
// constraints aren't met.
type DeleteFinancialInstitutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFinancialInstitutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFinancialInstitutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFinancialInstitutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFinancialInstitutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFinancialInstitutionResponseValidationError) ErrorName() string {
	return "DeleteFinancialInstitutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFinancialInstitutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFinancialInstitutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFinancialInstitutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFinancialInstitutionResponseValidationError{}

// Validate checks the field values on FinancialInstitutionBranch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinancialInstitutionBranch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinancialInstitutionBranch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinancialInstitutionBranchMultiError, or nil if none found.
func (m *FinancialInstitutionBranch) ValidateAll() error {
	return m.validate(true)
}

func (m *FinancialInstitutionBranch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinancialInstitutionBranchD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinancialInstitutionBranchValidationError{
					field:  "FinancialInstitutionBranchD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinancialInstitutionBranchValidationError{
					field:  "FinancialInstitutionBranchD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialInstitutionBranchD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinancialInstitutionBranchValidationError{
				field:  "FinancialInstitutionBranchD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinancialInstitutionBranchValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinancialInstitutionBranchValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinancialInstitutionBranchValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinancialInstitutionBranchValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinancialInstitutionBranchValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinancialInstitutionBranchValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FinancialInstitutionBranchMultiError(errors)
	}

	return nil
}

// FinancialInstitutionBranchMultiError is an error wrapping multiple
// validation errors returned by FinancialInstitutionBranch.ValidateAll() if
// the designated constraints aren't met.
type FinancialInstitutionBranchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinancialInstitutionBranchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinancialInstitutionBranchMultiError) AllErrors() []error { return m }

// FinancialInstitutionBranchValidationError is the validation error returned
// by FinancialInstitutionBranch.Validate if the designated constraints aren't met.
type FinancialInstitutionBranchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinancialInstitutionBranchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinancialInstitutionBranchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinancialInstitutionBranchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinancialInstitutionBranchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinancialInstitutionBranchValidationError) ErrorName() string {
	return "FinancialInstitutionBranchValidationError"
}

// Error satisfies the builtin error interface
func (e FinancialInstitutionBranchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinancialInstitutionBranch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinancialInstitutionBranchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinancialInstitutionBranchValidationError{}

// Validate checks the field values on FinancialInstitutionBranchD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinancialInstitutionBranchD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinancialInstitutionBranchD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinancialInstitutionBranchDMultiError, or nil if none found.
func (m *FinancialInstitutionBranchD) ValidateAll() error {
	return m.validate(true)
}

func (m *FinancialInstitutionBranchD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for FbId

	// no validation rules for Name1

	// no validation rules for FinancialInstitutionId

	// no validation rules for AddressId

	if len(errors) > 0 {
		return FinancialInstitutionBranchDMultiError(errors)
	}

	return nil
}

// FinancialInstitutionBranchDMultiError is an error wrapping multiple
// validation errors returned by FinancialInstitutionBranchD.ValidateAll() if
// the designated constraints aren't met.
type FinancialInstitutionBranchDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinancialInstitutionBranchDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinancialInstitutionBranchDMultiError) AllErrors() []error { return m }

// FinancialInstitutionBranchDValidationError is the validation error returned
// by FinancialInstitutionBranchD.Validate if the designated constraints
// aren't met.
type FinancialInstitutionBranchDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinancialInstitutionBranchDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinancialInstitutionBranchDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinancialInstitutionBranchDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinancialInstitutionBranchDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinancialInstitutionBranchDValidationError) ErrorName() string {
	return "FinancialInstitutionBranchDValidationError"
}

// Error satisfies the builtin error interface
func (e FinancialInstitutionBranchDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinancialInstitutionBranchD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinancialInstitutionBranchDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinancialInstitutionBranchDValidationError{}

// Validate checks the field values on CreateFinancialInstitutionBranchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateFinancialInstitutionBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFinancialInstitutionBranchRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateFinancialInstitutionBranchRequestMultiError, or nil if none found.
func (m *CreateFinancialInstitutionBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFinancialInstitutionBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FbId

	// no validation rules for Name1

	// no validation rules for FinancialInstitutionId

	// no validation rules for AddrListAgencyId

	// no validation rules for AddrListId

	// no validation rules for AddrListVersionId

	// no validation rules for AddressTypeCode

	// no validation rules for AddressFormatCode

	// no validation rules for Postbox

	// no validation rules for Floor

	// no validation rules for Room

	// no validation rules for StreetName

	// no validation rules for AdditionalStreetName

	// no validation rules for BlockName

	// no validation rules for BuildingName

	// no validation rules for BuildingNumber

	// no validation rules for InhouseMail

	// no validation rules for Department

	// no validation rules for MarkAttention

	// no validation rules for MarkCare

	// no validation rules for PlotIdentification

	// no validation rules for CitySubdivisionName

	// no validation rules for CityName

	// no validation rules for PostalZone

	// no validation rules for CountrySubentity

	// no validation rules for CountrySubentityCode

	// no validation rules for Region

	// no validation rules for District

	// no validation rules for TimezoneOffset

	// no validation rules for CountryIdCode

	// no validation rules for CountryName

	// no validation rules for LocationCoordLat

	// no validation rules for LocationCoordLon

	// no validation rules for Note

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateFinancialInstitutionBranchRequestMultiError(errors)
	}

	return nil
}

// CreateFinancialInstitutionBranchRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateFinancialInstitutionBranchRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFinancialInstitutionBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFinancialInstitutionBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFinancialInstitutionBranchRequestMultiError) AllErrors() []error { return m }

// CreateFinancialInstitutionBranchRequestValidationError is the validation
// error returned by CreateFinancialInstitutionBranchRequest.Validate if the
// designated constraints aren't met.
type CreateFinancialInstitutionBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFinancialInstitutionBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFinancialInstitutionBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFinancialInstitutionBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFinancialInstitutionBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFinancialInstitutionBranchRequestValidationError) ErrorName() string {
	return "CreateFinancialInstitutionBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFinancialInstitutionBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFinancialInstitutionBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFinancialInstitutionBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFinancialInstitutionBranchRequestValidationError{}

// Validate checks the field values on CreateFinancialInstitutionBranchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateFinancialInstitutionBranchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFinancialInstitutionBranchResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateFinancialInstitutionBranchResponseMultiError, or nil if none found.
func (m *CreateFinancialInstitutionBranchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFinancialInstitutionBranchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinancialInstitutionBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFinancialInstitutionBranchResponseValidationError{
					field:  "FinancialInstitutionBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFinancialInstitutionBranchResponseValidationError{
					field:  "FinancialInstitutionBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialInstitutionBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFinancialInstitutionBranchResponseValidationError{
				field:  "FinancialInstitutionBranch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFinancialInstitutionBranchResponseMultiError(errors)
	}

	return nil
}

// CreateFinancialInstitutionBranchResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateFinancialInstitutionBranchResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateFinancialInstitutionBranchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFinancialInstitutionBranchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFinancialInstitutionBranchResponseMultiError) AllErrors() []error { return m }

// CreateFinancialInstitutionBranchResponseValidationError is the validation
// error returned by CreateFinancialInstitutionBranchResponse.Validate if the
// designated constraints aren't met.
type CreateFinancialInstitutionBranchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFinancialInstitutionBranchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFinancialInstitutionBranchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFinancialInstitutionBranchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFinancialInstitutionBranchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFinancialInstitutionBranchResponseValidationError) ErrorName() string {
	return "CreateFinancialInstitutionBranchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFinancialInstitutionBranchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFinancialInstitutionBranchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFinancialInstitutionBranchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFinancialInstitutionBranchResponseValidationError{}

// Validate checks the field values on UpdateFinancialInstitutionBranchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateFinancialInstitutionBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateFinancialInstitutionBranchRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateFinancialInstitutionBranchRequestMultiError, or nil if none found.
func (m *UpdateFinancialInstitutionBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFinancialInstitutionBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FbId

	// no validation rules for Name1

	// no validation rules for FinancialInstitutionId

	// no validation rules for AddrListAgencyId

	// no validation rules for AddrListId

	// no validation rules for AddrListVersionId

	// no validation rules for AddressTypeCode

	// no validation rules for AddressFormatCode

	// no validation rules for Postbox

	// no validation rules for Floor

	// no validation rules for Room

	// no validation rules for StreetName

	// no validation rules for AdditionalStreetName

	// no validation rules for BlockName

	// no validation rules for BuildingName

	// no validation rules for BuildingNumber

	// no validation rules for InhouseMail

	// no validation rules for Department

	// no validation rules for MarkAttention

	// no validation rules for MarkCare

	// no validation rules for PlotIdentification

	// no validation rules for CitySubdivisionName

	// no validation rules for CityName

	// no validation rules for PostalZone

	// no validation rules for CountrySubentity

	// no validation rules for CountrySubentityCode

	// no validation rules for Region

	// no validation rules for District

	// no validation rules for TimezoneOffset

	// no validation rules for CountryIdCode

	// no validation rules for CountryName

	// no validation rules for LocationCoordLat

	// no validation rules for LocationCoordLon

	// no validation rules for Note

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	// no validation rules for FinancialInstitutionBranchId

	if len(errors) > 0 {
		return UpdateFinancialInstitutionBranchRequestMultiError(errors)
	}

	return nil
}

// UpdateFinancialInstitutionBranchRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateFinancialInstitutionBranchRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFinancialInstitutionBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFinancialInstitutionBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFinancialInstitutionBranchRequestMultiError) AllErrors() []error { return m }

// UpdateFinancialInstitutionBranchRequestValidationError is the validation
// error returned by UpdateFinancialInstitutionBranchRequest.Validate if the
// designated constraints aren't met.
type UpdateFinancialInstitutionBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFinancialInstitutionBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFinancialInstitutionBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFinancialInstitutionBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFinancialInstitutionBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFinancialInstitutionBranchRequestValidationError) ErrorName() string {
	return "UpdateFinancialInstitutionBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFinancialInstitutionBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFinancialInstitutionBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFinancialInstitutionBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFinancialInstitutionBranchRequestValidationError{}

// Validate checks the field values on UpdateFinancialInstitutionBranchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateFinancialInstitutionBranchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateFinancialInstitutionBranchResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateFinancialInstitutionBranchResponseMultiError, or nil if none found.
func (m *UpdateFinancialInstitutionBranchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFinancialInstitutionBranchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFinancialInstitutionBranchResponseMultiError(errors)
	}

	return nil
}

// UpdateFinancialInstitutionBranchResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateFinancialInstitutionBranchResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateFinancialInstitutionBranchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFinancialInstitutionBranchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFinancialInstitutionBranchResponseMultiError) AllErrors() []error { return m }

// UpdateFinancialInstitutionBranchResponseValidationError is the validation
// error returned by UpdateFinancialInstitutionBranchResponse.Validate if the
// designated constraints aren't met.
type UpdateFinancialInstitutionBranchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFinancialInstitutionBranchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFinancialInstitutionBranchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFinancialInstitutionBranchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFinancialInstitutionBranchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFinancialInstitutionBranchResponseValidationError) ErrorName() string {
	return "UpdateFinancialInstitutionBranchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFinancialInstitutionBranchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFinancialInstitutionBranchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFinancialInstitutionBranchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFinancialInstitutionBranchResponseValidationError{}

// Validate checks the field values on GetFinancialInstitutionBranchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetFinancialInstitutionBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialInstitutionBranchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetFinancialInstitutionBranchRequestMultiError, or nil if none found.
func (m *GetFinancialInstitutionBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialInstitutionBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFinancialInstitutionBranchRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFinancialInstitutionBranchRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFinancialInstitutionBranchRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFinancialInstitutionBranchRequestMultiError(errors)
	}

	return nil
}

// GetFinancialInstitutionBranchRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetFinancialInstitutionBranchRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFinancialInstitutionBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialInstitutionBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialInstitutionBranchRequestMultiError) AllErrors() []error { return m }

// GetFinancialInstitutionBranchRequestValidationError is the validation error
// returned by GetFinancialInstitutionBranchRequest.Validate if the designated
// constraints aren't met.
type GetFinancialInstitutionBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialInstitutionBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialInstitutionBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialInstitutionBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialInstitutionBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialInstitutionBranchRequestValidationError) ErrorName() string {
	return "GetFinancialInstitutionBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialInstitutionBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialInstitutionBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialInstitutionBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialInstitutionBranchRequestValidationError{}

// Validate checks the field values on GetFinancialInstitutionBranchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetFinancialInstitutionBranchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialInstitutionBranchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetFinancialInstitutionBranchResponseMultiError, or nil if none found.
func (m *GetFinancialInstitutionBranchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialInstitutionBranchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinancialInstitutionBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFinancialInstitutionBranchResponseValidationError{
					field:  "FinancialInstitutionBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFinancialInstitutionBranchResponseValidationError{
					field:  "FinancialInstitutionBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialInstitutionBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFinancialInstitutionBranchResponseValidationError{
				field:  "FinancialInstitutionBranch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFinancialInstitutionBranchResponseMultiError(errors)
	}

	return nil
}

// GetFinancialInstitutionBranchResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetFinancialInstitutionBranchResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFinancialInstitutionBranchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialInstitutionBranchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialInstitutionBranchResponseMultiError) AllErrors() []error { return m }

// GetFinancialInstitutionBranchResponseValidationError is the validation error
// returned by GetFinancialInstitutionBranchResponse.Validate if the
// designated constraints aren't met.
type GetFinancialInstitutionBranchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialInstitutionBranchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialInstitutionBranchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialInstitutionBranchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialInstitutionBranchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialInstitutionBranchResponseValidationError) ErrorName() string {
	return "GetFinancialInstitutionBranchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialInstitutionBranchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialInstitutionBranchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialInstitutionBranchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialInstitutionBranchResponseValidationError{}

// Validate checks the field values on
// GetFinancialInstitutionWithBranchesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFinancialInstitutionWithBranchesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetFinancialInstitutionWithBranchesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetFinancialInstitutionWithBranchesRequestMultiError, or nil if none found.
func (m *GetFinancialInstitutionWithBranchesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialInstitutionWithBranchesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFinancialInstitutionWithBranchesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFinancialInstitutionWithBranchesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFinancialInstitutionWithBranchesRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFinancialInstitutionWithBranchesRequestMultiError(errors)
	}

	return nil
}

// GetFinancialInstitutionWithBranchesRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetFinancialInstitutionWithBranchesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFinancialInstitutionWithBranchesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialInstitutionWithBranchesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialInstitutionWithBranchesRequestMultiError) AllErrors() []error { return m }

// GetFinancialInstitutionWithBranchesRequestValidationError is the validation
// error returned by GetFinancialInstitutionWithBranchesRequest.Validate if
// the designated constraints aren't met.
type GetFinancialInstitutionWithBranchesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialInstitutionWithBranchesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialInstitutionWithBranchesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialInstitutionWithBranchesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialInstitutionWithBranchesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialInstitutionWithBranchesRequestValidationError) ErrorName() string {
	return "GetFinancialInstitutionWithBranchesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialInstitutionWithBranchesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialInstitutionWithBranchesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialInstitutionWithBranchesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialInstitutionWithBranchesRequestValidationError{}

// Validate checks the field values on
// GetFinancialInstitutionWithBranchesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFinancialInstitutionWithBranchesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetFinancialInstitutionWithBranchesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetFinancialInstitutionWithBranchesResponseMultiError, or nil if none found.
func (m *GetFinancialInstitutionWithBranchesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialInstitutionWithBranchesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinancialInstitution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFinancialInstitutionWithBranchesResponseValidationError{
					field:  "FinancialInstitution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFinancialInstitutionWithBranchesResponseValidationError{
					field:  "FinancialInstitution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialInstitution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFinancialInstitutionWithBranchesResponseValidationError{
				field:  "FinancialInstitution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFinancialInstitutionWithBranchesResponseMultiError(errors)
	}

	return nil
}

// GetFinancialInstitutionWithBranchesResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetFinancialInstitutionWithBranchesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFinancialInstitutionWithBranchesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialInstitutionWithBranchesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialInstitutionWithBranchesResponseMultiError) AllErrors() []error { return m }

// GetFinancialInstitutionWithBranchesResponseValidationError is the validation
// error returned by GetFinancialInstitutionWithBranchesResponse.Validate if
// the designated constraints aren't met.
type GetFinancialInstitutionWithBranchesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialInstitutionWithBranchesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialInstitutionWithBranchesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialInstitutionWithBranchesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialInstitutionWithBranchesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialInstitutionWithBranchesResponseValidationError) ErrorName() string {
	return "GetFinancialInstitutionWithBranchesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialInstitutionWithBranchesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialInstitutionWithBranchesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialInstitutionWithBranchesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialInstitutionWithBranchesResponseValidationError{}

// Validate checks the field values on DeleteFinancialInstitutionBranchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteFinancialInstitutionBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteFinancialInstitutionBranchRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteFinancialInstitutionBranchRequestMultiError, or nil if none found.
func (m *DeleteFinancialInstitutionBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFinancialInstitutionBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteFinancialInstitutionBranchRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteFinancialInstitutionBranchRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteFinancialInstitutionBranchRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteFinancialInstitutionBranchRequestMultiError(errors)
	}

	return nil
}

// DeleteFinancialInstitutionBranchRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteFinancialInstitutionBranchRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFinancialInstitutionBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFinancialInstitutionBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFinancialInstitutionBranchRequestMultiError) AllErrors() []error { return m }

// DeleteFinancialInstitutionBranchRequestValidationError is the validation
// error returned by DeleteFinancialInstitutionBranchRequest.Validate if the
// designated constraints aren't met.
type DeleteFinancialInstitutionBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFinancialInstitutionBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFinancialInstitutionBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFinancialInstitutionBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFinancialInstitutionBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFinancialInstitutionBranchRequestValidationError) ErrorName() string {
	return "DeleteFinancialInstitutionBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFinancialInstitutionBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFinancialInstitutionBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFinancialInstitutionBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFinancialInstitutionBranchRequestValidationError{}

// Validate checks the field values on DeleteFinancialInstitutionBranchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteFinancialInstitutionBranchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteFinancialInstitutionBranchResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteFinancialInstitutionBranchResponseMultiError, or nil if none found.
func (m *DeleteFinancialInstitutionBranchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFinancialInstitutionBranchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFinancialInstitutionBranchResponseMultiError(errors)
	}

	return nil
}

// DeleteFinancialInstitutionBranchResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteFinancialInstitutionBranchResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteFinancialInstitutionBranchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFinancialInstitutionBranchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFinancialInstitutionBranchResponseMultiError) AllErrors() []error { return m }

// DeleteFinancialInstitutionBranchResponseValidationError is the validation
// error returned by DeleteFinancialInstitutionBranchResponse.Validate if the
// designated constraints aren't met.
type DeleteFinancialInstitutionBranchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFinancialInstitutionBranchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFinancialInstitutionBranchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFinancialInstitutionBranchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFinancialInstitutionBranchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFinancialInstitutionBranchResponseValidationError) ErrorName() string {
	return "DeleteFinancialInstitutionBranchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFinancialInstitutionBranchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFinancialInstitutionBranchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFinancialInstitutionBranchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFinancialInstitutionBranchResponseValidationError{}
