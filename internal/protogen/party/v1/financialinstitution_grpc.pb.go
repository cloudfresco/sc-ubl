// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: party/v1/financialinstitution.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FinancialInstitutionService_CreateFinancialInstitution_FullMethodName          = "/party.v1.FinancialInstitutionService/CreateFinancialInstitution"
	FinancialInstitutionService_GetFinancialInstitutions_FullMethodName            = "/party.v1.FinancialInstitutionService/GetFinancialInstitutions"
	FinancialInstitutionService_GetFinancialInstitution_FullMethodName             = "/party.v1.FinancialInstitutionService/GetFinancialInstitution"
	FinancialInstitutionService_UpdateFinancialInstitution_FullMethodName          = "/party.v1.FinancialInstitutionService/UpdateFinancialInstitution"
	FinancialInstitutionService_DeleteFinancialInstitution_FullMethodName          = "/party.v1.FinancialInstitutionService/DeleteFinancialInstitution"
	FinancialInstitutionService_CreateFinancialInstitutionBranch_FullMethodName    = "/party.v1.FinancialInstitutionService/CreateFinancialInstitutionBranch"
	FinancialInstitutionService_GetFinancialInstitutionWithBranches_FullMethodName = "/party.v1.FinancialInstitutionService/GetFinancialInstitutionWithBranches"
	FinancialInstitutionService_GetFinancialInstitutionBranch_FullMethodName       = "/party.v1.FinancialInstitutionService/GetFinancialInstitutionBranch"
	FinancialInstitutionService_UpdateFinancialInstitutionBranch_FullMethodName    = "/party.v1.FinancialInstitutionService/UpdateFinancialInstitutionBranch"
	FinancialInstitutionService_DeleteFinancialInstitutionBranch_FullMethodName    = "/party.v1.FinancialInstitutionService/DeleteFinancialInstitutionBranch"
)

// FinancialInstitutionServiceClient is the client API for FinancialInstitutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The FinancialInstitutionService service definition.
type FinancialInstitutionServiceClient interface {
	CreateFinancialInstitution(ctx context.Context, in *CreateFinancialInstitutionRequest, opts ...grpc.CallOption) (*CreateFinancialInstitutionResponse, error)
	GetFinancialInstitutions(ctx context.Context, in *GetFinancialInstitutionsRequest, opts ...grpc.CallOption) (*GetFinancialInstitutionsResponse, error)
	GetFinancialInstitution(ctx context.Context, in *GetFinancialInstitutionRequest, opts ...grpc.CallOption) (*GetFinancialInstitutionResponse, error)
	UpdateFinancialInstitution(ctx context.Context, in *UpdateFinancialInstitutionRequest, opts ...grpc.CallOption) (*UpdateFinancialInstitutionResponse, error)
	DeleteFinancialInstitution(ctx context.Context, in *DeleteFinancialInstitutionRequest, opts ...grpc.CallOption) (*DeleteFinancialInstitutionResponse, error)
	CreateFinancialInstitutionBranch(ctx context.Context, in *CreateFinancialInstitutionBranchRequest, opts ...grpc.CallOption) (*CreateFinancialInstitutionBranchResponse, error)
	GetFinancialInstitutionWithBranches(ctx context.Context, in *GetFinancialInstitutionWithBranchesRequest, opts ...grpc.CallOption) (*GetFinancialInstitutionWithBranchesResponse, error)
	GetFinancialInstitutionBranch(ctx context.Context, in *GetFinancialInstitutionBranchRequest, opts ...grpc.CallOption) (*GetFinancialInstitutionBranchResponse, error)
	UpdateFinancialInstitutionBranch(ctx context.Context, in *UpdateFinancialInstitutionBranchRequest, opts ...grpc.CallOption) (*UpdateFinancialInstitutionBranchResponse, error)
	DeleteFinancialInstitutionBranch(ctx context.Context, in *DeleteFinancialInstitutionBranchRequest, opts ...grpc.CallOption) (*DeleteFinancialInstitutionBranchResponse, error)
}

type financialInstitutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancialInstitutionServiceClient(cc grpc.ClientConnInterface) FinancialInstitutionServiceClient {
	return &financialInstitutionServiceClient{cc}
}

func (c *financialInstitutionServiceClient) CreateFinancialInstitution(ctx context.Context, in *CreateFinancialInstitutionRequest, opts ...grpc.CallOption) (*CreateFinancialInstitutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFinancialInstitutionResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_CreateFinancialInstitution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialInstitutionServiceClient) GetFinancialInstitutions(ctx context.Context, in *GetFinancialInstitutionsRequest, opts ...grpc.CallOption) (*GetFinancialInstitutionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinancialInstitutionsResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_GetFinancialInstitutions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialInstitutionServiceClient) GetFinancialInstitution(ctx context.Context, in *GetFinancialInstitutionRequest, opts ...grpc.CallOption) (*GetFinancialInstitutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinancialInstitutionResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_GetFinancialInstitution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialInstitutionServiceClient) UpdateFinancialInstitution(ctx context.Context, in *UpdateFinancialInstitutionRequest, opts ...grpc.CallOption) (*UpdateFinancialInstitutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFinancialInstitutionResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_UpdateFinancialInstitution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialInstitutionServiceClient) DeleteFinancialInstitution(ctx context.Context, in *DeleteFinancialInstitutionRequest, opts ...grpc.CallOption) (*DeleteFinancialInstitutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFinancialInstitutionResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_DeleteFinancialInstitution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialInstitutionServiceClient) CreateFinancialInstitutionBranch(ctx context.Context, in *CreateFinancialInstitutionBranchRequest, opts ...grpc.CallOption) (*CreateFinancialInstitutionBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFinancialInstitutionBranchResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_CreateFinancialInstitutionBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialInstitutionServiceClient) GetFinancialInstitutionWithBranches(ctx context.Context, in *GetFinancialInstitutionWithBranchesRequest, opts ...grpc.CallOption) (*GetFinancialInstitutionWithBranchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinancialInstitutionWithBranchesResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_GetFinancialInstitutionWithBranches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialInstitutionServiceClient) GetFinancialInstitutionBranch(ctx context.Context, in *GetFinancialInstitutionBranchRequest, opts ...grpc.CallOption) (*GetFinancialInstitutionBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinancialInstitutionBranchResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_GetFinancialInstitutionBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialInstitutionServiceClient) UpdateFinancialInstitutionBranch(ctx context.Context, in *UpdateFinancialInstitutionBranchRequest, opts ...grpc.CallOption) (*UpdateFinancialInstitutionBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFinancialInstitutionBranchResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_UpdateFinancialInstitutionBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialInstitutionServiceClient) DeleteFinancialInstitutionBranch(ctx context.Context, in *DeleteFinancialInstitutionBranchRequest, opts ...grpc.CallOption) (*DeleteFinancialInstitutionBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFinancialInstitutionBranchResponse)
	err := c.cc.Invoke(ctx, FinancialInstitutionService_DeleteFinancialInstitutionBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancialInstitutionServiceServer is the server API for FinancialInstitutionService service.
// All implementations must embed UnimplementedFinancialInstitutionServiceServer
// for forward compatibility.
//
// The FinancialInstitutionService service definition.
type FinancialInstitutionServiceServer interface {
	CreateFinancialInstitution(context.Context, *CreateFinancialInstitutionRequest) (*CreateFinancialInstitutionResponse, error)
	GetFinancialInstitutions(context.Context, *GetFinancialInstitutionsRequest) (*GetFinancialInstitutionsResponse, error)
	GetFinancialInstitution(context.Context, *GetFinancialInstitutionRequest) (*GetFinancialInstitutionResponse, error)
	UpdateFinancialInstitution(context.Context, *UpdateFinancialInstitutionRequest) (*UpdateFinancialInstitutionResponse, error)
	DeleteFinancialInstitution(context.Context, *DeleteFinancialInstitutionRequest) (*DeleteFinancialInstitutionResponse, error)
	CreateFinancialInstitutionBranch(context.Context, *CreateFinancialInstitutionBranchRequest) (*CreateFinancialInstitutionBranchResponse, error)
	GetFinancialInstitutionWithBranches(context.Context, *GetFinancialInstitutionWithBranchesRequest) (*GetFinancialInstitutionWithBranchesResponse, error)
	GetFinancialInstitutionBranch(context.Context, *GetFinancialInstitutionBranchRequest) (*GetFinancialInstitutionBranchResponse, error)
	UpdateFinancialInstitutionBranch(context.Context, *UpdateFinancialInstitutionBranchRequest) (*UpdateFinancialInstitutionBranchResponse, error)
	DeleteFinancialInstitutionBranch(context.Context, *DeleteFinancialInstitutionBranchRequest) (*DeleteFinancialInstitutionBranchResponse, error)
	mustEmbedUnimplementedFinancialInstitutionServiceServer()
}

// UnimplementedFinancialInstitutionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinancialInstitutionServiceServer struct{}

func (UnimplementedFinancialInstitutionServiceServer) CreateFinancialInstitution(context.Context, *CreateFinancialInstitutionRequest) (*CreateFinancialInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinancialInstitution not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) GetFinancialInstitutions(context.Context, *GetFinancialInstitutionsRequest) (*GetFinancialInstitutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialInstitutions not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) GetFinancialInstitution(context.Context, *GetFinancialInstitutionRequest) (*GetFinancialInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialInstitution not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) UpdateFinancialInstitution(context.Context, *UpdateFinancialInstitutionRequest) (*UpdateFinancialInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinancialInstitution not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) DeleteFinancialInstitution(context.Context, *DeleteFinancialInstitutionRequest) (*DeleteFinancialInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFinancialInstitution not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) CreateFinancialInstitutionBranch(context.Context, *CreateFinancialInstitutionBranchRequest) (*CreateFinancialInstitutionBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinancialInstitutionBranch not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) GetFinancialInstitutionWithBranches(context.Context, *GetFinancialInstitutionWithBranchesRequest) (*GetFinancialInstitutionWithBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialInstitutionWithBranches not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) GetFinancialInstitutionBranch(context.Context, *GetFinancialInstitutionBranchRequest) (*GetFinancialInstitutionBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialInstitutionBranch not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) UpdateFinancialInstitutionBranch(context.Context, *UpdateFinancialInstitutionBranchRequest) (*UpdateFinancialInstitutionBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinancialInstitutionBranch not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) DeleteFinancialInstitutionBranch(context.Context, *DeleteFinancialInstitutionBranchRequest) (*DeleteFinancialInstitutionBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFinancialInstitutionBranch not implemented")
}
func (UnimplementedFinancialInstitutionServiceServer) mustEmbedUnimplementedFinancialInstitutionServiceServer() {
}
func (UnimplementedFinancialInstitutionServiceServer) testEmbeddedByValue() {}

// UnsafeFinancialInstitutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancialInstitutionServiceServer will
// result in compilation errors.
type UnsafeFinancialInstitutionServiceServer interface {
	mustEmbedUnimplementedFinancialInstitutionServiceServer()
}

func RegisterFinancialInstitutionServiceServer(s grpc.ServiceRegistrar, srv FinancialInstitutionServiceServer) {
	// If the following call pancis, it indicates UnimplementedFinancialInstitutionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FinancialInstitutionService_ServiceDesc, srv)
}

func _FinancialInstitutionService_CreateFinancialInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinancialInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).CreateFinancialInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_CreateFinancialInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).CreateFinancialInstitution(ctx, req.(*CreateFinancialInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialInstitutionService_GetFinancialInstitutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialInstitutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).GetFinancialInstitutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_GetFinancialInstitutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).GetFinancialInstitutions(ctx, req.(*GetFinancialInstitutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialInstitutionService_GetFinancialInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).GetFinancialInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_GetFinancialInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).GetFinancialInstitution(ctx, req.(*GetFinancialInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialInstitutionService_UpdateFinancialInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinancialInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).UpdateFinancialInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_UpdateFinancialInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).UpdateFinancialInstitution(ctx, req.(*UpdateFinancialInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialInstitutionService_DeleteFinancialInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFinancialInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).DeleteFinancialInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_DeleteFinancialInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).DeleteFinancialInstitution(ctx, req.(*DeleteFinancialInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialInstitutionService_CreateFinancialInstitutionBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinancialInstitutionBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).CreateFinancialInstitutionBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_CreateFinancialInstitutionBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).CreateFinancialInstitutionBranch(ctx, req.(*CreateFinancialInstitutionBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialInstitutionService_GetFinancialInstitutionWithBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialInstitutionWithBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).GetFinancialInstitutionWithBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_GetFinancialInstitutionWithBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).GetFinancialInstitutionWithBranches(ctx, req.(*GetFinancialInstitutionWithBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialInstitutionService_GetFinancialInstitutionBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialInstitutionBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).GetFinancialInstitutionBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_GetFinancialInstitutionBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).GetFinancialInstitutionBranch(ctx, req.(*GetFinancialInstitutionBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialInstitutionService_UpdateFinancialInstitutionBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinancialInstitutionBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).UpdateFinancialInstitutionBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_UpdateFinancialInstitutionBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).UpdateFinancialInstitutionBranch(ctx, req.(*UpdateFinancialInstitutionBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialInstitutionService_DeleteFinancialInstitutionBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFinancialInstitutionBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialInstitutionServiceServer).DeleteFinancialInstitutionBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialInstitutionService_DeleteFinancialInstitutionBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialInstitutionServiceServer).DeleteFinancialInstitutionBranch(ctx, req.(*DeleteFinancialInstitutionBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinancialInstitutionService_ServiceDesc is the grpc.ServiceDesc for FinancialInstitutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinancialInstitutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.v1.FinancialInstitutionService",
	HandlerType: (*FinancialInstitutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFinancialInstitution",
			Handler:    _FinancialInstitutionService_CreateFinancialInstitution_Handler,
		},
		{
			MethodName: "GetFinancialInstitutions",
			Handler:    _FinancialInstitutionService_GetFinancialInstitutions_Handler,
		},
		{
			MethodName: "GetFinancialInstitution",
			Handler:    _FinancialInstitutionService_GetFinancialInstitution_Handler,
		},
		{
			MethodName: "UpdateFinancialInstitution",
			Handler:    _FinancialInstitutionService_UpdateFinancialInstitution_Handler,
		},
		{
			MethodName: "DeleteFinancialInstitution",
			Handler:    _FinancialInstitutionService_DeleteFinancialInstitution_Handler,
		},
		{
			MethodName: "CreateFinancialInstitutionBranch",
			Handler:    _FinancialInstitutionService_CreateFinancialInstitutionBranch_Handler,
		},
		{
			MethodName: "GetFinancialInstitutionWithBranches",
			Handler:    _FinancialInstitutionService_GetFinancialInstitutionWithBranches_Handler,
		},
		{
			MethodName: "GetFinancialInstitutionBranch",
			Handler:    _FinancialInstitutionService_GetFinancialInstitutionBranch_Handler,
		},
		{
			MethodName: "UpdateFinancialInstitutionBranch",
			Handler:    _FinancialInstitutionService_UpdateFinancialInstitutionBranch_Handler,
		},
		{
			MethodName: "DeleteFinancialInstitutionBranch",
			Handler:    _FinancialInstitutionService_DeleteFinancialInstitutionBranch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party/v1/financialinstitution.proto",
}
