// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: party/v1/party.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyD               *PartyD                `protobuf:"bytes,1,opt,name=party_d,json=partyD,proto3" json:"party_d,omitempty"`
	PartyLegalEntityD    *v1.PartyLegalEntityD  `protobuf:"bytes,2,opt,name=party_legal_entity_d,json=partyLegalEntityD,proto3" json:"party_legal_entity_d,omitempty"`
	PartyLegalEntityT    *v1.PartyLegalEntityT  `protobuf:"bytes,3,opt,name=party_legal_entity_t,json=partyLegalEntityT,proto3" json:"party_legal_entity_t,omitempty"`
	CrUpdUser            *v1.CrUpdUser          `protobuf:"bytes,4,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime            *v1.CrUpdTime          `protobuf:"bytes,5,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	PartyIdentifications []*PartyIdentification `protobuf:"bytes,6,rep,name=party_identifications,json=partyIdentifications,proto3" json:"party_identifications,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	mi := &file_party_v1_party_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{0}
}

func (x *Party) GetPartyD() *PartyD {
	if x != nil {
		return x.PartyD
	}
	return nil
}

func (x *Party) GetPartyLegalEntityD() *v1.PartyLegalEntityD {
	if x != nil {
		return x.PartyLegalEntityD
	}
	return nil
}

func (x *Party) GetPartyLegalEntityT() *v1.PartyLegalEntityT {
	if x != nil {
		return x.PartyLegalEntityT
	}
	return nil
}

func (x *Party) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Party) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *Party) GetPartyIdentifications() []*PartyIdentification {
	if x != nil {
		return x.PartyIdentifications
	}
	return nil
}

type PartyD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                 []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                   string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	PartyEndpointId       string `protobuf:"bytes,4,opt,name=party_endpoint_id,json=partyEndpointId,proto3" json:"party_endpoint_id,omitempty"`
	PartyEndpointSchemeId string `protobuf:"bytes,5,opt,name=party_endpoint_scheme_id,json=partyEndpointSchemeId,proto3" json:"party_endpoint_scheme_id,omitempty"`
	PartyName             string `protobuf:"bytes,6,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
	PartyDesc             string `protobuf:"bytes,7,opt,name=party_desc,json=partyDesc,proto3" json:"party_desc,omitempty"`
	PartyType             string `protobuf:"bytes,8,opt,name=party_type,json=partyType,proto3" json:"party_type,omitempty"`
	LevelP                uint32 `protobuf:"varint,9,opt,name=level_p,json=levelP,proto3" json:"level_p,omitempty"`
	ParentId              uint32 `protobuf:"varint,10,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	NumChd                uint32 `protobuf:"varint,11,opt,name=num_chd,json=numChd,proto3" json:"num_chd,omitempty"`
	Leaf                  bool   `protobuf:"varint,12,opt,name=leaf,proto3" json:"leaf,omitempty"`
	TaxReference1         string `protobuf:"bytes,13,opt,name=tax_reference1,json=taxReference1,proto3" json:"tax_reference1,omitempty"`
	TaxReference2         string `protobuf:"bytes,14,opt,name=tax_reference2,json=taxReference2,proto3" json:"tax_reference2,omitempty"`
	PublicKey             string `protobuf:"bytes,15,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	AddressId             uint32 `protobuf:"varint,16,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *PartyD) Reset() {
	*x = PartyD{}
	mi := &file_party_v1_party_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyD) ProtoMessage() {}

func (x *PartyD) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyD.ProtoReflect.Descriptor instead.
func (*PartyD) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{1}
}

func (x *PartyD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PartyD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PartyD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PartyD) GetPartyEndpointId() string {
	if x != nil {
		return x.PartyEndpointId
	}
	return ""
}

func (x *PartyD) GetPartyEndpointSchemeId() string {
	if x != nil {
		return x.PartyEndpointSchemeId
	}
	return ""
}

func (x *PartyD) GetPartyName() string {
	if x != nil {
		return x.PartyName
	}
	return ""
}

func (x *PartyD) GetPartyDesc() string {
	if x != nil {
		return x.PartyDesc
	}
	return ""
}

func (x *PartyD) GetPartyType() string {
	if x != nil {
		return x.PartyType
	}
	return ""
}

func (x *PartyD) GetLevelP() uint32 {
	if x != nil {
		return x.LevelP
	}
	return 0
}

func (x *PartyD) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *PartyD) GetNumChd() uint32 {
	if x != nil {
		return x.NumChd
	}
	return 0
}

func (x *PartyD) GetLeaf() bool {
	if x != nil {
		return x.Leaf
	}
	return false
}

func (x *PartyD) GetTaxReference1() string {
	if x != nil {
		return x.TaxReference1
	}
	return ""
}

func (x *PartyD) GetTaxReference2() string {
	if x != nil {
		return x.TaxReference2
	}
	return ""
}

func (x *PartyD) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *PartyD) GetAddressId() uint32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type CreatePartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyEndpointId               string  `protobuf:"bytes,1,opt,name=party_endpoint_id,json=partyEndpointId,proto3" json:"party_endpoint_id,omitempty"`
	PartyEndpointSchemeId         string  `protobuf:"bytes,2,opt,name=party_endpoint_scheme_id,json=partyEndpointSchemeId,proto3" json:"party_endpoint_scheme_id,omitempty"`
	PartyName                     string  `protobuf:"bytes,3,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
	PartyDesc                     string  `protobuf:"bytes,4,opt,name=party_desc,json=partyDesc,proto3" json:"party_desc,omitempty"`
	PartyType                     string  `protobuf:"bytes,5,opt,name=party_type,json=partyType,proto3" json:"party_type,omitempty"`
	RegistrationName              string  `protobuf:"bytes,6,opt,name=registration_name,json=registrationName,proto3" json:"registration_name,omitempty"`
	CompanyId                     string  `protobuf:"bytes,7,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	RegistrationDate              string  `protobuf:"bytes,8,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
	RegistrationExpirationDate    string  `protobuf:"bytes,9,opt,name=registration_expiration_date,json=registrationExpirationDate,proto3" json:"registration_expiration_date,omitempty"`
	CompanyLegalFormCode          string  `protobuf:"bytes,10,opt,name=company_legal_form_code,json=companyLegalFormCode,proto3" json:"company_legal_form_code,omitempty"`
	CompanyLegalForm              string  `protobuf:"bytes,11,opt,name=company_legal_form,json=companyLegalForm,proto3" json:"company_legal_form,omitempty"`
	SoleProprietorshipIndicator   bool    `protobuf:"varint,12,opt,name=sole_proprietorship_indicator,json=soleProprietorshipIndicator,proto3" json:"sole_proprietorship_indicator,omitempty"`
	CompanyLiquidationStatusCode  string  `protobuf:"bytes,13,opt,name=company_liquidation_status_code,json=companyLiquidationStatusCode,proto3" json:"company_liquidation_status_code,omitempty"`
	CorporateStockAmount          int64   `protobuf:"varint,14,opt,name=corporate_stock_amount,json=corporateStockAmount,proto3" json:"corporate_stock_amount,omitempty"`
	FullyPaidSharesIndicator      bool    `protobuf:"varint,15,opt,name=fully_paid_shares_indicator,json=fullyPaidSharesIndicator,proto3" json:"fully_paid_shares_indicator,omitempty"`
	CorporateRegistrationId       string  `protobuf:"bytes,16,opt,name=corporate_registration_id,json=corporateRegistrationId,proto3" json:"corporate_registration_id,omitempty"`
	CorporateRegistrationName     string  `protobuf:"bytes,17,opt,name=corporate_registration_name,json=corporateRegistrationName,proto3" json:"corporate_registration_name,omitempty"`
	CorporateRegistrationTypeCode string  `protobuf:"bytes,18,opt,name=corporate_registration_type_code,json=corporateRegistrationTypeCode,proto3" json:"corporate_registration_type_code,omitempty"`
	TaxLevelCode                  string  `protobuf:"bytes,19,opt,name=tax_level_code,json=taxLevelCode,proto3" json:"tax_level_code,omitempty"`
	ExemptionReasonCode           string  `protobuf:"bytes,20,opt,name=exemption_reason_code,json=exemptionReasonCode,proto3" json:"exemption_reason_code,omitempty"`
	ExemptionReason               string  `protobuf:"bytes,21,opt,name=exemption_reason,json=exemptionReason,proto3" json:"exemption_reason,omitempty"`
	TsId                          string  `protobuf:"bytes,22,opt,name=ts_id,json=tsId,proto3" json:"ts_id,omitempty"`
	TaxSchemeName                 string  `protobuf:"bytes,23,opt,name=tax_scheme_name,json=taxSchemeName,proto3" json:"tax_scheme_name,omitempty"`
	TaxTypeCode                   string  `protobuf:"bytes,24,opt,name=tax_type_code,json=taxTypeCode,proto3" json:"tax_type_code,omitempty"`
	CurrencyCode                  string  `protobuf:"bytes,25,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Name1                         string  `protobuf:"bytes,61,opt,name=name1,proto3" json:"name1,omitempty"`
	AddrListAgencyId              string  `protobuf:"bytes,26,opt,name=addr_list_agency_id,json=addrListAgencyId,proto3" json:"addr_list_agency_id,omitempty"`
	AddrListId                    string  `protobuf:"bytes,27,opt,name=addr_list_id,json=addrListId,proto3" json:"addr_list_id,omitempty"`
	AddrListVersionId             string  `protobuf:"bytes,28,opt,name=addr_list_version_id,json=addrListVersionId,proto3" json:"addr_list_version_id,omitempty"`
	AddressTypeCode               string  `protobuf:"bytes,29,opt,name=address_type_code,json=addressTypeCode,proto3" json:"address_type_code,omitempty"`
	AddressFormatCode             string  `protobuf:"bytes,30,opt,name=address_format_code,json=addressFormatCode,proto3" json:"address_format_code,omitempty"`
	Postbox                       string  `protobuf:"bytes,31,opt,name=postbox,proto3" json:"postbox,omitempty"`
	Floor1                        string  `protobuf:"bytes,32,opt,name=floor1,proto3" json:"floor1,omitempty"`
	Room                          string  `protobuf:"bytes,33,opt,name=room,proto3" json:"room,omitempty"`
	StreetName                    string  `protobuf:"bytes,34,opt,name=street_name,json=streetName,proto3" json:"street_name,omitempty"`
	AdditionalStreetName          string  `protobuf:"bytes,35,opt,name=additional_street_name,json=additionalStreetName,proto3" json:"additional_street_name,omitempty"`
	BlockName                     string  `protobuf:"bytes,36,opt,name=block_name,json=blockName,proto3" json:"block_name,omitempty"`
	BuildingName                  string  `protobuf:"bytes,37,opt,name=building_name,json=buildingName,proto3" json:"building_name,omitempty"`
	BuildingNumber                string  `protobuf:"bytes,38,opt,name=building_number,json=buildingNumber,proto3" json:"building_number,omitempty"`
	InhouseMail                   string  `protobuf:"bytes,39,opt,name=inhouse_mail,json=inhouseMail,proto3" json:"inhouse_mail,omitempty"`
	Department                    string  `protobuf:"bytes,40,opt,name=department,proto3" json:"department,omitempty"`
	MarkAttention                 string  `protobuf:"bytes,41,opt,name=mark_attention,json=markAttention,proto3" json:"mark_attention,omitempty"`
	MarkCare                      string  `protobuf:"bytes,42,opt,name=mark_care,json=markCare,proto3" json:"mark_care,omitempty"`
	PlotIdentification            string  `protobuf:"bytes,43,opt,name=plot_identification,json=plotIdentification,proto3" json:"plot_identification,omitempty"`
	CitySubdivisionName           string  `protobuf:"bytes,44,opt,name=city_subdivision_name,json=citySubdivisionName,proto3" json:"city_subdivision_name,omitempty"`
	CityName                      string  `protobuf:"bytes,45,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	PostalZone                    string  `protobuf:"bytes,46,opt,name=postal_zone,json=postalZone,proto3" json:"postal_zone,omitempty"`
	CountrySubentity              string  `protobuf:"bytes,47,opt,name=country_subentity,json=countrySubentity,proto3" json:"country_subentity,omitempty"`
	CountrySubentityCode          string  `protobuf:"bytes,48,opt,name=country_subentity_code,json=countrySubentityCode,proto3" json:"country_subentity_code,omitempty"`
	Region                        string  `protobuf:"bytes,49,opt,name=region,proto3" json:"region,omitempty"`
	District                      string  `protobuf:"bytes,50,opt,name=district,proto3" json:"district,omitempty"`
	TimezoneOffset                string  `protobuf:"bytes,51,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	CountryIdCode                 string  `protobuf:"bytes,52,opt,name=country_id_code,json=countryIdCode,proto3" json:"country_id_code,omitempty"`
	CountryName                   string  `protobuf:"bytes,53,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	LocationCoordLat              float64 `protobuf:"fixed64,54,opt,name=location_coord_lat,json=locationCoordLat,proto3" json:"location_coord_lat,omitempty"`
	LocationCoordLon              float64 `protobuf:"fixed64,55,opt,name=location_coord_lon,json=locationCoordLon,proto3" json:"location_coord_lon,omitempty"`
	Note                          string  `protobuf:"bytes,56,opt,name=note,proto3" json:"note,omitempty"`
	UserId                        string  `protobuf:"bytes,57,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ParentId                      uint32  `protobuf:"varint,58,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	TaxReference1                 string  `protobuf:"bytes,59,opt,name=tax_reference1,json=taxReference1,proto3" json:"tax_reference1,omitempty"`
	TaxReference2                 string  `protobuf:"bytes,60,opt,name=tax_reference2,json=taxReference2,proto3" json:"tax_reference2,omitempty"`
	PublicKey                     string  `protobuf:"bytes,64,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	UserEmail                     string  `protobuf:"bytes,62,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                     string  `protobuf:"bytes,63,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePartyRequest) Reset() {
	*x = CreatePartyRequest{}
	mi := &file_party_v1_party_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartyRequest) ProtoMessage() {}

func (x *CreatePartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartyRequest.ProtoReflect.Descriptor instead.
func (*CreatePartyRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePartyRequest) GetPartyEndpointId() string {
	if x != nil {
		return x.PartyEndpointId
	}
	return ""
}

func (x *CreatePartyRequest) GetPartyEndpointSchemeId() string {
	if x != nil {
		return x.PartyEndpointSchemeId
	}
	return ""
}

func (x *CreatePartyRequest) GetPartyName() string {
	if x != nil {
		return x.PartyName
	}
	return ""
}

func (x *CreatePartyRequest) GetPartyDesc() string {
	if x != nil {
		return x.PartyDesc
	}
	return ""
}

func (x *CreatePartyRequest) GetPartyType() string {
	if x != nil {
		return x.PartyType
	}
	return ""
}

func (x *CreatePartyRequest) GetRegistrationName() string {
	if x != nil {
		return x.RegistrationName
	}
	return ""
}

func (x *CreatePartyRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CreatePartyRequest) GetRegistrationDate() string {
	if x != nil {
		return x.RegistrationDate
	}
	return ""
}

func (x *CreatePartyRequest) GetRegistrationExpirationDate() string {
	if x != nil {
		return x.RegistrationExpirationDate
	}
	return ""
}

func (x *CreatePartyRequest) GetCompanyLegalFormCode() string {
	if x != nil {
		return x.CompanyLegalFormCode
	}
	return ""
}

func (x *CreatePartyRequest) GetCompanyLegalForm() string {
	if x != nil {
		return x.CompanyLegalForm
	}
	return ""
}

func (x *CreatePartyRequest) GetSoleProprietorshipIndicator() bool {
	if x != nil {
		return x.SoleProprietorshipIndicator
	}
	return false
}

func (x *CreatePartyRequest) GetCompanyLiquidationStatusCode() string {
	if x != nil {
		return x.CompanyLiquidationStatusCode
	}
	return ""
}

func (x *CreatePartyRequest) GetCorporateStockAmount() int64 {
	if x != nil {
		return x.CorporateStockAmount
	}
	return 0
}

func (x *CreatePartyRequest) GetFullyPaidSharesIndicator() bool {
	if x != nil {
		return x.FullyPaidSharesIndicator
	}
	return false
}

func (x *CreatePartyRequest) GetCorporateRegistrationId() string {
	if x != nil {
		return x.CorporateRegistrationId
	}
	return ""
}

func (x *CreatePartyRequest) GetCorporateRegistrationName() string {
	if x != nil {
		return x.CorporateRegistrationName
	}
	return ""
}

func (x *CreatePartyRequest) GetCorporateRegistrationTypeCode() string {
	if x != nil {
		return x.CorporateRegistrationTypeCode
	}
	return ""
}

func (x *CreatePartyRequest) GetTaxLevelCode() string {
	if x != nil {
		return x.TaxLevelCode
	}
	return ""
}

func (x *CreatePartyRequest) GetExemptionReasonCode() string {
	if x != nil {
		return x.ExemptionReasonCode
	}
	return ""
}

func (x *CreatePartyRequest) GetExemptionReason() string {
	if x != nil {
		return x.ExemptionReason
	}
	return ""
}

func (x *CreatePartyRequest) GetTsId() string {
	if x != nil {
		return x.TsId
	}
	return ""
}

func (x *CreatePartyRequest) GetTaxSchemeName() string {
	if x != nil {
		return x.TaxSchemeName
	}
	return ""
}

func (x *CreatePartyRequest) GetTaxTypeCode() string {
	if x != nil {
		return x.TaxTypeCode
	}
	return ""
}

func (x *CreatePartyRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CreatePartyRequest) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *CreatePartyRequest) GetAddrListAgencyId() string {
	if x != nil {
		return x.AddrListAgencyId
	}
	return ""
}

func (x *CreatePartyRequest) GetAddrListId() string {
	if x != nil {
		return x.AddrListId
	}
	return ""
}

func (x *CreatePartyRequest) GetAddrListVersionId() string {
	if x != nil {
		return x.AddrListVersionId
	}
	return ""
}

func (x *CreatePartyRequest) GetAddressTypeCode() string {
	if x != nil {
		return x.AddressTypeCode
	}
	return ""
}

func (x *CreatePartyRequest) GetAddressFormatCode() string {
	if x != nil {
		return x.AddressFormatCode
	}
	return ""
}

func (x *CreatePartyRequest) GetPostbox() string {
	if x != nil {
		return x.Postbox
	}
	return ""
}

func (x *CreatePartyRequest) GetFloor1() string {
	if x != nil {
		return x.Floor1
	}
	return ""
}

func (x *CreatePartyRequest) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *CreatePartyRequest) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *CreatePartyRequest) GetAdditionalStreetName() string {
	if x != nil {
		return x.AdditionalStreetName
	}
	return ""
}

func (x *CreatePartyRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *CreatePartyRequest) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *CreatePartyRequest) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *CreatePartyRequest) GetInhouseMail() string {
	if x != nil {
		return x.InhouseMail
	}
	return ""
}

func (x *CreatePartyRequest) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *CreatePartyRequest) GetMarkAttention() string {
	if x != nil {
		return x.MarkAttention
	}
	return ""
}

func (x *CreatePartyRequest) GetMarkCare() string {
	if x != nil {
		return x.MarkCare
	}
	return ""
}

func (x *CreatePartyRequest) GetPlotIdentification() string {
	if x != nil {
		return x.PlotIdentification
	}
	return ""
}

func (x *CreatePartyRequest) GetCitySubdivisionName() string {
	if x != nil {
		return x.CitySubdivisionName
	}
	return ""
}

func (x *CreatePartyRequest) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *CreatePartyRequest) GetPostalZone() string {
	if x != nil {
		return x.PostalZone
	}
	return ""
}

func (x *CreatePartyRequest) GetCountrySubentity() string {
	if x != nil {
		return x.CountrySubentity
	}
	return ""
}

func (x *CreatePartyRequest) GetCountrySubentityCode() string {
	if x != nil {
		return x.CountrySubentityCode
	}
	return ""
}

func (x *CreatePartyRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreatePartyRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *CreatePartyRequest) GetTimezoneOffset() string {
	if x != nil {
		return x.TimezoneOffset
	}
	return ""
}

func (x *CreatePartyRequest) GetCountryIdCode() string {
	if x != nil {
		return x.CountryIdCode
	}
	return ""
}

func (x *CreatePartyRequest) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CreatePartyRequest) GetLocationCoordLat() float64 {
	if x != nil {
		return x.LocationCoordLat
	}
	return 0
}

func (x *CreatePartyRequest) GetLocationCoordLon() float64 {
	if x != nil {
		return x.LocationCoordLon
	}
	return 0
}

func (x *CreatePartyRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePartyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePartyRequest) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CreatePartyRequest) GetTaxReference1() string {
	if x != nil {
		return x.TaxReference1
	}
	return ""
}

func (x *CreatePartyRequest) GetTaxReference2() string {
	if x != nil {
		return x.TaxReference2
	}
	return ""
}

func (x *CreatePartyRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *CreatePartyRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePartyRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party *Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *CreatePartyResponse) Reset() {
	*x = CreatePartyResponse{}
	mi := &file_party_v1_party_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartyResponse) ProtoMessage() {}

func (x *CreatePartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartyResponse.ProtoReflect.Descriptor instead.
func (*CreatePartyResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePartyResponse) GetParty() *Party {
	if x != nil {
		return x.Party
	}
	return nil
}

type CreateChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatePartyRequest *CreatePartyRequest `protobuf:"bytes,1,opt,name=create_party_request,json=createPartyRequest,proto3" json:"create_party_request,omitempty"`
}

func (x *CreateChildRequest) Reset() {
	*x = CreateChildRequest{}
	mi := &file_party_v1_party_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChildRequest) ProtoMessage() {}

func (x *CreateChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChildRequest.ProtoReflect.Descriptor instead.
func (*CreateChildRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{4}
}

func (x *CreateChildRequest) GetCreatePartyRequest() *CreatePartyRequest {
	if x != nil {
		return x.CreatePartyRequest
	}
	return nil
}

type CreateChildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party *Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *CreateChildResponse) Reset() {
	*x = CreateChildResponse{}
	mi := &file_party_v1_party_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChildResponse) ProtoMessage() {}

func (x *CreateChildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChildResponse.ProtoReflect.Descriptor instead.
func (*CreateChildResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{5}
}

func (x *CreateChildResponse) GetParty() *Party {
	if x != nil {
		return x.Party
	}
	return nil
}

type PartyIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyIdentification           string        `protobuf:"bytes,1,opt,name=party_identification,json=partyIdentification,proto3" json:"party_identification,omitempty"`
	PartyIdentificationSchemeId   string        `protobuf:"bytes,2,opt,name=party_identification_scheme_id,json=partyIdentificationSchemeId,proto3" json:"party_identification_scheme_id,omitempty"`
	PartyIdentificationSchemeName string        `protobuf:"bytes,3,opt,name=party_identification_scheme_name,json=partyIdentificationSchemeName,proto3" json:"party_identification_scheme_name,omitempty"`
	PartyInfo                     *v1.PartyInfo `protobuf:"bytes,4,opt,name=party_info,json=partyInfo,proto3" json:"party_info,omitempty"`
}

func (x *PartyIdentification) Reset() {
	*x = PartyIdentification{}
	mi := &file_party_v1_party_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyIdentification) ProtoMessage() {}

func (x *PartyIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyIdentification.ProtoReflect.Descriptor instead.
func (*PartyIdentification) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{6}
}

func (x *PartyIdentification) GetPartyIdentification() string {
	if x != nil {
		return x.PartyIdentification
	}
	return ""
}

func (x *PartyIdentification) GetPartyIdentificationSchemeId() string {
	if x != nil {
		return x.PartyIdentificationSchemeId
	}
	return ""
}

func (x *PartyIdentification) GetPartyIdentificationSchemeName() string {
	if x != nil {
		return x.PartyIdentificationSchemeName
	}
	return ""
}

func (x *PartyIdentification) GetPartyInfo() *v1.PartyInfo {
	if x != nil {
		return x.PartyInfo
	}
	return nil
}

type GetPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetPartyRequest) Reset() {
	*x = GetPartyRequest{}
	mi := &file_party_v1_party_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartyRequest) ProtoMessage() {}

func (x *GetPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartyRequest.ProtoReflect.Descriptor instead.
func (*GetPartyRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{7}
}

func (x *GetPartyRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party *Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *GetPartyResponse) Reset() {
	*x = GetPartyResponse{}
	mi := &file_party_v1_party_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartyResponse) ProtoMessage() {}

func (x *GetPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartyResponse.ProtoReflect.Descriptor instead.
func (*GetPartyResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{8}
}

func (x *GetPartyResponse) GetParty() *Party {
	if x != nil {
		return x.Party
	}
	return nil
}

type GetPartyByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetPartyByPkRequest) Reset() {
	*x = GetPartyByPkRequest{}
	mi := &file_party_v1_party_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartyByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartyByPkRequest) ProtoMessage() {}

func (x *GetPartyByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartyByPkRequest.ProtoReflect.Descriptor instead.
func (*GetPartyByPkRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{9}
}

func (x *GetPartyByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetPartyByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party *Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *GetPartyByPkResponse) Reset() {
	*x = GetPartyByPkResponse{}
	mi := &file_party_v1_party_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartyByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartyByPkResponse) ProtoMessage() {}

func (x *GetPartyByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartyByPkResponse.ProtoReflect.Descriptor instead.
func (*GetPartyByPkResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{10}
}

func (x *GetPartyByPkResponse) GetParty() *Party {
	if x != nil {
		return x.Party
	}
	return nil
}

type GetParentPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetParentPartyRequest) Reset() {
	*x = GetParentPartyRequest{}
	mi := &file_party_v1_party_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetParentPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParentPartyRequest) ProtoMessage() {}

func (x *GetParentPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParentPartyRequest.ProtoReflect.Descriptor instead.
func (*GetParentPartyRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{11}
}

func (x *GetParentPartyRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetParentPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party *Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *GetParentPartyResponse) Reset() {
	*x = GetParentPartyResponse{}
	mi := &file_party_v1_party_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetParentPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParentPartyResponse) ProtoMessage() {}

func (x *GetParentPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParentPartyResponse.ProtoReflect.Descriptor instead.
func (*GetParentPartyResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{12}
}

func (x *GetParentPartyResponse) GetParty() *Party {
	if x != nil {
		return x.Party
	}
	return nil
}

type DeletePartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *DeletePartyRequest) Reset() {
	*x = DeletePartyRequest{}
	mi := &file_party_v1_party_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartyRequest) ProtoMessage() {}

func (x *DeletePartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartyRequest.ProtoReflect.Descriptor instead.
func (*DeletePartyRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{13}
}

func (x *DeletePartyRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type DeletePartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePartyResponse) Reset() {
	*x = DeletePartyResponse{}
	mi := &file_party_v1_party_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartyResponse) ProtoMessage() {}

func (x *DeletePartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartyResponse.ProtoReflect.Descriptor instead.
func (*DeletePartyResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{14}
}

type GetChildPartiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetChildPartiesRequest) Reset() {
	*x = GetChildPartiesRequest{}
	mi := &file_party_v1_party_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChildPartiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChildPartiesRequest) ProtoMessage() {}

func (x *GetChildPartiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChildPartiesRequest.ProtoReflect.Descriptor instead.
func (*GetChildPartiesRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{15}
}

func (x *GetChildPartiesRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetChildPartiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties []*Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *GetChildPartiesResponse) Reset() {
	*x = GetChildPartiesResponse{}
	mi := &file_party_v1_party_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChildPartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChildPartiesResponse) ProtoMessage() {}

func (x *GetChildPartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChildPartiesResponse.ProtoReflect.Descriptor instead.
func (*GetChildPartiesResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{16}
}

func (x *GetChildPartiesResponse) GetParties() []*Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

type GetTopLevelPartiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetTopLevelPartiesRequest) Reset() {
	*x = GetTopLevelPartiesRequest{}
	mi := &file_party_v1_party_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopLevelPartiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopLevelPartiesRequest) ProtoMessage() {}

func (x *GetTopLevelPartiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopLevelPartiesRequest.ProtoReflect.Descriptor instead.
func (*GetTopLevelPartiesRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{17}
}

func (x *GetTopLevelPartiesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetTopLevelPartiesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetTopLevelPartiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties []*Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *GetTopLevelPartiesResponse) Reset() {
	*x = GetTopLevelPartiesResponse{}
	mi := &file_party_v1_party_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopLevelPartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopLevelPartiesResponse) ProtoMessage() {}

func (x *GetTopLevelPartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopLevelPartiesResponse.ProtoReflect.Descriptor instead.
func (*GetTopLevelPartiesResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{18}
}

func (x *GetTopLevelPartiesResponse) GetParties() []*Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

type UpdatePartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PartyName string `protobuf:"bytes,2,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
	PartyDesc string `protobuf:"bytes,3,opt,name=party_desc,json=partyDesc,proto3" json:"party_desc,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdatePartyRequest) Reset() {
	*x = UpdatePartyRequest{}
	mi := &file_party_v1_party_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartyRequest) ProtoMessage() {}

func (x *UpdatePartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePartyRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{19}
}

func (x *UpdatePartyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePartyRequest) GetPartyName() string {
	if x != nil {
		return x.PartyName
	}
	return ""
}

func (x *UpdatePartyRequest) GetPartyDesc() string {
	if x != nil {
		return x.PartyDesc
	}
	return ""
}

func (x *UpdatePartyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdatePartyRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdatePartyRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdatePartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePartyResponse) Reset() {
	*x = UpdatePartyResponse{}
	mi := &file_party_v1_party_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartyResponse) ProtoMessage() {}

func (x *UpdatePartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePartyResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{20}
}

type PartyContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyContactD *PartyContactD `protobuf:"bytes,1,opt,name=party_contact_d,json=partyContactD,proto3" json:"party_contact_d,omitempty"`
	PartyInfo     *v1.PartyInfo  `protobuf:"bytes,2,opt,name=party_info,json=partyInfo,proto3" json:"party_info,omitempty"`
	CrUpdUser     *v1.CrUpdUser  `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime     *v1.CrUpdTime  `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *PartyContact) Reset() {
	*x = PartyContact{}
	mi := &file_party_v1_party_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyContact) ProtoMessage() {}

func (x *PartyContact) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyContact.ProtoReflect.Descriptor instead.
func (*PartyContact) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{21}
}

func (x *PartyContact) GetPartyContactD() *PartyContactD {
	if x != nil {
		return x.PartyContactD
	}
	return nil
}

func (x *PartyContact) GetPartyInfo() *v1.PartyInfo {
	if x != nil {
		return x.PartyInfo
	}
	return nil
}

func (x *PartyContact) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PartyContact) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type PartyContactD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4              []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	FirstName          string `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	MiddleName         string `protobuf:"bytes,5,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	LastName           string `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Title              string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	NameSuffix         string `protobuf:"bytes,8,opt,name=name_suffix,json=nameSuffix,proto3" json:"name_suffix,omitempty"`
	JobTitle           string `protobuf:"bytes,9,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	OrgDept            string `protobuf:"bytes,10,opt,name=org_dept,json=orgDept,proto3" json:"org_dept,omitempty"`
	Email              string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	PhoneMobile        string `protobuf:"bytes,12,opt,name=phone_mobile,json=phoneMobile,proto3" json:"phone_mobile,omitempty"`
	PhoneWork          string `protobuf:"bytes,13,opt,name=phone_work,json=phoneWork,proto3" json:"phone_work,omitempty"`
	PhoneFax           string `protobuf:"bytes,14,opt,name=phone_fax,json=phoneFax,proto3" json:"phone_fax,omitempty"`
	CountryCallingCode string `protobuf:"bytes,15,opt,name=country_calling_code,json=countryCallingCode,proto3" json:"country_calling_code,omitempty"`
	Url                string `protobuf:"bytes,20,opt,name=url,proto3" json:"url,omitempty"`
	GenderCode         string `protobuf:"bytes,16,opt,name=gender_code,json=genderCode,proto3" json:"gender_code,omitempty"`
	Note               string `protobuf:"bytes,17,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *PartyContactD) Reset() {
	*x = PartyContactD{}
	mi := &file_party_v1_party_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyContactD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyContactD) ProtoMessage() {}

func (x *PartyContactD) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyContactD.ProtoReflect.Descriptor instead.
func (*PartyContactD) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{22}
}

func (x *PartyContactD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PartyContactD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PartyContactD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PartyContactD) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PartyContactD) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *PartyContactD) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *PartyContactD) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PartyContactD) GetNameSuffix() string {
	if x != nil {
		return x.NameSuffix
	}
	return ""
}

func (x *PartyContactD) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *PartyContactD) GetOrgDept() string {
	if x != nil {
		return x.OrgDept
	}
	return ""
}

func (x *PartyContactD) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PartyContactD) GetPhoneMobile() string {
	if x != nil {
		return x.PhoneMobile
	}
	return ""
}

func (x *PartyContactD) GetPhoneWork() string {
	if x != nil {
		return x.PhoneWork
	}
	return ""
}

func (x *PartyContactD) GetPhoneFax() string {
	if x != nil {
		return x.PhoneFax
	}
	return ""
}

func (x *PartyContactD) GetCountryCallingCode() string {
	if x != nil {
		return x.CountryCallingCode
	}
	return ""
}

func (x *PartyContactD) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PartyContactD) GetGenderCode() string {
	if x != nil {
		return x.GenderCode
	}
	return ""
}

func (x *PartyContactD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CreatePartyContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName          string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	MiddleName         string `protobuf:"bytes,2,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	LastName           string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Title              string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	NameSuffix         string `protobuf:"bytes,5,opt,name=name_suffix,json=nameSuffix,proto3" json:"name_suffix,omitempty"`
	JobTitle           string `protobuf:"bytes,6,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	OrgDept            string `protobuf:"bytes,7,opt,name=org_dept,json=orgDept,proto3" json:"org_dept,omitempty"`
	Email              string `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	PhoneMobile        string `protobuf:"bytes,9,opt,name=phone_mobile,json=phoneMobile,proto3" json:"phone_mobile,omitempty"`
	PhoneWork          string `protobuf:"bytes,10,opt,name=phone_work,json=phoneWork,proto3" json:"phone_work,omitempty"`
	PhoneFax           string `protobuf:"bytes,11,opt,name=phone_fax,json=phoneFax,proto3" json:"phone_fax,omitempty"`
	CountryCallingCode string `protobuf:"bytes,12,opt,name=country_calling_code,json=countryCallingCode,proto3" json:"country_calling_code,omitempty"`
	Url                string `protobuf:"bytes,19,opt,name=url,proto3" json:"url,omitempty"`
	GenderCode         string `protobuf:"bytes,13,opt,name=gender_code,json=genderCode,proto3" json:"gender_code,omitempty"`
	Note               string `protobuf:"bytes,14,opt,name=note,proto3" json:"note,omitempty"`
	UserId             string `protobuf:"bytes,15,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PartyId            uint32 `protobuf:"varint,16,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	UserEmail          string `protobuf:"bytes,17,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId          string `protobuf:"bytes,18,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePartyContactRequest) Reset() {
	*x = CreatePartyContactRequest{}
	mi := &file_party_v1_party_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartyContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartyContactRequest) ProtoMessage() {}

func (x *CreatePartyContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartyContactRequest.ProtoReflect.Descriptor instead.
func (*CreatePartyContactRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{23}
}

func (x *CreatePartyContactRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CreatePartyContactRequest) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *CreatePartyContactRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CreatePartyContactRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePartyContactRequest) GetNameSuffix() string {
	if x != nil {
		return x.NameSuffix
	}
	return ""
}

func (x *CreatePartyContactRequest) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *CreatePartyContactRequest) GetOrgDept() string {
	if x != nil {
		return x.OrgDept
	}
	return ""
}

func (x *CreatePartyContactRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreatePartyContactRequest) GetPhoneMobile() string {
	if x != nil {
		return x.PhoneMobile
	}
	return ""
}

func (x *CreatePartyContactRequest) GetPhoneWork() string {
	if x != nil {
		return x.PhoneWork
	}
	return ""
}

func (x *CreatePartyContactRequest) GetPhoneFax() string {
	if x != nil {
		return x.PhoneFax
	}
	return ""
}

func (x *CreatePartyContactRequest) GetCountryCallingCode() string {
	if x != nil {
		return x.CountryCallingCode
	}
	return ""
}

func (x *CreatePartyContactRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreatePartyContactRequest) GetGenderCode() string {
	if x != nil {
		return x.GenderCode
	}
	return ""
}

func (x *CreatePartyContactRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePartyContactRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePartyContactRequest) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *CreatePartyContactRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePartyContactRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePartyContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyContact *PartyContact `protobuf:"bytes,1,opt,name=party_contact,json=partyContact,proto3" json:"party_contact,omitempty"`
}

func (x *CreatePartyContactResponse) Reset() {
	*x = CreatePartyContactResponse{}
	mi := &file_party_v1_party_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartyContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartyContactResponse) ProtoMessage() {}

func (x *CreatePartyContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartyContactResponse.ProtoReflect.Descriptor instead.
func (*CreatePartyContactResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{24}
}

func (x *CreatePartyContactResponse) GetPartyContact() *PartyContact {
	if x != nil {
		return x.PartyContact
	}
	return nil
}

type UpdatePartyContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName      string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	MiddleName     string `protobuf:"bytes,2,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	LastName       string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Title          string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	PartyContactId string `protobuf:"bytes,5,opt,name=party_contact_id,json=partyContactId,proto3" json:"party_contact_id,omitempty"`
	PartyId        uint32 `protobuf:"varint,6,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	UserEmail      string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId      string `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdatePartyContactRequest) Reset() {
	*x = UpdatePartyContactRequest{}
	mi := &file_party_v1_party_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePartyContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartyContactRequest) ProtoMessage() {}

func (x *UpdatePartyContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartyContactRequest.ProtoReflect.Descriptor instead.
func (*UpdatePartyContactRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{25}
}

func (x *UpdatePartyContactRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdatePartyContactRequest) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *UpdatePartyContactRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdatePartyContactRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdatePartyContactRequest) GetPartyContactId() string {
	if x != nil {
		return x.PartyContactId
	}
	return ""
}

func (x *UpdatePartyContactRequest) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *UpdatePartyContactRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdatePartyContactRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdatePartyContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePartyContactResponse) Reset() {
	*x = UpdatePartyContactResponse{}
	mi := &file_party_v1_party_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePartyContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartyContactResponse) ProtoMessage() {}

func (x *UpdatePartyContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartyContactResponse.ProtoReflect.Descriptor instead.
func (*UpdatePartyContactResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{26}
}

type GetUsersInPartiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetUsersInPartiesRequest) Reset() {
	*x = GetUsersInPartiesRequest{}
	mi := &file_party_v1_party_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersInPartiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersInPartiesRequest) ProtoMessage() {}

func (x *GetUsersInPartiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersInPartiesRequest.ProtoReflect.Descriptor instead.
func (*GetUsersInPartiesRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{27}
}

func (x *GetUsersInPartiesRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetUsersInPartiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyContacts []*PartyContact `protobuf:"bytes,1,rep,name=party_contacts,json=partyContacts,proto3" json:"party_contacts,omitempty"`
}

func (x *GetUsersInPartiesResponse) Reset() {
	*x = GetUsersInPartiesResponse{}
	mi := &file_party_v1_party_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersInPartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersInPartiesResponse) ProtoMessage() {}

func (x *GetUsersInPartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersInPartiesResponse.ProtoReflect.Descriptor instead.
func (*GetUsersInPartiesResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{28}
}

func (x *GetUsersInPartiesResponse) GetPartyContacts() []*PartyContact {
	if x != nil {
		return x.PartyContacts
	}
	return nil
}

type GetPartyContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetPartyContactRequest) Reset() {
	*x = GetPartyContactRequest{}
	mi := &file_party_v1_party_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartyContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartyContactRequest) ProtoMessage() {}

func (x *GetPartyContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartyContactRequest.ProtoReflect.Descriptor instead.
func (*GetPartyContactRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{29}
}

func (x *GetPartyContactRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetPartyContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyContact *PartyContact `protobuf:"bytes,1,opt,name=party_contact,json=partyContact,proto3" json:"party_contact,omitempty"`
}

func (x *GetPartyContactResponse) Reset() {
	*x = GetPartyContactResponse{}
	mi := &file_party_v1_party_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartyContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartyContactResponse) ProtoMessage() {}

func (x *GetPartyContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartyContactResponse.ProtoReflect.Descriptor instead.
func (*GetPartyContactResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{30}
}

func (x *GetPartyContactResponse) GetPartyContact() *PartyContact {
	if x != nil {
		return x.PartyContact
	}
	return nil
}

type DeletePartyContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *DeletePartyContactRequest) Reset() {
	*x = DeletePartyContactRequest{}
	mi := &file_party_v1_party_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePartyContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartyContactRequest) ProtoMessage() {}

func (x *DeletePartyContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartyContactRequest.ProtoReflect.Descriptor instead.
func (*DeletePartyContactRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{31}
}

func (x *DeletePartyContactRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type DeletePartyContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePartyContactResponse) Reset() {
	*x = DeletePartyContactResponse{}
	mi := &file_party_v1_party_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePartyContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartyContactResponse) ProtoMessage() {}

func (x *DeletePartyContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartyContactResponse.ProtoReflect.Descriptor instead.
func (*DeletePartyContactResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{32}
}

type PartyChd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyChdD *PartyChdD    `protobuf:"bytes,1,opt,name=party_chd_d,json=partyChdD,proto3" json:"party_chd_d,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *PartyChd) Reset() {
	*x = PartyChd{}
	mi := &file_party_v1_party_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyChd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyChd) ProtoMessage() {}

func (x *PartyChd) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyChd.ProtoReflect.Descriptor instead.
func (*PartyChd) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{33}
}

func (x *PartyChd) GetPartyChdD() *PartyChdD {
	if x != nil {
		return x.PartyChdD
	}
	return nil
}

func (x *PartyChd) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PartyChd) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type PartyChdD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4      []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	PartyId    uint32 `protobuf:"varint,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PartyChdId uint32 `protobuf:"varint,4,opt,name=party_chd_id,json=partyChdId,proto3" json:"party_chd_id,omitempty"`
}

func (x *PartyChdD) Reset() {
	*x = PartyChdD{}
	mi := &file_party_v1_party_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyChdD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyChdD) ProtoMessage() {}

func (x *PartyChdD) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyChdD.ProtoReflect.Descriptor instead.
func (*PartyChdD) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{34}
}

func (x *PartyChdD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PartyChdD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PartyChdD) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *PartyChdD) GetPartyChdId() uint32 {
	if x != nil {
		return x.PartyChdId
	}
	return 0
}

type PartyContactRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PartyId        uint32                 `protobuf:"varint,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PartyContactId uint32                 `protobuf:"varint,3,opt,name=party_contact_id,json=partyContactId,proto3" json:"party_contact_id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PartyContactRel) Reset() {
	*x = PartyContactRel{}
	mi := &file_party_v1_party_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyContactRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyContactRel) ProtoMessage() {}

func (x *PartyContactRel) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyContactRel.ProtoReflect.Descriptor instead.
func (*PartyContactRel) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{35}
}

func (x *PartyContactRel) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PartyContactRel) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *PartyContactRel) GetPartyContactId() uint32 {
	if x != nil {
		return x.PartyContactId
	}
	return 0
}

func (x *PartyContactRel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PartyContactRel) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetPartiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties    []*Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	NextCursor string   `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetPartiesResponse) Reset() {
	*x = GetPartiesResponse{}
	mi := &file_party_v1_party_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartiesResponse) ProtoMessage() {}

func (x *GetPartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartiesResponse.ProtoReflect.Descriptor instead.
func (*GetPartiesResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{36}
}

func (x *GetPartiesResponse) GetParties() []*Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *GetPartiesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetPartiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetPartiesRequest) Reset() {
	*x = GetPartiesRequest{}
	mi := &file_party_v1_party_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartiesRequest) ProtoMessage() {}

func (x *GetPartiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartiesRequest.ProtoReflect.Descriptor instead.
func (*GetPartiesRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{37}
}

func (x *GetPartiesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetPartiesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetPartiesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetPartiesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type PartySocialProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartySocialProfileD *PartySocialProfileD `protobuf:"bytes,1,opt,name=party_social_profile_d,json=partySocialProfileD,proto3" json:"party_social_profile_d,omitempty"`
	PartyInfo           *v1.PartyInfo        `protobuf:"bytes,2,opt,name=party_info,json=partyInfo,proto3" json:"party_info,omitempty"`
	CrUpdUser           *v1.CrUpdUser        `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime           *v1.CrUpdTime        `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *PartySocialProfile) Reset() {
	*x = PartySocialProfile{}
	mi := &file_party_v1_party_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartySocialProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartySocialProfile) ProtoMessage() {}

func (x *PartySocialProfile) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartySocialProfile.ProtoReflect.Descriptor instead.
func (*PartySocialProfile) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{38}
}

func (x *PartySocialProfile) GetPartySocialProfileD() *PartySocialProfileD {
	if x != nil {
		return x.PartySocialProfileD
	}
	return nil
}

func (x *PartySocialProfile) GetPartyInfo() *v1.PartyInfo {
	if x != nil {
		return x.PartyInfo
	}
	return nil
}

func (x *PartySocialProfile) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PartySocialProfile) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type PartySocialProfileD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4               []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                 string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	SocialProfleName    string `protobuf:"bytes,4,opt,name=social_profle_name,json=socialProfleName,proto3" json:"social_profle_name,omitempty"`
	SocialMediaTypeCode string `protobuf:"bytes,5,opt,name=social_media_type_code,json=socialMediaTypeCode,proto3" json:"social_media_type_code,omitempty"`
	Uri                 string `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *PartySocialProfileD) Reset() {
	*x = PartySocialProfileD{}
	mi := &file_party_v1_party_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartySocialProfileD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartySocialProfileD) ProtoMessage() {}

func (x *PartySocialProfileD) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartySocialProfileD.ProtoReflect.Descriptor instead.
func (*PartySocialProfileD) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{39}
}

func (x *PartySocialProfileD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PartySocialProfileD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PartySocialProfileD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PartySocialProfileD) GetSocialProfleName() string {
	if x != nil {
		return x.SocialProfleName
	}
	return ""
}

func (x *PartySocialProfileD) GetSocialMediaTypeCode() string {
	if x != nil {
		return x.SocialMediaTypeCode
	}
	return ""
}

func (x *PartySocialProfileD) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type CreatePartySocialProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocialProfleName    string `protobuf:"bytes,1,opt,name=social_profle_name,json=socialProfleName,proto3" json:"social_profle_name,omitempty"`
	SocialMediaTypeCode string `protobuf:"bytes,2,opt,name=social_media_type_code,json=socialMediaTypeCode,proto3" json:"social_media_type_code,omitempty"`
	Uri                 string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	UserId              string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PartyId             uint32 `protobuf:"varint,5,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	UserEmail           string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId           string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePartySocialProfileRequest) Reset() {
	*x = CreatePartySocialProfileRequest{}
	mi := &file_party_v1_party_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartySocialProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartySocialProfileRequest) ProtoMessage() {}

func (x *CreatePartySocialProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartySocialProfileRequest.ProtoReflect.Descriptor instead.
func (*CreatePartySocialProfileRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{40}
}

func (x *CreatePartySocialProfileRequest) GetSocialProfleName() string {
	if x != nil {
		return x.SocialProfleName
	}
	return ""
}

func (x *CreatePartySocialProfileRequest) GetSocialMediaTypeCode() string {
	if x != nil {
		return x.SocialMediaTypeCode
	}
	return ""
}

func (x *CreatePartySocialProfileRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CreatePartySocialProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePartySocialProfileRequest) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *CreatePartySocialProfileRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePartySocialProfileRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePartySocialProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartySocialProfile *PartySocialProfile `protobuf:"bytes,1,opt,name=party_social_profile,json=partySocialProfile,proto3" json:"party_social_profile,omitempty"`
}

func (x *CreatePartySocialProfileResponse) Reset() {
	*x = CreatePartySocialProfileResponse{}
	mi := &file_party_v1_party_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartySocialProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartySocialProfileResponse) ProtoMessage() {}

func (x *CreatePartySocialProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartySocialProfileResponse.ProtoReflect.Descriptor instead.
func (*CreatePartySocialProfileResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{41}
}

func (x *CreatePartySocialProfileResponse) GetPartySocialProfile() *PartySocialProfile {
	if x != nil {
		return x.PartySocialProfile
	}
	return nil
}

type GetPartySocialProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetPartySocialProfileRequest) Reset() {
	*x = GetPartySocialProfileRequest{}
	mi := &file_party_v1_party_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartySocialProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartySocialProfileRequest) ProtoMessage() {}

func (x *GetPartySocialProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartySocialProfileRequest.ProtoReflect.Descriptor instead.
func (*GetPartySocialProfileRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{42}
}

func (x *GetPartySocialProfileRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetPartySocialProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartySocialProfile *PartySocialProfile `protobuf:"bytes,1,opt,name=party_social_profile,json=partySocialProfile,proto3" json:"party_social_profile,omitempty"`
}

func (x *GetPartySocialProfileResponse) Reset() {
	*x = GetPartySocialProfileResponse{}
	mi := &file_party_v1_party_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartySocialProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartySocialProfileResponse) ProtoMessage() {}

func (x *GetPartySocialProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartySocialProfileResponse.ProtoReflect.Descriptor instead.
func (*GetPartySocialProfileResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{43}
}

func (x *GetPartySocialProfileResponse) GetPartySocialProfile() *PartySocialProfile {
	if x != nil {
		return x.PartySocialProfile
	}
	return nil
}

type PartyCorporateJurisdiction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyCorporateJurisdictionD *PartyCorporateJurisdictionD `protobuf:"bytes,1,opt,name=party_corporate_jurisdiction_d,json=partyCorporateJurisdictionD,proto3" json:"party_corporate_jurisdiction_d,omitempty"`
	PartyInfo                   *v1.PartyInfo                `protobuf:"bytes,2,opt,name=party_info,json=partyInfo,proto3" json:"party_info,omitempty"`
	CrUpdUser                   *v1.CrUpdUser                `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                   *v1.CrUpdTime                `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *PartyCorporateJurisdiction) Reset() {
	*x = PartyCorporateJurisdiction{}
	mi := &file_party_v1_party_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyCorporateJurisdiction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyCorporateJurisdiction) ProtoMessage() {}

func (x *PartyCorporateJurisdiction) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyCorporateJurisdiction.ProtoReflect.Descriptor instead.
func (*PartyCorporateJurisdiction) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{44}
}

func (x *PartyCorporateJurisdiction) GetPartyCorporateJurisdictionD() *PartyCorporateJurisdictionD {
	if x != nil {
		return x.PartyCorporateJurisdictionD
	}
	return nil
}

func (x *PartyCorporateJurisdiction) GetPartyInfo() *v1.PartyInfo {
	if x != nil {
		return x.PartyInfo
	}
	return nil
}

func (x *PartyCorporateJurisdiction) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PartyCorporateJurisdiction) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type PartyCorporateJurisdictionD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	AddressId uint32 `protobuf:"varint,4,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *PartyCorporateJurisdictionD) Reset() {
	*x = PartyCorporateJurisdictionD{}
	mi := &file_party_v1_party_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyCorporateJurisdictionD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyCorporateJurisdictionD) ProtoMessage() {}

func (x *PartyCorporateJurisdictionD) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyCorporateJurisdictionD.ProtoReflect.Descriptor instead.
func (*PartyCorporateJurisdictionD) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{45}
}

func (x *PartyCorporateJurisdictionD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PartyCorporateJurisdictionD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PartyCorporateJurisdictionD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PartyCorporateJurisdictionD) GetAddressId() uint32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type CreatePartyCorporateJurisdictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddrListAgencyId     string  `protobuf:"bytes,1,opt,name=addr_list_agency_id,json=addrListAgencyId,proto3" json:"addr_list_agency_id,omitempty"`
	AddrListId           string  `protobuf:"bytes,2,opt,name=addr_list_id,json=addrListId,proto3" json:"addr_list_id,omitempty"`
	AddrListVersionId    string  `protobuf:"bytes,3,opt,name=addr_list_version_id,json=addrListVersionId,proto3" json:"addr_list_version_id,omitempty"`
	AddressTypeCode      string  `protobuf:"bytes,4,opt,name=address_type_code,json=addressTypeCode,proto3" json:"address_type_code,omitempty"`
	AddressFormatCode    string  `protobuf:"bytes,5,opt,name=address_format_code,json=addressFormatCode,proto3" json:"address_format_code,omitempty"`
	Postbox              string  `protobuf:"bytes,6,opt,name=postbox,proto3" json:"postbox,omitempty"`
	Floor                string  `protobuf:"bytes,7,opt,name=floor,proto3" json:"floor,omitempty"`
	Room                 string  `protobuf:"bytes,8,opt,name=room,proto3" json:"room,omitempty"`
	StreetName           string  `protobuf:"bytes,9,opt,name=street_name,json=streetName,proto3" json:"street_name,omitempty"`
	AdditionalStreetName string  `protobuf:"bytes,10,opt,name=additional_street_name,json=additionalStreetName,proto3" json:"additional_street_name,omitempty"`
	BlockName            string  `protobuf:"bytes,11,opt,name=block_name,json=blockName,proto3" json:"block_name,omitempty"`
	BuildingName         string  `protobuf:"bytes,12,opt,name=building_name,json=buildingName,proto3" json:"building_name,omitempty"`
	BuildingNumber       string  `protobuf:"bytes,13,opt,name=building_number,json=buildingNumber,proto3" json:"building_number,omitempty"`
	InhouseMail          string  `protobuf:"bytes,14,opt,name=inhouse_mail,json=inhouseMail,proto3" json:"inhouse_mail,omitempty"`
	Department           string  `protobuf:"bytes,15,opt,name=department,proto3" json:"department,omitempty"`
	MarkAttention        string  `protobuf:"bytes,16,opt,name=mark_attention,json=markAttention,proto3" json:"mark_attention,omitempty"`
	MarkCare             string  `protobuf:"bytes,17,opt,name=mark_care,json=markCare,proto3" json:"mark_care,omitempty"`
	PlotIdentification   string  `protobuf:"bytes,18,opt,name=plot_identification,json=plotIdentification,proto3" json:"plot_identification,omitempty"`
	CitySubdivisionName  string  `protobuf:"bytes,19,opt,name=city_subdivision_name,json=citySubdivisionName,proto3" json:"city_subdivision_name,omitempty"`
	CityName             string  `protobuf:"bytes,20,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	PostalZone           string  `protobuf:"bytes,21,opt,name=postal_zone,json=postalZone,proto3" json:"postal_zone,omitempty"`
	CountrySubentity     string  `protobuf:"bytes,22,opt,name=country_subentity,json=countrySubentity,proto3" json:"country_subentity,omitempty"`
	CountrySubentityCode string  `protobuf:"bytes,23,opt,name=country_subentity_code,json=countrySubentityCode,proto3" json:"country_subentity_code,omitempty"`
	Region               string  `protobuf:"bytes,24,opt,name=region,proto3" json:"region,omitempty"`
	District             string  `protobuf:"bytes,25,opt,name=district,proto3" json:"district,omitempty"`
	TimezoneOffset       string  `protobuf:"bytes,26,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	CountryIdCode        string  `protobuf:"bytes,27,opt,name=country_id_code,json=countryIdCode,proto3" json:"country_id_code,omitempty"`
	CountryName          string  `protobuf:"bytes,28,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	LocationCoordLat     float64 `protobuf:"fixed64,29,opt,name=location_coord_lat,json=locationCoordLat,proto3" json:"location_coord_lat,omitempty"`
	LocationCoordLon     float64 `protobuf:"fixed64,30,opt,name=location_coord_lon,json=locationCoordLon,proto3" json:"location_coord_lon,omitempty"`
	Note                 string  `protobuf:"bytes,31,opt,name=note,proto3" json:"note,omitempty"`
	UserId               string  `protobuf:"bytes,32,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PartyId              uint32  `protobuf:"varint,33,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	UserEmail            string  `protobuf:"bytes,34,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string  `protobuf:"bytes,35,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePartyCorporateJurisdictionRequest) Reset() {
	*x = CreatePartyCorporateJurisdictionRequest{}
	mi := &file_party_v1_party_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartyCorporateJurisdictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartyCorporateJurisdictionRequest) ProtoMessage() {}

func (x *CreatePartyCorporateJurisdictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartyCorporateJurisdictionRequest.ProtoReflect.Descriptor instead.
func (*CreatePartyCorporateJurisdictionRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{46}
}

func (x *CreatePartyCorporateJurisdictionRequest) GetAddrListAgencyId() string {
	if x != nil {
		return x.AddrListAgencyId
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetAddrListId() string {
	if x != nil {
		return x.AddrListId
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetAddrListVersionId() string {
	if x != nil {
		return x.AddrListVersionId
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetAddressTypeCode() string {
	if x != nil {
		return x.AddressTypeCode
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetAddressFormatCode() string {
	if x != nil {
		return x.AddressFormatCode
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetPostbox() string {
	if x != nil {
		return x.Postbox
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetAdditionalStreetName() string {
	if x != nil {
		return x.AdditionalStreetName
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetInhouseMail() string {
	if x != nil {
		return x.InhouseMail
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetMarkAttention() string {
	if x != nil {
		return x.MarkAttention
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetMarkCare() string {
	if x != nil {
		return x.MarkCare
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetPlotIdentification() string {
	if x != nil {
		return x.PlotIdentification
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetCitySubdivisionName() string {
	if x != nil {
		return x.CitySubdivisionName
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetPostalZone() string {
	if x != nil {
		return x.PostalZone
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetCountrySubentity() string {
	if x != nil {
		return x.CountrySubentity
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetCountrySubentityCode() string {
	if x != nil {
		return x.CountrySubentityCode
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetTimezoneOffset() string {
	if x != nil {
		return x.TimezoneOffset
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetCountryIdCode() string {
	if x != nil {
		return x.CountryIdCode
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetLocationCoordLat() float64 {
	if x != nil {
		return x.LocationCoordLat
	}
	return 0
}

func (x *CreatePartyCorporateJurisdictionRequest) GetLocationCoordLon() float64 {
	if x != nil {
		return x.LocationCoordLon
	}
	return 0
}

func (x *CreatePartyCorporateJurisdictionRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *CreatePartyCorporateJurisdictionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePartyCorporateJurisdictionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePartyCorporateJurisdictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyCorporateJurisdiction *PartyCorporateJurisdiction `protobuf:"bytes,1,opt,name=party_corporate_jurisdiction,json=partyCorporateJurisdiction,proto3" json:"party_corporate_jurisdiction,omitempty"`
}

func (x *CreatePartyCorporateJurisdictionResponse) Reset() {
	*x = CreatePartyCorporateJurisdictionResponse{}
	mi := &file_party_v1_party_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePartyCorporateJurisdictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartyCorporateJurisdictionResponse) ProtoMessage() {}

func (x *CreatePartyCorporateJurisdictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartyCorporateJurisdictionResponse.ProtoReflect.Descriptor instead.
func (*CreatePartyCorporateJurisdictionResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{47}
}

func (x *CreatePartyCorporateJurisdictionResponse) GetPartyCorporateJurisdiction() *PartyCorporateJurisdiction {
	if x != nil {
		return x.PartyCorporateJurisdiction
	}
	return nil
}

type GetPartyCorporateJurisdictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetPartyCorporateJurisdictionRequest) Reset() {
	*x = GetPartyCorporateJurisdictionRequest{}
	mi := &file_party_v1_party_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartyCorporateJurisdictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartyCorporateJurisdictionRequest) ProtoMessage() {}

func (x *GetPartyCorporateJurisdictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartyCorporateJurisdictionRequest.ProtoReflect.Descriptor instead.
func (*GetPartyCorporateJurisdictionRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{48}
}

func (x *GetPartyCorporateJurisdictionRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetPartyCorporateJurisdictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyCorporateJurisdiction *PartyCorporateJurisdiction `protobuf:"bytes,1,opt,name=party_corporate_jurisdiction,json=partyCorporateJurisdiction,proto3" json:"party_corporate_jurisdiction,omitempty"`
}

func (x *GetPartyCorporateJurisdictionResponse) Reset() {
	*x = GetPartyCorporateJurisdictionResponse{}
	mi := &file_party_v1_party_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartyCorporateJurisdictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartyCorporateJurisdictionResponse) ProtoMessage() {}

func (x *GetPartyCorporateJurisdictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_party_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartyCorporateJurisdictionResponse.ProtoReflect.Descriptor instead.
func (*GetPartyCorporateJurisdictionResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_party_proto_rawDescGZIP(), []int{49}
}

func (x *GetPartyCorporateJurisdictionResponse) GetPartyCorporateJurisdiction() *PartyCorporateJurisdiction {
	if x != nil {
		return x.PartyCorporateJurisdiction
	}
	return nil
}

var File_party_v1_party_proto protoreflect.FileDescriptor

var file_party_v1_party_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x03, 0x0a, 0x05, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x79, 0x44, 0x12, 0x4d,
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x12, 0x4d, 0x0a,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf2, 0x03, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a,
	0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f,
	0x63, 0x68, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x43, 0x68,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x61, 0x78, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x31, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x32, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x22, 0xca, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x1d, 0x73, 0x6f,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x73, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x6f,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x45,
	0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x50, 0x61, 0x69, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f,
	0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x72,
	0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1d, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31,
	0x12, 0x2d, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x31, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x31,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75,
	0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f,
	0x6c, 0x61, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x6f,
	0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x31, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x31, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x32, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3c,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x22, 0x64, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x22, 0x8b, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x49,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x22, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x3d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x50,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x22, 0x4f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x3f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x22, 0x4c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x59, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x04, 0x0a, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64,
	0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x44, 0x65, 0x70, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x66, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x46, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xc7,
	0x04, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x44, 0x65, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x46, 0x61, 0x78, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22,
	0x53, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x68, 0x64, 0x12,
	0x33, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x64, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x68, 0x64, 0x44, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x68, 0x64, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x6e, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x68, 0x64, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x68, 0x64, 0x49, 0x64,
	0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x60, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a,
	0x12, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x88,
	0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x56, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x1e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x52, 0x1b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x75, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xa6, 0x0a, 0x0a, 0x27, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x61,
	0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61,
	0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75,
	0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a,
	0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x66, 0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
	0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xec, 0x0d, 0x0a, 0x0c, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1b, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x1d,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x68, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
	0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75, 0x62, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_party_v1_party_proto_rawDescOnce sync.Once
	file_party_v1_party_proto_rawDescData = file_party_v1_party_proto_rawDesc
)

func file_party_v1_party_proto_rawDescGZIP() []byte {
	file_party_v1_party_proto_rawDescOnce.Do(func() {
		file_party_v1_party_proto_rawDescData = protoimpl.X.CompressGZIP(file_party_v1_party_proto_rawDescData)
	})
	return file_party_v1_party_proto_rawDescData
}

var file_party_v1_party_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_party_v1_party_proto_goTypes = []any{
	(*Party)(nil),                                    // 0: party.v1.Party
	(*PartyD)(nil),                                   // 1: party.v1.PartyD
	(*CreatePartyRequest)(nil),                       // 2: party.v1.CreatePartyRequest
	(*CreatePartyResponse)(nil),                      // 3: party.v1.CreatePartyResponse
	(*CreateChildRequest)(nil),                       // 4: party.v1.CreateChildRequest
	(*CreateChildResponse)(nil),                      // 5: party.v1.CreateChildResponse
	(*PartyIdentification)(nil),                      // 6: party.v1.PartyIdentification
	(*GetPartyRequest)(nil),                          // 7: party.v1.GetPartyRequest
	(*GetPartyResponse)(nil),                         // 8: party.v1.GetPartyResponse
	(*GetPartyByPkRequest)(nil),                      // 9: party.v1.GetPartyByPkRequest
	(*GetPartyByPkResponse)(nil),                     // 10: party.v1.GetPartyByPkResponse
	(*GetParentPartyRequest)(nil),                    // 11: party.v1.GetParentPartyRequest
	(*GetParentPartyResponse)(nil),                   // 12: party.v1.GetParentPartyResponse
	(*DeletePartyRequest)(nil),                       // 13: party.v1.DeletePartyRequest
	(*DeletePartyResponse)(nil),                      // 14: party.v1.DeletePartyResponse
	(*GetChildPartiesRequest)(nil),                   // 15: party.v1.GetChildPartiesRequest
	(*GetChildPartiesResponse)(nil),                  // 16: party.v1.GetChildPartiesResponse
	(*GetTopLevelPartiesRequest)(nil),                // 17: party.v1.GetTopLevelPartiesRequest
	(*GetTopLevelPartiesResponse)(nil),               // 18: party.v1.GetTopLevelPartiesResponse
	(*UpdatePartyRequest)(nil),                       // 19: party.v1.UpdatePartyRequest
	(*UpdatePartyResponse)(nil),                      // 20: party.v1.UpdatePartyResponse
	(*PartyContact)(nil),                             // 21: party.v1.PartyContact
	(*PartyContactD)(nil),                            // 22: party.v1.PartyContactD
	(*CreatePartyContactRequest)(nil),                // 23: party.v1.CreatePartyContactRequest
	(*CreatePartyContactResponse)(nil),               // 24: party.v1.CreatePartyContactResponse
	(*UpdatePartyContactRequest)(nil),                // 25: party.v1.UpdatePartyContactRequest
	(*UpdatePartyContactResponse)(nil),               // 26: party.v1.UpdatePartyContactResponse
	(*GetUsersInPartiesRequest)(nil),                 // 27: party.v1.GetUsersInPartiesRequest
	(*GetUsersInPartiesResponse)(nil),                // 28: party.v1.GetUsersInPartiesResponse
	(*GetPartyContactRequest)(nil),                   // 29: party.v1.GetPartyContactRequest
	(*GetPartyContactResponse)(nil),                  // 30: party.v1.GetPartyContactResponse
	(*DeletePartyContactRequest)(nil),                // 31: party.v1.DeletePartyContactRequest
	(*DeletePartyContactResponse)(nil),               // 32: party.v1.DeletePartyContactResponse
	(*PartyChd)(nil),                                 // 33: party.v1.PartyChd
	(*PartyChdD)(nil),                                // 34: party.v1.PartyChdD
	(*PartyContactRel)(nil),                          // 35: party.v1.PartyContactRel
	(*GetPartiesResponse)(nil),                       // 36: party.v1.GetPartiesResponse
	(*GetPartiesRequest)(nil),                        // 37: party.v1.GetPartiesRequest
	(*PartySocialProfile)(nil),                       // 38: party.v1.PartySocialProfile
	(*PartySocialProfileD)(nil),                      // 39: party.v1.PartySocialProfileD
	(*CreatePartySocialProfileRequest)(nil),          // 40: party.v1.CreatePartySocialProfileRequest
	(*CreatePartySocialProfileResponse)(nil),         // 41: party.v1.CreatePartySocialProfileResponse
	(*GetPartySocialProfileRequest)(nil),             // 42: party.v1.GetPartySocialProfileRequest
	(*GetPartySocialProfileResponse)(nil),            // 43: party.v1.GetPartySocialProfileResponse
	(*PartyCorporateJurisdiction)(nil),               // 44: party.v1.PartyCorporateJurisdiction
	(*PartyCorporateJurisdictionD)(nil),              // 45: party.v1.PartyCorporateJurisdictionD
	(*CreatePartyCorporateJurisdictionRequest)(nil),  // 46: party.v1.CreatePartyCorporateJurisdictionRequest
	(*CreatePartyCorporateJurisdictionResponse)(nil), // 47: party.v1.CreatePartyCorporateJurisdictionResponse
	(*GetPartyCorporateJurisdictionRequest)(nil),     // 48: party.v1.GetPartyCorporateJurisdictionRequest
	(*GetPartyCorporateJurisdictionResponse)(nil),    // 49: party.v1.GetPartyCorporateJurisdictionResponse
	(*v1.PartyLegalEntityD)(nil),                     // 50: common.v1.PartyLegalEntityD
	(*v1.PartyLegalEntityT)(nil),                     // 51: common.v1.PartyLegalEntityT
	(*v1.CrUpdUser)(nil),                             // 52: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                             // 53: common.v1.CrUpdTime
	(*v1.PartyInfo)(nil),                             // 54: common.v1.PartyInfo
	(*v1.GetRequest)(nil),                            // 55: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                        // 56: common.v1.GetByIdRequest
	(*timestamppb.Timestamp)(nil),                    // 57: google.protobuf.Timestamp
}
var file_party_v1_party_proto_depIdxs = []int32{
	1,  // 0: party.v1.Party.party_d:type_name -> party.v1.PartyD
	50, // 1: party.v1.Party.party_legal_entity_d:type_name -> common.v1.PartyLegalEntityD
	51, // 2: party.v1.Party.party_legal_entity_t:type_name -> common.v1.PartyLegalEntityT
	52, // 3: party.v1.Party.cr_upd_user:type_name -> common.v1.CrUpdUser
	53, // 4: party.v1.Party.cr_upd_time:type_name -> common.v1.CrUpdTime
	6,  // 5: party.v1.Party.party_identifications:type_name -> party.v1.PartyIdentification
	0,  // 6: party.v1.CreatePartyResponse.party:type_name -> party.v1.Party
	2,  // 7: party.v1.CreateChildRequest.create_party_request:type_name -> party.v1.CreatePartyRequest
	0,  // 8: party.v1.CreateChildResponse.party:type_name -> party.v1.Party
	54, // 9: party.v1.PartyIdentification.party_info:type_name -> common.v1.PartyInfo
	55, // 10: party.v1.GetPartyRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 11: party.v1.GetPartyResponse.party:type_name -> party.v1.Party
	56, // 12: party.v1.GetPartyByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	0,  // 13: party.v1.GetPartyByPkResponse.party:type_name -> party.v1.Party
	55, // 14: party.v1.GetParentPartyRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 15: party.v1.GetParentPartyResponse.party:type_name -> party.v1.Party
	55, // 16: party.v1.DeletePartyRequest.get_request:type_name -> common.v1.GetRequest
	55, // 17: party.v1.GetChildPartiesRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 18: party.v1.GetChildPartiesResponse.parties:type_name -> party.v1.Party
	0,  // 19: party.v1.GetTopLevelPartiesResponse.parties:type_name -> party.v1.Party
	22, // 20: party.v1.PartyContact.party_contact_d:type_name -> party.v1.PartyContactD
	54, // 21: party.v1.PartyContact.party_info:type_name -> common.v1.PartyInfo
	52, // 22: party.v1.PartyContact.cr_upd_user:type_name -> common.v1.CrUpdUser
	53, // 23: party.v1.PartyContact.cr_upd_time:type_name -> common.v1.CrUpdTime
	21, // 24: party.v1.CreatePartyContactResponse.party_contact:type_name -> party.v1.PartyContact
	55, // 25: party.v1.GetUsersInPartiesRequest.get_request:type_name -> common.v1.GetRequest
	21, // 26: party.v1.GetUsersInPartiesResponse.party_contacts:type_name -> party.v1.PartyContact
	55, // 27: party.v1.GetPartyContactRequest.get_request:type_name -> common.v1.GetRequest
	21, // 28: party.v1.GetPartyContactResponse.party_contact:type_name -> party.v1.PartyContact
	55, // 29: party.v1.DeletePartyContactRequest.get_request:type_name -> common.v1.GetRequest
	34, // 30: party.v1.PartyChd.party_chd_d:type_name -> party.v1.PartyChdD
	52, // 31: party.v1.PartyChd.cr_upd_user:type_name -> common.v1.CrUpdUser
	53, // 32: party.v1.PartyChd.cr_upd_time:type_name -> common.v1.CrUpdTime
	57, // 33: party.v1.PartyContactRel.created_at:type_name -> google.protobuf.Timestamp
	57, // 34: party.v1.PartyContactRel.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 35: party.v1.GetPartiesResponse.parties:type_name -> party.v1.Party
	39, // 36: party.v1.PartySocialProfile.party_social_profile_d:type_name -> party.v1.PartySocialProfileD
	54, // 37: party.v1.PartySocialProfile.party_info:type_name -> common.v1.PartyInfo
	52, // 38: party.v1.PartySocialProfile.cr_upd_user:type_name -> common.v1.CrUpdUser
	53, // 39: party.v1.PartySocialProfile.cr_upd_time:type_name -> common.v1.CrUpdTime
	38, // 40: party.v1.CreatePartySocialProfileResponse.party_social_profile:type_name -> party.v1.PartySocialProfile
	55, // 41: party.v1.GetPartySocialProfileRequest.get_request:type_name -> common.v1.GetRequest
	38, // 42: party.v1.GetPartySocialProfileResponse.party_social_profile:type_name -> party.v1.PartySocialProfile
	45, // 43: party.v1.PartyCorporateJurisdiction.party_corporate_jurisdiction_d:type_name -> party.v1.PartyCorporateJurisdictionD
	54, // 44: party.v1.PartyCorporateJurisdiction.party_info:type_name -> common.v1.PartyInfo
	52, // 45: party.v1.PartyCorporateJurisdiction.cr_upd_user:type_name -> common.v1.CrUpdUser
	53, // 46: party.v1.PartyCorporateJurisdiction.cr_upd_time:type_name -> common.v1.CrUpdTime
	44, // 47: party.v1.CreatePartyCorporateJurisdictionResponse.party_corporate_jurisdiction:type_name -> party.v1.PartyCorporateJurisdiction
	55, // 48: party.v1.GetPartyCorporateJurisdictionRequest.get_request:type_name -> common.v1.GetRequest
	44, // 49: party.v1.GetPartyCorporateJurisdictionResponse.party_corporate_jurisdiction:type_name -> party.v1.PartyCorporateJurisdiction
	2,  // 50: party.v1.PartyService.CreateParty:input_type -> party.v1.CreatePartyRequest
	4,  // 51: party.v1.PartyService.CreateChild:input_type -> party.v1.CreateChildRequest
	37, // 52: party.v1.PartyService.GetParties:input_type -> party.v1.GetPartiesRequest
	7,  // 53: party.v1.PartyService.GetParty:input_type -> party.v1.GetPartyRequest
	9,  // 54: party.v1.PartyService.GetPartyByPk:input_type -> party.v1.GetPartyByPkRequest
	17, // 55: party.v1.PartyService.GetTopLevelParties:input_type -> party.v1.GetTopLevelPartiesRequest
	15, // 56: party.v1.PartyService.GetChildParties:input_type -> party.v1.GetChildPartiesRequest
	11, // 57: party.v1.PartyService.GetParentParty:input_type -> party.v1.GetParentPartyRequest
	19, // 58: party.v1.PartyService.UpdateParty:input_type -> party.v1.UpdatePartyRequest
	13, // 59: party.v1.PartyService.DeleteParty:input_type -> party.v1.DeletePartyRequest
	23, // 60: party.v1.PartyService.CreatePartyContact:input_type -> party.v1.CreatePartyContactRequest
	27, // 61: party.v1.PartyService.GetUsersInParties:input_type -> party.v1.GetUsersInPartiesRequest
	29, // 62: party.v1.PartyService.GetPartyContact:input_type -> party.v1.GetPartyContactRequest
	25, // 63: party.v1.PartyService.UpdatePartyContact:input_type -> party.v1.UpdatePartyContactRequest
	31, // 64: party.v1.PartyService.DeletePartyContact:input_type -> party.v1.DeletePartyContactRequest
	40, // 65: party.v1.PartyService.CreatePartySocialProfile:input_type -> party.v1.CreatePartySocialProfileRequest
	42, // 66: party.v1.PartyService.GetPartySocialProfile:input_type -> party.v1.GetPartySocialProfileRequest
	46, // 67: party.v1.PartyService.CreatePartyCorporateJurisdiction:input_type -> party.v1.CreatePartyCorporateJurisdictionRequest
	48, // 68: party.v1.PartyService.GetPartyCorporateJurisdiction:input_type -> party.v1.GetPartyCorporateJurisdictionRequest
	3,  // 69: party.v1.PartyService.CreateParty:output_type -> party.v1.CreatePartyResponse
	5,  // 70: party.v1.PartyService.CreateChild:output_type -> party.v1.CreateChildResponse
	36, // 71: party.v1.PartyService.GetParties:output_type -> party.v1.GetPartiesResponse
	8,  // 72: party.v1.PartyService.GetParty:output_type -> party.v1.GetPartyResponse
	10, // 73: party.v1.PartyService.GetPartyByPk:output_type -> party.v1.GetPartyByPkResponse
	18, // 74: party.v1.PartyService.GetTopLevelParties:output_type -> party.v1.GetTopLevelPartiesResponse
	16, // 75: party.v1.PartyService.GetChildParties:output_type -> party.v1.GetChildPartiesResponse
	12, // 76: party.v1.PartyService.GetParentParty:output_type -> party.v1.GetParentPartyResponse
	20, // 77: party.v1.PartyService.UpdateParty:output_type -> party.v1.UpdatePartyResponse
	14, // 78: party.v1.PartyService.DeleteParty:output_type -> party.v1.DeletePartyResponse
	24, // 79: party.v1.PartyService.CreatePartyContact:output_type -> party.v1.CreatePartyContactResponse
	28, // 80: party.v1.PartyService.GetUsersInParties:output_type -> party.v1.GetUsersInPartiesResponse
	30, // 81: party.v1.PartyService.GetPartyContact:output_type -> party.v1.GetPartyContactResponse
	26, // 82: party.v1.PartyService.UpdatePartyContact:output_type -> party.v1.UpdatePartyContactResponse
	32, // 83: party.v1.PartyService.DeletePartyContact:output_type -> party.v1.DeletePartyContactResponse
	41, // 84: party.v1.PartyService.CreatePartySocialProfile:output_type -> party.v1.CreatePartySocialProfileResponse
	43, // 85: party.v1.PartyService.GetPartySocialProfile:output_type -> party.v1.GetPartySocialProfileResponse
	47, // 86: party.v1.PartyService.CreatePartyCorporateJurisdiction:output_type -> party.v1.CreatePartyCorporateJurisdictionResponse
	49, // 87: party.v1.PartyService.GetPartyCorporateJurisdiction:output_type -> party.v1.GetPartyCorporateJurisdictionResponse
	69, // [69:88] is the sub-list for method output_type
	50, // [50:69] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_party_v1_party_proto_init() }
func file_party_v1_party_proto_init() {
	if File_party_v1_party_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_party_v1_party_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_party_v1_party_proto_goTypes,
		DependencyIndexes: file_party_v1_party_proto_depIdxs,
		MessageInfos:      file_party_v1_party_proto_msgTypes,
	}.Build()
	File_party_v1_party_proto = out.File
	file_party_v1_party_proto_rawDesc = nil
	file_party_v1_party_proto_goTypes = nil
	file_party_v1_party_proto_depIdxs = nil
}
