// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: party/v1/party.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Party with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Party) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Party with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PartyMultiError, or nil if none found.
func (m *Party) ValidateAll() error {
	return m.validate(true)
}

func (m *Party) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "PartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "PartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyValidationError{
				field:  "PartyD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPartyLegalEntityD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "PartyLegalEntityD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "PartyLegalEntityD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyLegalEntityD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyValidationError{
				field:  "PartyLegalEntityD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPartyLegalEntityT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "PartyLegalEntityT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "PartyLegalEntityT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyLegalEntityT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyValidationError{
				field:  "PartyLegalEntityT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPartyIdentifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PartyValidationError{
						field:  fmt.Sprintf("PartyIdentifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PartyValidationError{
						field:  fmt.Sprintf("PartyIdentifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PartyValidationError{
					field:  fmt.Sprintf("PartyIdentifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PartyMultiError(errors)
	}

	return nil
}

// PartyMultiError is an error wrapping multiple validation errors returned by
// Party.ValidateAll() if the designated constraints aren't met.
type PartyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyMultiError) AllErrors() []error { return m }

// PartyValidationError is the validation error returned by Party.Validate if
// the designated constraints aren't met.
type PartyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyValidationError) ErrorName() string { return "PartyValidationError" }

// Error satisfies the builtin error interface
func (e PartyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyValidationError{}

// Validate checks the field values on PartyD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartyD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PartyDMultiError, or nil if none found.
func (m *PartyD) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PartyEndpointId

	// no validation rules for PartyEndpointSchemeId

	// no validation rules for PartyName

	// no validation rules for PartyDesc

	// no validation rules for PartyType

	// no validation rules for LevelP

	// no validation rules for ParentId

	// no validation rules for NumChd

	// no validation rules for Leaf

	// no validation rules for TaxReference1

	// no validation rules for TaxReference2

	// no validation rules for PublicKey

	// no validation rules for AddressId

	if len(errors) > 0 {
		return PartyDMultiError(errors)
	}

	return nil
}

// PartyDMultiError is an error wrapping multiple validation errors returned by
// PartyD.ValidateAll() if the designated constraints aren't met.
type PartyDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyDMultiError) AllErrors() []error { return m }

// PartyDValidationError is the validation error returned by PartyD.Validate if
// the designated constraints aren't met.
type PartyDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyDValidationError) ErrorName() string { return "PartyDValidationError" }

// Error satisfies the builtin error interface
func (e PartyDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyDValidationError{}

// Validate checks the field values on CreatePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartyRequestMultiError, or nil if none found.
func (m *CreatePartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartyEndpointId

	// no validation rules for PartyEndpointSchemeId

	// no validation rules for PartyName

	// no validation rules for PartyDesc

	// no validation rules for PartyType

	// no validation rules for RegistrationName

	// no validation rules for CompanyId

	// no validation rules for RegistrationDate

	// no validation rules for RegistrationExpirationDate

	// no validation rules for CompanyLegalFormCode

	// no validation rules for CompanyLegalForm

	// no validation rules for SoleProprietorshipIndicator

	// no validation rules for CompanyLiquidationStatusCode

	// no validation rules for CorporateStockAmount

	// no validation rules for FullyPaidSharesIndicator

	// no validation rules for CorporateRegistrationId

	// no validation rules for CorporateRegistrationName

	// no validation rules for CorporateRegistrationTypeCode

	// no validation rules for TaxLevelCode

	// no validation rules for ExemptionReasonCode

	// no validation rules for ExemptionReason

	// no validation rules for TsId

	// no validation rules for TaxSchemeName

	// no validation rules for TaxTypeCode

	// no validation rules for CurrencyCode

	// no validation rules for Name1

	// no validation rules for AddrListAgencyId

	// no validation rules for AddrListId

	// no validation rules for AddrListVersionId

	// no validation rules for AddressTypeCode

	// no validation rules for AddressFormatCode

	// no validation rules for Postbox

	// no validation rules for Floor1

	// no validation rules for Room

	// no validation rules for StreetName

	// no validation rules for AdditionalStreetName

	// no validation rules for BlockName

	// no validation rules for BuildingName

	// no validation rules for BuildingNumber

	// no validation rules for InhouseMail

	// no validation rules for Department

	// no validation rules for MarkAttention

	// no validation rules for MarkCare

	// no validation rules for PlotIdentification

	// no validation rules for CitySubdivisionName

	// no validation rules for CityName

	// no validation rules for PostalZone

	// no validation rules for CountrySubentity

	// no validation rules for CountrySubentityCode

	// no validation rules for Region

	// no validation rules for District

	// no validation rules for TimezoneOffset

	// no validation rules for CountryIdCode

	// no validation rules for CountryName

	// no validation rules for LocationCoordLat

	// no validation rules for LocationCoordLon

	// no validation rules for Note

	// no validation rules for UserId

	// no validation rules for ParentId

	// no validation rules for TaxReference1

	// no validation rules for TaxReference2

	// no validation rules for PublicKey

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePartyRequestMultiError(errors)
	}

	return nil
}

// CreatePartyRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePartyRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyRequestMultiError) AllErrors() []error { return m }

// CreatePartyRequestValidationError is the validation error returned by
// CreatePartyRequest.Validate if the designated constraints aren't met.
type CreatePartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyRequestValidationError) ErrorName() string {
	return "CreatePartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyRequestValidationError{}

// Validate checks the field values on CreatePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartyResponseMultiError, or nil if none found.
func (m *CreatePartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePartyResponseValidationError{
				field:  "Party",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePartyResponseMultiError(errors)
	}

	return nil
}

// CreatePartyResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePartyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyResponseMultiError) AllErrors() []error { return m }

// CreatePartyResponseValidationError is the validation error returned by
// CreatePartyResponse.Validate if the designated constraints aren't met.
type CreatePartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyResponseValidationError) ErrorName() string {
	return "CreatePartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyResponseValidationError{}

// Validate checks the field values on CreateChildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChildRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChildRequestMultiError, or nil if none found.
func (m *CreateChildRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChildRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatePartyRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateChildRequestValidationError{
					field:  "CreatePartyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateChildRequestValidationError{
					field:  "CreatePartyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatePartyRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChildRequestValidationError{
				field:  "CreatePartyRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateChildRequestMultiError(errors)
	}

	return nil
}

// CreateChildRequestMultiError is an error wrapping multiple validation errors
// returned by CreateChildRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateChildRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChildRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChildRequestMultiError) AllErrors() []error { return m }

// CreateChildRequestValidationError is the validation error returned by
// CreateChildRequest.Validate if the designated constraints aren't met.
type CreateChildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChildRequestValidationError) ErrorName() string {
	return "CreateChildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChildRequestValidationError{}

// Validate checks the field values on CreateChildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChildResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChildResponseMultiError, or nil if none found.
func (m *CreateChildResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChildResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateChildResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateChildResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChildResponseValidationError{
				field:  "Party",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateChildResponseMultiError(errors)
	}

	return nil
}

// CreateChildResponseMultiError is an error wrapping multiple validation
// errors returned by CreateChildResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateChildResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChildResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChildResponseMultiError) AllErrors() []error { return m }

// CreateChildResponseValidationError is the validation error returned by
// CreateChildResponse.Validate if the designated constraints aren't met.
type CreateChildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChildResponseValidationError) ErrorName() string {
	return "CreateChildResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChildResponseValidationError{}

// Validate checks the field values on PartyIdentification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartyIdentification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyIdentification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartyIdentificationMultiError, or nil if none found.
func (m *PartyIdentification) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyIdentification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartyIdentification

	// no validation rules for PartyIdentificationSchemeId

	// no validation rules for PartyIdentificationSchemeName

	if all {
		switch v := interface{}(m.GetPartyInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyIdentificationValidationError{
					field:  "PartyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyIdentificationValidationError{
					field:  "PartyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyIdentificationValidationError{
				field:  "PartyInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartyIdentificationMultiError(errors)
	}

	return nil
}

// PartyIdentificationMultiError is an error wrapping multiple validation
// errors returned by PartyIdentification.ValidateAll() if the designated
// constraints aren't met.
type PartyIdentificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyIdentificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyIdentificationMultiError) AllErrors() []error { return m }

// PartyIdentificationValidationError is the validation error returned by
// PartyIdentification.Validate if the designated constraints aren't met.
type PartyIdentificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyIdentificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyIdentificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyIdentificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyIdentificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyIdentificationValidationError) ErrorName() string {
	return "PartyIdentificationValidationError"
}

// Error satisfies the builtin error interface
func (e PartyIdentificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyIdentification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyIdentificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyIdentificationValidationError{}

// Validate checks the field values on GetPartyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyRequestMultiError, or nil if none found.
func (m *GetPartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyRequestMultiError(errors)
	}

	return nil
}

// GetPartyRequestMultiError is an error wrapping multiple validation errors
// returned by GetPartyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyRequestMultiError) AllErrors() []error { return m }

// GetPartyRequestValidationError is the validation error returned by
// GetPartyRequest.Validate if the designated constraints aren't met.
type GetPartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyRequestValidationError) ErrorName() string { return "GetPartyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyRequestValidationError{}

// Validate checks the field values on GetPartyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyResponseMultiError, or nil if none found.
func (m *GetPartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyResponseValidationError{
				field:  "Party",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyResponseMultiError(errors)
	}

	return nil
}

// GetPartyResponseMultiError is an error wrapping multiple validation errors
// returned by GetPartyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyResponseMultiError) AllErrors() []error { return m }

// GetPartyResponseValidationError is the validation error returned by
// GetPartyResponse.Validate if the designated constraints aren't met.
type GetPartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyResponseValidationError) ErrorName() string { return "GetPartyResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyResponseValidationError{}

// Validate checks the field values on GetPartyByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartyByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyByPkRequestMultiError, or nil if none found.
func (m *GetPartyByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyByPkRequestMultiError(errors)
	}

	return nil
}

// GetPartyByPkRequestMultiError is an error wrapping multiple validation
// errors returned by GetPartyByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPartyByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyByPkRequestMultiError) AllErrors() []error { return m }

// GetPartyByPkRequestValidationError is the validation error returned by
// GetPartyByPkRequest.Validate if the designated constraints aren't met.
type GetPartyByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyByPkRequestValidationError) ErrorName() string {
	return "GetPartyByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyByPkRequestValidationError{}

// Validate checks the field values on GetPartyByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartyByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyByPkResponseMultiError, or nil if none found.
func (m *GetPartyByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyByPkResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyByPkResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyByPkResponseValidationError{
				field:  "Party",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyByPkResponseMultiError(errors)
	}

	return nil
}

// GetPartyByPkResponseMultiError is an error wrapping multiple validation
// errors returned by GetPartyByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPartyByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyByPkResponseMultiError) AllErrors() []error { return m }

// GetPartyByPkResponseValidationError is the validation error returned by
// GetPartyByPkResponse.Validate if the designated constraints aren't met.
type GetPartyByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyByPkResponseValidationError) ErrorName() string {
	return "GetPartyByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyByPkResponseValidationError{}

// Validate checks the field values on GetParentPartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParentPartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParentPartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParentPartyRequestMultiError, or nil if none found.
func (m *GetParentPartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParentPartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetParentPartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetParentPartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetParentPartyRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetParentPartyRequestMultiError(errors)
	}

	return nil
}

// GetParentPartyRequestMultiError is an error wrapping multiple validation
// errors returned by GetParentPartyRequest.ValidateAll() if the designated
// constraints aren't met.
type GetParentPartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParentPartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParentPartyRequestMultiError) AllErrors() []error { return m }

// GetParentPartyRequestValidationError is the validation error returned by
// GetParentPartyRequest.Validate if the designated constraints aren't met.
type GetParentPartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParentPartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParentPartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParentPartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParentPartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParentPartyRequestValidationError) ErrorName() string {
	return "GetParentPartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetParentPartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParentPartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParentPartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParentPartyRequestValidationError{}

// Validate checks the field values on GetParentPartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParentPartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParentPartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParentPartyResponseMultiError, or nil if none found.
func (m *GetParentPartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParentPartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetParentPartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetParentPartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetParentPartyResponseValidationError{
				field:  "Party",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetParentPartyResponseMultiError(errors)
	}

	return nil
}

// GetParentPartyResponseMultiError is an error wrapping multiple validation
// errors returned by GetParentPartyResponse.ValidateAll() if the designated
// constraints aren't met.
type GetParentPartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParentPartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParentPartyResponseMultiError) AllErrors() []error { return m }

// GetParentPartyResponseValidationError is the validation error returned by
// GetParentPartyResponse.Validate if the designated constraints aren't met.
type GetParentPartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParentPartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParentPartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParentPartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParentPartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParentPartyResponseValidationError) ErrorName() string {
	return "GetParentPartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetParentPartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParentPartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParentPartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParentPartyResponseValidationError{}

// Validate checks the field values on DeletePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePartyRequestMultiError, or nil if none found.
func (m *DeletePartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePartyRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeletePartyRequestMultiError(errors)
	}

	return nil
}

// DeletePartyRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePartyRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePartyRequestMultiError) AllErrors() []error { return m }

// DeletePartyRequestValidationError is the validation error returned by
// DeletePartyRequest.Validate if the designated constraints aren't met.
type DeletePartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePartyRequestValidationError) ErrorName() string {
	return "DeletePartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePartyRequestValidationError{}

// Validate checks the field values on DeletePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePartyResponseMultiError, or nil if none found.
func (m *DeletePartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePartyResponseMultiError(errors)
	}

	return nil
}

// DeletePartyResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePartyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePartyResponseMultiError) AllErrors() []error { return m }

// DeletePartyResponseValidationError is the validation error returned by
// DeletePartyResponse.Validate if the designated constraints aren't met.
type DeletePartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePartyResponseValidationError) ErrorName() string {
	return "DeletePartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePartyResponseValidationError{}

// Validate checks the field values on GetChildPartiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChildPartiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChildPartiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChildPartiesRequestMultiError, or nil if none found.
func (m *GetChildPartiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChildPartiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChildPartiesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChildPartiesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChildPartiesRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetChildPartiesRequestMultiError(errors)
	}

	return nil
}

// GetChildPartiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetChildPartiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetChildPartiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChildPartiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChildPartiesRequestMultiError) AllErrors() []error { return m }

// GetChildPartiesRequestValidationError is the validation error returned by
// GetChildPartiesRequest.Validate if the designated constraints aren't met.
type GetChildPartiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChildPartiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChildPartiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChildPartiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChildPartiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChildPartiesRequestValidationError) ErrorName() string {
	return "GetChildPartiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChildPartiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChildPartiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChildPartiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChildPartiesRequestValidationError{}

// Validate checks the field values on GetChildPartiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChildPartiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChildPartiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChildPartiesResponseMultiError, or nil if none found.
func (m *GetChildPartiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChildPartiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChildPartiesResponseValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChildPartiesResponseValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChildPartiesResponseValidationError{
					field:  fmt.Sprintf("Parties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChildPartiesResponseMultiError(errors)
	}

	return nil
}

// GetChildPartiesResponseMultiError is an error wrapping multiple validation
// errors returned by GetChildPartiesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetChildPartiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChildPartiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChildPartiesResponseMultiError) AllErrors() []error { return m }

// GetChildPartiesResponseValidationError is the validation error returned by
// GetChildPartiesResponse.Validate if the designated constraints aren't met.
type GetChildPartiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChildPartiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChildPartiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChildPartiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChildPartiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChildPartiesResponseValidationError) ErrorName() string {
	return "GetChildPartiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChildPartiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChildPartiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChildPartiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChildPartiesResponseValidationError{}

// Validate checks the field values on GetTopLevelPartiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTopLevelPartiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopLevelPartiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopLevelPartiesRequestMultiError, or nil if none found.
func (m *GetTopLevelPartiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopLevelPartiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetTopLevelPartiesRequestMultiError(errors)
	}

	return nil
}

// GetTopLevelPartiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetTopLevelPartiesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTopLevelPartiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopLevelPartiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopLevelPartiesRequestMultiError) AllErrors() []error { return m }

// GetTopLevelPartiesRequestValidationError is the validation error returned by
// GetTopLevelPartiesRequest.Validate if the designated constraints aren't met.
type GetTopLevelPartiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopLevelPartiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopLevelPartiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopLevelPartiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopLevelPartiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopLevelPartiesRequestValidationError) ErrorName() string {
	return "GetTopLevelPartiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopLevelPartiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopLevelPartiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopLevelPartiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopLevelPartiesRequestValidationError{}

// Validate checks the field values on GetTopLevelPartiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTopLevelPartiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopLevelPartiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopLevelPartiesResponseMultiError, or nil if none found.
func (m *GetTopLevelPartiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopLevelPartiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopLevelPartiesResponseValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopLevelPartiesResponseValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopLevelPartiesResponseValidationError{
					field:  fmt.Sprintf("Parties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTopLevelPartiesResponseMultiError(errors)
	}

	return nil
}

// GetTopLevelPartiesResponseMultiError is an error wrapping multiple
// validation errors returned by GetTopLevelPartiesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTopLevelPartiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopLevelPartiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopLevelPartiesResponseMultiError) AllErrors() []error { return m }

// GetTopLevelPartiesResponseValidationError is the validation error returned
// by GetTopLevelPartiesResponse.Validate if the designated constraints aren't met.
type GetTopLevelPartiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopLevelPartiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopLevelPartiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopLevelPartiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopLevelPartiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopLevelPartiesResponseValidationError) ErrorName() string {
	return "GetTopLevelPartiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopLevelPartiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopLevelPartiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopLevelPartiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopLevelPartiesResponseValidationError{}

// Validate checks the field values on UpdatePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePartyRequestMultiError, or nil if none found.
func (m *UpdatePartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PartyName

	// no validation rules for PartyDesc

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdatePartyRequestMultiError(errors)
	}

	return nil
}

// UpdatePartyRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePartyRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartyRequestMultiError) AllErrors() []error { return m }

// UpdatePartyRequestValidationError is the validation error returned by
// UpdatePartyRequest.Validate if the designated constraints aren't met.
type UpdatePartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartyRequestValidationError) ErrorName() string {
	return "UpdatePartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartyRequestValidationError{}

// Validate checks the field values on UpdatePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePartyResponseMultiError, or nil if none found.
func (m *UpdatePartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePartyResponseMultiError(errors)
	}

	return nil
}

// UpdatePartyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePartyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartyResponseMultiError) AllErrors() []error { return m }

// UpdatePartyResponseValidationError is the validation error returned by
// UpdatePartyResponse.Validate if the designated constraints aren't met.
type UpdatePartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartyResponseValidationError) ErrorName() string {
	return "UpdatePartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartyResponseValidationError{}

// Validate checks the field values on PartyContact with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartyContact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyContact with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartyContactMultiError, or
// nil if none found.
func (m *PartyContact) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyContact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyContactD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyContactValidationError{
					field:  "PartyContactD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyContactValidationError{
					field:  "PartyContactD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyContactD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyContactValidationError{
				field:  "PartyContactD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPartyInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyContactValidationError{
					field:  "PartyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyContactValidationError{
					field:  "PartyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyContactValidationError{
				field:  "PartyInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyContactValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyContactValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyContactValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyContactValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyContactValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyContactValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartyContactMultiError(errors)
	}

	return nil
}

// PartyContactMultiError is an error wrapping multiple validation errors
// returned by PartyContact.ValidateAll() if the designated constraints aren't met.
type PartyContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyContactMultiError) AllErrors() []error { return m }

// PartyContactValidationError is the validation error returned by
// PartyContact.Validate if the designated constraints aren't met.
type PartyContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyContactValidationError) ErrorName() string { return "PartyContactValidationError" }

// Error satisfies the builtin error interface
func (e PartyContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyContactValidationError{}

// Validate checks the field values on PartyContactD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartyContactD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyContactD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartyContactDMultiError, or
// nil if none found.
func (m *PartyContactD) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyContactD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for FirstName

	// no validation rules for MiddleName

	// no validation rules for LastName

	// no validation rules for Title

	// no validation rules for NameSuffix

	// no validation rules for JobTitle

	// no validation rules for OrgDept

	// no validation rules for Email

	// no validation rules for PhoneMobile

	// no validation rules for PhoneWork

	// no validation rules for PhoneFax

	// no validation rules for CountryCallingCode

	// no validation rules for Url

	// no validation rules for GenderCode

	// no validation rules for Note

	if len(errors) > 0 {
		return PartyContactDMultiError(errors)
	}

	return nil
}

// PartyContactDMultiError is an error wrapping multiple validation errors
// returned by PartyContactD.ValidateAll() if the designated constraints
// aren't met.
type PartyContactDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyContactDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyContactDMultiError) AllErrors() []error { return m }

// PartyContactDValidationError is the validation error returned by
// PartyContactD.Validate if the designated constraints aren't met.
type PartyContactDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyContactDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyContactDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyContactDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyContactDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyContactDValidationError) ErrorName() string { return "PartyContactDValidationError" }

// Error satisfies the builtin error interface
func (e PartyContactDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyContactD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyContactDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyContactDValidationError{}

// Validate checks the field values on CreatePartyContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartyContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyContactRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartyContactRequestMultiError, or nil if none found.
func (m *CreatePartyContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstName

	// no validation rules for MiddleName

	// no validation rules for LastName

	// no validation rules for Title

	// no validation rules for NameSuffix

	// no validation rules for JobTitle

	// no validation rules for OrgDept

	// no validation rules for Email

	// no validation rules for PhoneMobile

	// no validation rules for PhoneWork

	// no validation rules for PhoneFax

	// no validation rules for CountryCallingCode

	// no validation rules for Url

	// no validation rules for GenderCode

	// no validation rules for Note

	// no validation rules for UserId

	// no validation rules for PartyId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePartyContactRequestMultiError(errors)
	}

	return nil
}

// CreatePartyContactRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePartyContactRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatePartyContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyContactRequestMultiError) AllErrors() []error { return m }

// CreatePartyContactRequestValidationError is the validation error returned by
// CreatePartyContactRequest.Validate if the designated constraints aren't met.
type CreatePartyContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyContactRequestValidationError) ErrorName() string {
	return "CreatePartyContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyContactRequestValidationError{}

// Validate checks the field values on CreatePartyContactResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartyContactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyContactResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartyContactResponseMultiError, or nil if none found.
func (m *CreatePartyContactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyContactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePartyContactResponseValidationError{
					field:  "PartyContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePartyContactResponseValidationError{
					field:  "PartyContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePartyContactResponseValidationError{
				field:  "PartyContact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePartyContactResponseMultiError(errors)
	}

	return nil
}

// CreatePartyContactResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePartyContactResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePartyContactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyContactResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyContactResponseMultiError) AllErrors() []error { return m }

// CreatePartyContactResponseValidationError is the validation error returned
// by CreatePartyContactResponse.Validate if the designated constraints aren't met.
type CreatePartyContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyContactResponseValidationError) ErrorName() string {
	return "CreatePartyContactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyContactResponseValidationError{}

// Validate checks the field values on UpdatePartyContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePartyContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePartyContactRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePartyContactRequestMultiError, or nil if none found.
func (m *UpdatePartyContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartyContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstName

	// no validation rules for MiddleName

	// no validation rules for LastName

	// no validation rules for Title

	// no validation rules for PartyContactId

	// no validation rules for PartyId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdatePartyContactRequestMultiError(errors)
	}

	return nil
}

// UpdatePartyContactRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePartyContactRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdatePartyContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartyContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartyContactRequestMultiError) AllErrors() []error { return m }

// UpdatePartyContactRequestValidationError is the validation error returned by
// UpdatePartyContactRequest.Validate if the designated constraints aren't met.
type UpdatePartyContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartyContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartyContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartyContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartyContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartyContactRequestValidationError) ErrorName() string {
	return "UpdatePartyContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartyContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartyContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartyContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartyContactRequestValidationError{}

// Validate checks the field values on UpdatePartyContactResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePartyContactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePartyContactResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePartyContactResponseMultiError, or nil if none found.
func (m *UpdatePartyContactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartyContactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePartyContactResponseMultiError(errors)
	}

	return nil
}

// UpdatePartyContactResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePartyContactResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePartyContactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartyContactResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartyContactResponseMultiError) AllErrors() []error { return m }

// UpdatePartyContactResponseValidationError is the validation error returned
// by UpdatePartyContactResponse.Validate if the designated constraints aren't met.
type UpdatePartyContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartyContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartyContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartyContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartyContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartyContactResponseValidationError) ErrorName() string {
	return "UpdatePartyContactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartyContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartyContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartyContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartyContactResponseValidationError{}

// Validate checks the field values on GetUsersInPartiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersInPartiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersInPartiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersInPartiesRequestMultiError, or nil if none found.
func (m *GetUsersInPartiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersInPartiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUsersInPartiesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUsersInPartiesRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUsersInPartiesRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUsersInPartiesRequestMultiError(errors)
	}

	return nil
}

// GetUsersInPartiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersInPartiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersInPartiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersInPartiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersInPartiesRequestMultiError) AllErrors() []error { return m }

// GetUsersInPartiesRequestValidationError is the validation error returned by
// GetUsersInPartiesRequest.Validate if the designated constraints aren't met.
type GetUsersInPartiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersInPartiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersInPartiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersInPartiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersInPartiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersInPartiesRequestValidationError) ErrorName() string {
	return "GetUsersInPartiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersInPartiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersInPartiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersInPartiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersInPartiesRequestValidationError{}

// Validate checks the field values on GetUsersInPartiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersInPartiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersInPartiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersInPartiesResponseMultiError, or nil if none found.
func (m *GetUsersInPartiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersInPartiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPartyContacts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersInPartiesResponseValidationError{
						field:  fmt.Sprintf("PartyContacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersInPartiesResponseValidationError{
						field:  fmt.Sprintf("PartyContacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersInPartiesResponseValidationError{
					field:  fmt.Sprintf("PartyContacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersInPartiesResponseMultiError(errors)
	}

	return nil
}

// GetUsersInPartiesResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsersInPartiesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetUsersInPartiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersInPartiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersInPartiesResponseMultiError) AllErrors() []error { return m }

// GetUsersInPartiesResponseValidationError is the validation error returned by
// GetUsersInPartiesResponse.Validate if the designated constraints aren't met.
type GetUsersInPartiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersInPartiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersInPartiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersInPartiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersInPartiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersInPartiesResponseValidationError) ErrorName() string {
	return "GetUsersInPartiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersInPartiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersInPartiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersInPartiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersInPartiesResponseValidationError{}

// Validate checks the field values on GetPartyContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartyContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyContactRequestMultiError, or nil if none found.
func (m *GetPartyContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyContactRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyContactRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyContactRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyContactRequestMultiError(errors)
	}

	return nil
}

// GetPartyContactRequestMultiError is an error wrapping multiple validation
// errors returned by GetPartyContactRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPartyContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyContactRequestMultiError) AllErrors() []error { return m }

// GetPartyContactRequestValidationError is the validation error returned by
// GetPartyContactRequest.Validate if the designated constraints aren't met.
type GetPartyContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyContactRequestValidationError) ErrorName() string {
	return "GetPartyContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyContactRequestValidationError{}

// Validate checks the field values on GetPartyContactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartyContactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyContactResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyContactResponseMultiError, or nil if none found.
func (m *GetPartyContactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyContactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyContactResponseValidationError{
					field:  "PartyContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyContactResponseValidationError{
					field:  "PartyContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyContactResponseValidationError{
				field:  "PartyContact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyContactResponseMultiError(errors)
	}

	return nil
}

// GetPartyContactResponseMultiError is an error wrapping multiple validation
// errors returned by GetPartyContactResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPartyContactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyContactResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyContactResponseMultiError) AllErrors() []error { return m }

// GetPartyContactResponseValidationError is the validation error returned by
// GetPartyContactResponse.Validate if the designated constraints aren't met.
type GetPartyContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyContactResponseValidationError) ErrorName() string {
	return "GetPartyContactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyContactResponseValidationError{}

// Validate checks the field values on DeletePartyContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePartyContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePartyContactRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePartyContactRequestMultiError, or nil if none found.
func (m *DeletePartyContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePartyContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePartyContactRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePartyContactRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePartyContactRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeletePartyContactRequestMultiError(errors)
	}

	return nil
}

// DeletePartyContactRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePartyContactRequest.ValidateAll() if the
// designated constraints aren't met.
type DeletePartyContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePartyContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePartyContactRequestMultiError) AllErrors() []error { return m }

// DeletePartyContactRequestValidationError is the validation error returned by
// DeletePartyContactRequest.Validate if the designated constraints aren't met.
type DeletePartyContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePartyContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePartyContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePartyContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePartyContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePartyContactRequestValidationError) ErrorName() string {
	return "DeletePartyContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePartyContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePartyContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePartyContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePartyContactRequestValidationError{}

// Validate checks the field values on DeletePartyContactResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePartyContactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePartyContactResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePartyContactResponseMultiError, or nil if none found.
func (m *DeletePartyContactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePartyContactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePartyContactResponseMultiError(errors)
	}

	return nil
}

// DeletePartyContactResponseMultiError is an error wrapping multiple
// validation errors returned by DeletePartyContactResponse.ValidateAll() if
// the designated constraints aren't met.
type DeletePartyContactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePartyContactResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePartyContactResponseMultiError) AllErrors() []error { return m }

// DeletePartyContactResponseValidationError is the validation error returned
// by DeletePartyContactResponse.Validate if the designated constraints aren't met.
type DeletePartyContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePartyContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePartyContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePartyContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePartyContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePartyContactResponseValidationError) ErrorName() string {
	return "DeletePartyContactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePartyContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePartyContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePartyContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePartyContactResponseValidationError{}

// Validate checks the field values on PartyChd with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartyChd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyChd with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartyChdMultiError, or nil
// if none found.
func (m *PartyChd) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyChd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyChdD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyChdValidationError{
					field:  "PartyChdD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyChdValidationError{
					field:  "PartyChdD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyChdD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyChdValidationError{
				field:  "PartyChdD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyChdValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyChdValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyChdValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyChdValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyChdValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyChdValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartyChdMultiError(errors)
	}

	return nil
}

// PartyChdMultiError is an error wrapping multiple validation errors returned
// by PartyChd.ValidateAll() if the designated constraints aren't met.
type PartyChdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyChdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyChdMultiError) AllErrors() []error { return m }

// PartyChdValidationError is the validation error returned by
// PartyChd.Validate if the designated constraints aren't met.
type PartyChdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyChdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyChdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyChdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyChdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyChdValidationError) ErrorName() string { return "PartyChdValidationError" }

// Error satisfies the builtin error interface
func (e PartyChdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyChd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyChdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyChdValidationError{}

// Validate checks the field values on PartyChdD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartyChdD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyChdD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartyChdDMultiError, or nil
// if none found.
func (m *PartyChdD) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyChdD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for PartyId

	// no validation rules for PartyChdId

	if len(errors) > 0 {
		return PartyChdDMultiError(errors)
	}

	return nil
}

// PartyChdDMultiError is an error wrapping multiple validation errors returned
// by PartyChdD.ValidateAll() if the designated constraints aren't met.
type PartyChdDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyChdDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyChdDMultiError) AllErrors() []error { return m }

// PartyChdDValidationError is the validation error returned by
// PartyChdD.Validate if the designated constraints aren't met.
type PartyChdDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyChdDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyChdDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyChdDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyChdDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyChdDValidationError) ErrorName() string { return "PartyChdDValidationError" }

// Error satisfies the builtin error interface
func (e PartyChdDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyChdD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyChdDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyChdDValidationError{}

// Validate checks the field values on PartyContactRel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PartyContactRel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyContactRel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartyContactRelMultiError, or nil if none found.
func (m *PartyContactRel) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyContactRel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PartyId

	// no validation rules for PartyContactId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyContactRelValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyContactRelValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyContactRelValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyContactRelValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyContactRelValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyContactRelValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartyContactRelMultiError(errors)
	}

	return nil
}

// PartyContactRelMultiError is an error wrapping multiple validation errors
// returned by PartyContactRel.ValidateAll() if the designated constraints
// aren't met.
type PartyContactRelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyContactRelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyContactRelMultiError) AllErrors() []error { return m }

// PartyContactRelValidationError is the validation error returned by
// PartyContactRel.Validate if the designated constraints aren't met.
type PartyContactRelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyContactRelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyContactRelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyContactRelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyContactRelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyContactRelValidationError) ErrorName() string { return "PartyContactRelValidationError" }

// Error satisfies the builtin error interface
func (e PartyContactRelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyContactRel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyContactRelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyContactRelValidationError{}

// Validate checks the field values on GetPartiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartiesResponseMultiError, or nil if none found.
func (m *GetPartiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPartiesResponseValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPartiesResponseValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPartiesResponseValidationError{
					field:  fmt.Sprintf("Parties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetPartiesResponseMultiError(errors)
	}

	return nil
}

// GetPartiesResponseMultiError is an error wrapping multiple validation errors
// returned by GetPartiesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPartiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartiesResponseMultiError) AllErrors() []error { return m }

// GetPartiesResponseValidationError is the validation error returned by
// GetPartiesResponse.Validate if the designated constraints aren't met.
type GetPartiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartiesResponseValidationError) ErrorName() string {
	return "GetPartiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartiesResponseValidationError{}

// Validate checks the field values on GetPartiesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPartiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartiesRequestMultiError, or nil if none found.
func (m *GetPartiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetPartiesRequestMultiError(errors)
	}

	return nil
}

// GetPartiesRequestMultiError is an error wrapping multiple validation errors
// returned by GetPartiesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPartiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartiesRequestMultiError) AllErrors() []error { return m }

// GetPartiesRequestValidationError is the validation error returned by
// GetPartiesRequest.Validate if the designated constraints aren't met.
type GetPartiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartiesRequestValidationError) ErrorName() string {
	return "GetPartiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartiesRequestValidationError{}

// Validate checks the field values on PartySocialProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartySocialProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartySocialProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartySocialProfileMultiError, or nil if none found.
func (m *PartySocialProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *PartySocialProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartySocialProfileD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartySocialProfileValidationError{
					field:  "PartySocialProfileD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartySocialProfileValidationError{
					field:  "PartySocialProfileD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartySocialProfileD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartySocialProfileValidationError{
				field:  "PartySocialProfileD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPartyInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartySocialProfileValidationError{
					field:  "PartyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartySocialProfileValidationError{
					field:  "PartyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartySocialProfileValidationError{
				field:  "PartyInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartySocialProfileValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartySocialProfileValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartySocialProfileValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartySocialProfileValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartySocialProfileValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartySocialProfileValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartySocialProfileMultiError(errors)
	}

	return nil
}

// PartySocialProfileMultiError is an error wrapping multiple validation errors
// returned by PartySocialProfile.ValidateAll() if the designated constraints
// aren't met.
type PartySocialProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartySocialProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartySocialProfileMultiError) AllErrors() []error { return m }

// PartySocialProfileValidationError is the validation error returned by
// PartySocialProfile.Validate if the designated constraints aren't met.
type PartySocialProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartySocialProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartySocialProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartySocialProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartySocialProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartySocialProfileValidationError) ErrorName() string {
	return "PartySocialProfileValidationError"
}

// Error satisfies the builtin error interface
func (e PartySocialProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartySocialProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartySocialProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartySocialProfileValidationError{}

// Validate checks the field values on PartySocialProfileD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartySocialProfileD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartySocialProfileD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartySocialProfileDMultiError, or nil if none found.
func (m *PartySocialProfileD) ValidateAll() error {
	return m.validate(true)
}

func (m *PartySocialProfileD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for SocialProfleName

	// no validation rules for SocialMediaTypeCode

	// no validation rules for Uri

	if len(errors) > 0 {
		return PartySocialProfileDMultiError(errors)
	}

	return nil
}

// PartySocialProfileDMultiError is an error wrapping multiple validation
// errors returned by PartySocialProfileD.ValidateAll() if the designated
// constraints aren't met.
type PartySocialProfileDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartySocialProfileDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartySocialProfileDMultiError) AllErrors() []error { return m }

// PartySocialProfileDValidationError is the validation error returned by
// PartySocialProfileD.Validate if the designated constraints aren't met.
type PartySocialProfileDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartySocialProfileDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartySocialProfileDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartySocialProfileDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartySocialProfileDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartySocialProfileDValidationError) ErrorName() string {
	return "PartySocialProfileDValidationError"
}

// Error satisfies the builtin error interface
func (e PartySocialProfileDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartySocialProfileD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartySocialProfileDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartySocialProfileDValidationError{}

// Validate checks the field values on CreatePartySocialProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartySocialProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartySocialProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePartySocialProfileRequestMultiError, or nil if none found.
func (m *CreatePartySocialProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartySocialProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SocialProfleName

	// no validation rules for SocialMediaTypeCode

	// no validation rules for Uri

	// no validation rules for UserId

	// no validation rules for PartyId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePartySocialProfileRequestMultiError(errors)
	}

	return nil
}

// CreatePartySocialProfileRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePartySocialProfileRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePartySocialProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartySocialProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartySocialProfileRequestMultiError) AllErrors() []error { return m }

// CreatePartySocialProfileRequestValidationError is the validation error
// returned by CreatePartySocialProfileRequest.Validate if the designated
// constraints aren't met.
type CreatePartySocialProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartySocialProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartySocialProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartySocialProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartySocialProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartySocialProfileRequestValidationError) ErrorName() string {
	return "CreatePartySocialProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartySocialProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartySocialProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartySocialProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartySocialProfileRequestValidationError{}

// Validate checks the field values on CreatePartySocialProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePartySocialProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartySocialProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePartySocialProfileResponseMultiError, or nil if none found.
func (m *CreatePartySocialProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartySocialProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartySocialProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePartySocialProfileResponseValidationError{
					field:  "PartySocialProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePartySocialProfileResponseValidationError{
					field:  "PartySocialProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartySocialProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePartySocialProfileResponseValidationError{
				field:  "PartySocialProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePartySocialProfileResponseMultiError(errors)
	}

	return nil
}

// CreatePartySocialProfileResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreatePartySocialProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePartySocialProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartySocialProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartySocialProfileResponseMultiError) AllErrors() []error { return m }

// CreatePartySocialProfileResponseValidationError is the validation error
// returned by CreatePartySocialProfileResponse.Validate if the designated
// constraints aren't met.
type CreatePartySocialProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartySocialProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartySocialProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartySocialProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartySocialProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartySocialProfileResponseValidationError) ErrorName() string {
	return "CreatePartySocialProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartySocialProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartySocialProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartySocialProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartySocialProfileResponseValidationError{}

// Validate checks the field values on GetPartySocialProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartySocialProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartySocialProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartySocialProfileRequestMultiError, or nil if none found.
func (m *GetPartySocialProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartySocialProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartySocialProfileRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartySocialProfileRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartySocialProfileRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartySocialProfileRequestMultiError(errors)
	}

	return nil
}

// GetPartySocialProfileRequestMultiError is an error wrapping multiple
// validation errors returned by GetPartySocialProfileRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPartySocialProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartySocialProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartySocialProfileRequestMultiError) AllErrors() []error { return m }

// GetPartySocialProfileRequestValidationError is the validation error returned
// by GetPartySocialProfileRequest.Validate if the designated constraints
// aren't met.
type GetPartySocialProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartySocialProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartySocialProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartySocialProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartySocialProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartySocialProfileRequestValidationError) ErrorName() string {
	return "GetPartySocialProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartySocialProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartySocialProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartySocialProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartySocialProfileRequestValidationError{}

// Validate checks the field values on GetPartySocialProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartySocialProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartySocialProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPartySocialProfileResponseMultiError, or nil if none found.
func (m *GetPartySocialProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartySocialProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartySocialProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartySocialProfileResponseValidationError{
					field:  "PartySocialProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartySocialProfileResponseValidationError{
					field:  "PartySocialProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartySocialProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartySocialProfileResponseValidationError{
				field:  "PartySocialProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartySocialProfileResponseMultiError(errors)
	}

	return nil
}

// GetPartySocialProfileResponseMultiError is an error wrapping multiple
// validation errors returned by GetPartySocialProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPartySocialProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartySocialProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartySocialProfileResponseMultiError) AllErrors() []error { return m }

// GetPartySocialProfileResponseValidationError is the validation error
// returned by GetPartySocialProfileResponse.Validate if the designated
// constraints aren't met.
type GetPartySocialProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartySocialProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartySocialProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartySocialProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartySocialProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartySocialProfileResponseValidationError) ErrorName() string {
	return "GetPartySocialProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartySocialProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartySocialProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartySocialProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartySocialProfileResponseValidationError{}

// Validate checks the field values on PartyCorporateJurisdiction with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartyCorporateJurisdiction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyCorporateJurisdiction with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartyCorporateJurisdictionMultiError, or nil if none found.
func (m *PartyCorporateJurisdiction) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyCorporateJurisdiction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyCorporateJurisdictionD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyCorporateJurisdictionValidationError{
					field:  "PartyCorporateJurisdictionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyCorporateJurisdictionValidationError{
					field:  "PartyCorporateJurisdictionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyCorporateJurisdictionD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyCorporateJurisdictionValidationError{
				field:  "PartyCorporateJurisdictionD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPartyInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyCorporateJurisdictionValidationError{
					field:  "PartyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyCorporateJurisdictionValidationError{
					field:  "PartyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyCorporateJurisdictionValidationError{
				field:  "PartyInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyCorporateJurisdictionValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyCorporateJurisdictionValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyCorporateJurisdictionValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyCorporateJurisdictionValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyCorporateJurisdictionValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyCorporateJurisdictionValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartyCorporateJurisdictionMultiError(errors)
	}

	return nil
}

// PartyCorporateJurisdictionMultiError is an error wrapping multiple
// validation errors returned by PartyCorporateJurisdiction.ValidateAll() if
// the designated constraints aren't met.
type PartyCorporateJurisdictionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyCorporateJurisdictionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyCorporateJurisdictionMultiError) AllErrors() []error { return m }

// PartyCorporateJurisdictionValidationError is the validation error returned
// by PartyCorporateJurisdiction.Validate if the designated constraints aren't met.
type PartyCorporateJurisdictionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyCorporateJurisdictionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyCorporateJurisdictionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyCorporateJurisdictionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyCorporateJurisdictionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyCorporateJurisdictionValidationError) ErrorName() string {
	return "PartyCorporateJurisdictionValidationError"
}

// Error satisfies the builtin error interface
func (e PartyCorporateJurisdictionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyCorporateJurisdiction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyCorporateJurisdictionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyCorporateJurisdictionValidationError{}

// Validate checks the field values on PartyCorporateJurisdictionD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartyCorporateJurisdictionD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyCorporateJurisdictionD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartyCorporateJurisdictionDMultiError, or nil if none found.
func (m *PartyCorporateJurisdictionD) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyCorporateJurisdictionD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for AddressId

	if len(errors) > 0 {
		return PartyCorporateJurisdictionDMultiError(errors)
	}

	return nil
}

// PartyCorporateJurisdictionDMultiError is an error wrapping multiple
// validation errors returned by PartyCorporateJurisdictionD.ValidateAll() if
// the designated constraints aren't met.
type PartyCorporateJurisdictionDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyCorporateJurisdictionDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyCorporateJurisdictionDMultiError) AllErrors() []error { return m }

// PartyCorporateJurisdictionDValidationError is the validation error returned
// by PartyCorporateJurisdictionD.Validate if the designated constraints
// aren't met.
type PartyCorporateJurisdictionDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyCorporateJurisdictionDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyCorporateJurisdictionDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyCorporateJurisdictionDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyCorporateJurisdictionDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyCorporateJurisdictionDValidationError) ErrorName() string {
	return "PartyCorporateJurisdictionDValidationError"
}

// Error satisfies the builtin error interface
func (e PartyCorporateJurisdictionDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyCorporateJurisdictionD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyCorporateJurisdictionDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyCorporateJurisdictionDValidationError{}

// Validate checks the field values on CreatePartyCorporateJurisdictionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreatePartyCorporateJurisdictionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreatePartyCorporateJurisdictionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreatePartyCorporateJurisdictionRequestMultiError, or nil if none found.
func (m *CreatePartyCorporateJurisdictionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyCorporateJurisdictionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddrListAgencyId

	// no validation rules for AddrListId

	// no validation rules for AddrListVersionId

	// no validation rules for AddressTypeCode

	// no validation rules for AddressFormatCode

	// no validation rules for Postbox

	// no validation rules for Floor

	// no validation rules for Room

	// no validation rules for StreetName

	// no validation rules for AdditionalStreetName

	// no validation rules for BlockName

	// no validation rules for BuildingName

	// no validation rules for BuildingNumber

	// no validation rules for InhouseMail

	// no validation rules for Department

	// no validation rules for MarkAttention

	// no validation rules for MarkCare

	// no validation rules for PlotIdentification

	// no validation rules for CitySubdivisionName

	// no validation rules for CityName

	// no validation rules for PostalZone

	// no validation rules for CountrySubentity

	// no validation rules for CountrySubentityCode

	// no validation rules for Region

	// no validation rules for District

	// no validation rules for TimezoneOffset

	// no validation rules for CountryIdCode

	// no validation rules for CountryName

	// no validation rules for LocationCoordLat

	// no validation rules for LocationCoordLon

	// no validation rules for Note

	// no validation rules for UserId

	// no validation rules for PartyId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePartyCorporateJurisdictionRequestMultiError(errors)
	}

	return nil
}

// CreatePartyCorporateJurisdictionRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreatePartyCorporateJurisdictionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePartyCorporateJurisdictionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyCorporateJurisdictionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyCorporateJurisdictionRequestMultiError) AllErrors() []error { return m }

// CreatePartyCorporateJurisdictionRequestValidationError is the validation
// error returned by CreatePartyCorporateJurisdictionRequest.Validate if the
// designated constraints aren't met.
type CreatePartyCorporateJurisdictionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyCorporateJurisdictionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyCorporateJurisdictionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyCorporateJurisdictionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyCorporateJurisdictionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyCorporateJurisdictionRequestValidationError) ErrorName() string {
	return "CreatePartyCorporateJurisdictionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyCorporateJurisdictionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyCorporateJurisdictionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyCorporateJurisdictionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyCorporateJurisdictionRequestValidationError{}

// Validate checks the field values on CreatePartyCorporateJurisdictionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreatePartyCorporateJurisdictionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreatePartyCorporateJurisdictionResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreatePartyCorporateJurisdictionResponseMultiError, or nil if none found.
func (m *CreatePartyCorporateJurisdictionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyCorporateJurisdictionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyCorporateJurisdiction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePartyCorporateJurisdictionResponseValidationError{
					field:  "PartyCorporateJurisdiction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePartyCorporateJurisdictionResponseValidationError{
					field:  "PartyCorporateJurisdiction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyCorporateJurisdiction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePartyCorporateJurisdictionResponseValidationError{
				field:  "PartyCorporateJurisdiction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePartyCorporateJurisdictionResponseMultiError(errors)
	}

	return nil
}

// CreatePartyCorporateJurisdictionResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreatePartyCorporateJurisdictionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePartyCorporateJurisdictionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyCorporateJurisdictionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyCorporateJurisdictionResponseMultiError) AllErrors() []error { return m }

// CreatePartyCorporateJurisdictionResponseValidationError is the validation
// error returned by CreatePartyCorporateJurisdictionResponse.Validate if the
// designated constraints aren't met.
type CreatePartyCorporateJurisdictionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyCorporateJurisdictionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyCorporateJurisdictionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyCorporateJurisdictionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyCorporateJurisdictionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyCorporateJurisdictionResponseValidationError) ErrorName() string {
	return "CreatePartyCorporateJurisdictionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyCorporateJurisdictionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyCorporateJurisdictionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyCorporateJurisdictionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyCorporateJurisdictionResponseValidationError{}

// Validate checks the field values on GetPartyCorporateJurisdictionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPartyCorporateJurisdictionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyCorporateJurisdictionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPartyCorporateJurisdictionRequestMultiError, or nil if none found.
func (m *GetPartyCorporateJurisdictionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyCorporateJurisdictionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyCorporateJurisdictionRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyCorporateJurisdictionRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyCorporateJurisdictionRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyCorporateJurisdictionRequestMultiError(errors)
	}

	return nil
}

// GetPartyCorporateJurisdictionRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPartyCorporateJurisdictionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPartyCorporateJurisdictionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyCorporateJurisdictionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyCorporateJurisdictionRequestMultiError) AllErrors() []error { return m }

// GetPartyCorporateJurisdictionRequestValidationError is the validation error
// returned by GetPartyCorporateJurisdictionRequest.Validate if the designated
// constraints aren't met.
type GetPartyCorporateJurisdictionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyCorporateJurisdictionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyCorporateJurisdictionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyCorporateJurisdictionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyCorporateJurisdictionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyCorporateJurisdictionRequestValidationError) ErrorName() string {
	return "GetPartyCorporateJurisdictionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyCorporateJurisdictionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyCorporateJurisdictionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyCorporateJurisdictionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyCorporateJurisdictionRequestValidationError{}

// Validate checks the field values on GetPartyCorporateJurisdictionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPartyCorporateJurisdictionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyCorporateJurisdictionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPartyCorporateJurisdictionResponseMultiError, or nil if none found.
func (m *GetPartyCorporateJurisdictionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyCorporateJurisdictionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyCorporateJurisdiction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyCorporateJurisdictionResponseValidationError{
					field:  "PartyCorporateJurisdiction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyCorporateJurisdictionResponseValidationError{
					field:  "PartyCorporateJurisdiction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyCorporateJurisdiction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyCorporateJurisdictionResponseValidationError{
				field:  "PartyCorporateJurisdiction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyCorporateJurisdictionResponseMultiError(errors)
	}

	return nil
}

// GetPartyCorporateJurisdictionResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetPartyCorporateJurisdictionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPartyCorporateJurisdictionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyCorporateJurisdictionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyCorporateJurisdictionResponseMultiError) AllErrors() []error { return m }

// GetPartyCorporateJurisdictionResponseValidationError is the validation error
// returned by GetPartyCorporateJurisdictionResponse.Validate if the
// designated constraints aren't met.
type GetPartyCorporateJurisdictionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyCorporateJurisdictionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyCorporateJurisdictionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyCorporateJurisdictionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyCorporateJurisdictionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyCorporateJurisdictionResponseValidationError) ErrorName() string {
	return "GetPartyCorporateJurisdictionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyCorporateJurisdictionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyCorporateJurisdictionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyCorporateJurisdictionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyCorporateJurisdictionResponseValidationError{}
