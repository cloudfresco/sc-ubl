// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: party/v1/party.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartyService_CreateParty_FullMethodName                      = "/party.v1.PartyService/CreateParty"
	PartyService_CreateChild_FullMethodName                      = "/party.v1.PartyService/CreateChild"
	PartyService_GetParties_FullMethodName                       = "/party.v1.PartyService/GetParties"
	PartyService_GetParty_FullMethodName                         = "/party.v1.PartyService/GetParty"
	PartyService_GetPartyByPk_FullMethodName                     = "/party.v1.PartyService/GetPartyByPk"
	PartyService_GetTopLevelParties_FullMethodName               = "/party.v1.PartyService/GetTopLevelParties"
	PartyService_GetChildParties_FullMethodName                  = "/party.v1.PartyService/GetChildParties"
	PartyService_GetParentParty_FullMethodName                   = "/party.v1.PartyService/GetParentParty"
	PartyService_UpdateParty_FullMethodName                      = "/party.v1.PartyService/UpdateParty"
	PartyService_DeleteParty_FullMethodName                      = "/party.v1.PartyService/DeleteParty"
	PartyService_CreatePartyContact_FullMethodName               = "/party.v1.PartyService/CreatePartyContact"
	PartyService_GetUsersInParties_FullMethodName                = "/party.v1.PartyService/GetUsersInParties"
	PartyService_GetPartyContact_FullMethodName                  = "/party.v1.PartyService/GetPartyContact"
	PartyService_UpdatePartyContact_FullMethodName               = "/party.v1.PartyService/UpdatePartyContact"
	PartyService_DeletePartyContact_FullMethodName               = "/party.v1.PartyService/DeletePartyContact"
	PartyService_CreatePartySocialProfile_FullMethodName         = "/party.v1.PartyService/CreatePartySocialProfile"
	PartyService_GetPartySocialProfile_FullMethodName            = "/party.v1.PartyService/GetPartySocialProfile"
	PartyService_CreatePartyCorporateJurisdiction_FullMethodName = "/party.v1.PartyService/CreatePartyCorporateJurisdiction"
	PartyService_GetPartyCorporateJurisdiction_FullMethodName    = "/party.v1.PartyService/GetPartyCorporateJurisdiction"
)

// PartyServiceClient is the client API for PartyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The PartyService service definition.
type PartyServiceClient interface {
	CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error)
	CreateChild(ctx context.Context, in *CreateChildRequest, opts ...grpc.CallOption) (*CreateChildResponse, error)
	GetParties(ctx context.Context, in *GetPartiesRequest, opts ...grpc.CallOption) (*GetPartiesResponse, error)
	GetParty(ctx context.Context, in *GetPartyRequest, opts ...grpc.CallOption) (*GetPartyResponse, error)
	GetPartyByPk(ctx context.Context, in *GetPartyByPkRequest, opts ...grpc.CallOption) (*GetPartyByPkResponse, error)
	GetTopLevelParties(ctx context.Context, in *GetTopLevelPartiesRequest, opts ...grpc.CallOption) (*GetTopLevelPartiesResponse, error)
	GetChildParties(ctx context.Context, in *GetChildPartiesRequest, opts ...grpc.CallOption) (*GetChildPartiesResponse, error)
	GetParentParty(ctx context.Context, in *GetParentPartyRequest, opts ...grpc.CallOption) (*GetParentPartyResponse, error)
	UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*UpdatePartyResponse, error)
	DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*DeletePartyResponse, error)
	CreatePartyContact(ctx context.Context, in *CreatePartyContactRequest, opts ...grpc.CallOption) (*CreatePartyContactResponse, error)
	GetUsersInParties(ctx context.Context, in *GetUsersInPartiesRequest, opts ...grpc.CallOption) (*GetUsersInPartiesResponse, error)
	GetPartyContact(ctx context.Context, in *GetPartyContactRequest, opts ...grpc.CallOption) (*GetPartyContactResponse, error)
	UpdatePartyContact(ctx context.Context, in *UpdatePartyContactRequest, opts ...grpc.CallOption) (*UpdatePartyContactResponse, error)
	DeletePartyContact(ctx context.Context, in *DeletePartyContactRequest, opts ...grpc.CallOption) (*DeletePartyContactResponse, error)
	CreatePartySocialProfile(ctx context.Context, in *CreatePartySocialProfileRequest, opts ...grpc.CallOption) (*CreatePartySocialProfileResponse, error)
	GetPartySocialProfile(ctx context.Context, in *GetPartySocialProfileRequest, opts ...grpc.CallOption) (*GetPartySocialProfileResponse, error)
	CreatePartyCorporateJurisdiction(ctx context.Context, in *CreatePartyCorporateJurisdictionRequest, opts ...grpc.CallOption) (*CreatePartyCorporateJurisdictionResponse, error)
	GetPartyCorporateJurisdiction(ctx context.Context, in *GetPartyCorporateJurisdictionRequest, opts ...grpc.CallOption) (*GetPartyCorporateJurisdictionResponse, error)
}

type partyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyServiceClient(cc grpc.ClientConnInterface) PartyServiceClient {
	return &partyServiceClient{cc}
}

func (c *partyServiceClient) CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePartyResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreateChild(ctx context.Context, in *CreateChildRequest, opts ...grpc.CallOption) (*CreateChildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChildResponse)
	err := c.cc.Invoke(ctx, PartyService_CreateChild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetParties(ctx context.Context, in *GetPartiesRequest, opts ...grpc.CallOption) (*GetPartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartiesResponse)
	err := c.cc.Invoke(ctx, PartyService_GetParties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetParty(ctx context.Context, in *GetPartyRequest, opts ...grpc.CallOption) (*GetPartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartyResponse)
	err := c.cc.Invoke(ctx, PartyService_GetParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetPartyByPk(ctx context.Context, in *GetPartyByPkRequest, opts ...grpc.CallOption) (*GetPartyByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartyByPkResponse)
	err := c.cc.Invoke(ctx, PartyService_GetPartyByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetTopLevelParties(ctx context.Context, in *GetTopLevelPartiesRequest, opts ...grpc.CallOption) (*GetTopLevelPartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopLevelPartiesResponse)
	err := c.cc.Invoke(ctx, PartyService_GetTopLevelParties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetChildParties(ctx context.Context, in *GetChildPartiesRequest, opts ...grpc.CallOption) (*GetChildPartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChildPartiesResponse)
	err := c.cc.Invoke(ctx, PartyService_GetChildParties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetParentParty(ctx context.Context, in *GetParentPartyRequest, opts ...grpc.CallOption) (*GetParentPartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParentPartyResponse)
	err := c.cc.Invoke(ctx, PartyService_GetParentParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*UpdatePartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePartyResponse)
	err := c.cc.Invoke(ctx, PartyService_UpdateParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*DeletePartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePartyResponse)
	err := c.cc.Invoke(ctx, PartyService_DeleteParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreatePartyContact(ctx context.Context, in *CreatePartyContactRequest, opts ...grpc.CallOption) (*CreatePartyContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePartyContactResponse)
	err := c.cc.Invoke(ctx, PartyService_CreatePartyContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetUsersInParties(ctx context.Context, in *GetUsersInPartiesRequest, opts ...grpc.CallOption) (*GetUsersInPartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersInPartiesResponse)
	err := c.cc.Invoke(ctx, PartyService_GetUsersInParties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetPartyContact(ctx context.Context, in *GetPartyContactRequest, opts ...grpc.CallOption) (*GetPartyContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartyContactResponse)
	err := c.cc.Invoke(ctx, PartyService_GetPartyContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) UpdatePartyContact(ctx context.Context, in *UpdatePartyContactRequest, opts ...grpc.CallOption) (*UpdatePartyContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePartyContactResponse)
	err := c.cc.Invoke(ctx, PartyService_UpdatePartyContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) DeletePartyContact(ctx context.Context, in *DeletePartyContactRequest, opts ...grpc.CallOption) (*DeletePartyContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePartyContactResponse)
	err := c.cc.Invoke(ctx, PartyService_DeletePartyContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreatePartySocialProfile(ctx context.Context, in *CreatePartySocialProfileRequest, opts ...grpc.CallOption) (*CreatePartySocialProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePartySocialProfileResponse)
	err := c.cc.Invoke(ctx, PartyService_CreatePartySocialProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetPartySocialProfile(ctx context.Context, in *GetPartySocialProfileRequest, opts ...grpc.CallOption) (*GetPartySocialProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartySocialProfileResponse)
	err := c.cc.Invoke(ctx, PartyService_GetPartySocialProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) CreatePartyCorporateJurisdiction(ctx context.Context, in *CreatePartyCorporateJurisdictionRequest, opts ...grpc.CallOption) (*CreatePartyCorporateJurisdictionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePartyCorporateJurisdictionResponse)
	err := c.cc.Invoke(ctx, PartyService_CreatePartyCorporateJurisdiction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) GetPartyCorporateJurisdiction(ctx context.Context, in *GetPartyCorporateJurisdictionRequest, opts ...grpc.CallOption) (*GetPartyCorporateJurisdictionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartyCorporateJurisdictionResponse)
	err := c.cc.Invoke(ctx, PartyService_GetPartyCorporateJurisdiction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartyServiceServer is the server API for PartyService service.
// All implementations must embed UnimplementedPartyServiceServer
// for forward compatibility.
//
// The PartyService service definition.
type PartyServiceServer interface {
	CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error)
	CreateChild(context.Context, *CreateChildRequest) (*CreateChildResponse, error)
	GetParties(context.Context, *GetPartiesRequest) (*GetPartiesResponse, error)
	GetParty(context.Context, *GetPartyRequest) (*GetPartyResponse, error)
	GetPartyByPk(context.Context, *GetPartyByPkRequest) (*GetPartyByPkResponse, error)
	GetTopLevelParties(context.Context, *GetTopLevelPartiesRequest) (*GetTopLevelPartiesResponse, error)
	GetChildParties(context.Context, *GetChildPartiesRequest) (*GetChildPartiesResponse, error)
	GetParentParty(context.Context, *GetParentPartyRequest) (*GetParentPartyResponse, error)
	UpdateParty(context.Context, *UpdatePartyRequest) (*UpdatePartyResponse, error)
	DeleteParty(context.Context, *DeletePartyRequest) (*DeletePartyResponse, error)
	CreatePartyContact(context.Context, *CreatePartyContactRequest) (*CreatePartyContactResponse, error)
	GetUsersInParties(context.Context, *GetUsersInPartiesRequest) (*GetUsersInPartiesResponse, error)
	GetPartyContact(context.Context, *GetPartyContactRequest) (*GetPartyContactResponse, error)
	UpdatePartyContact(context.Context, *UpdatePartyContactRequest) (*UpdatePartyContactResponse, error)
	DeletePartyContact(context.Context, *DeletePartyContactRequest) (*DeletePartyContactResponse, error)
	CreatePartySocialProfile(context.Context, *CreatePartySocialProfileRequest) (*CreatePartySocialProfileResponse, error)
	GetPartySocialProfile(context.Context, *GetPartySocialProfileRequest) (*GetPartySocialProfileResponse, error)
	CreatePartyCorporateJurisdiction(context.Context, *CreatePartyCorporateJurisdictionRequest) (*CreatePartyCorporateJurisdictionResponse, error)
	GetPartyCorporateJurisdiction(context.Context, *GetPartyCorporateJurisdictionRequest) (*GetPartyCorporateJurisdictionResponse, error)
	mustEmbedUnimplementedPartyServiceServer()
}

// UnimplementedPartyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartyServiceServer struct{}

func (UnimplementedPartyServiceServer) CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParty not implemented")
}
func (UnimplementedPartyServiceServer) CreateChild(context.Context, *CreateChildRequest) (*CreateChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChild not implemented")
}
func (UnimplementedPartyServiceServer) GetParties(context.Context, *GetPartiesRequest) (*GetPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParties not implemented")
}
func (UnimplementedPartyServiceServer) GetParty(context.Context, *GetPartyRequest) (*GetPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParty not implemented")
}
func (UnimplementedPartyServiceServer) GetPartyByPk(context.Context, *GetPartyByPkRequest) (*GetPartyByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartyByPk not implemented")
}
func (UnimplementedPartyServiceServer) GetTopLevelParties(context.Context, *GetTopLevelPartiesRequest) (*GetTopLevelPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopLevelParties not implemented")
}
func (UnimplementedPartyServiceServer) GetChildParties(context.Context, *GetChildPartiesRequest) (*GetChildPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildParties not implemented")
}
func (UnimplementedPartyServiceServer) GetParentParty(context.Context, *GetParentPartyRequest) (*GetParentPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParentParty not implemented")
}
func (UnimplementedPartyServiceServer) UpdateParty(context.Context, *UpdatePartyRequest) (*UpdatePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParty not implemented")
}
func (UnimplementedPartyServiceServer) DeleteParty(context.Context, *DeletePartyRequest) (*DeletePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParty not implemented")
}
func (UnimplementedPartyServiceServer) CreatePartyContact(context.Context, *CreatePartyContactRequest) (*CreatePartyContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartyContact not implemented")
}
func (UnimplementedPartyServiceServer) GetUsersInParties(context.Context, *GetUsersInPartiesRequest) (*GetUsersInPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersInParties not implemented")
}
func (UnimplementedPartyServiceServer) GetPartyContact(context.Context, *GetPartyContactRequest) (*GetPartyContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartyContact not implemented")
}
func (UnimplementedPartyServiceServer) UpdatePartyContact(context.Context, *UpdatePartyContactRequest) (*UpdatePartyContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartyContact not implemented")
}
func (UnimplementedPartyServiceServer) DeletePartyContact(context.Context, *DeletePartyContactRequest) (*DeletePartyContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartyContact not implemented")
}
func (UnimplementedPartyServiceServer) CreatePartySocialProfile(context.Context, *CreatePartySocialProfileRequest) (*CreatePartySocialProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartySocialProfile not implemented")
}
func (UnimplementedPartyServiceServer) GetPartySocialProfile(context.Context, *GetPartySocialProfileRequest) (*GetPartySocialProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartySocialProfile not implemented")
}
func (UnimplementedPartyServiceServer) CreatePartyCorporateJurisdiction(context.Context, *CreatePartyCorporateJurisdictionRequest) (*CreatePartyCorporateJurisdictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartyCorporateJurisdiction not implemented")
}
func (UnimplementedPartyServiceServer) GetPartyCorporateJurisdiction(context.Context, *GetPartyCorporateJurisdictionRequest) (*GetPartyCorporateJurisdictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartyCorporateJurisdiction not implemented")
}
func (UnimplementedPartyServiceServer) mustEmbedUnimplementedPartyServiceServer() {}
func (UnimplementedPartyServiceServer) testEmbeddedByValue()                      {}

// UnsafePartyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyServiceServer will
// result in compilation errors.
type UnsafePartyServiceServer interface {
	mustEmbedUnimplementedPartyServiceServer()
}

func RegisterPartyServiceServer(s grpc.ServiceRegistrar, srv PartyServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartyService_ServiceDesc, srv)
}

func _PartyService_CreateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateParty(ctx, req.(*CreatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreateChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreateChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateChild(ctx, req.(*CreateChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetParties(ctx, req.(*GetPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetParty(ctx, req.(*GetPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetPartyByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetPartyByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetPartyByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetPartyByPk(ctx, req.(*GetPartyByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetTopLevelParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopLevelPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetTopLevelParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetTopLevelParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetTopLevelParties(ctx, req.(*GetTopLevelPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetChildParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetChildParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetChildParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetChildParties(ctx, req.(*GetChildPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetParentParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParentPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetParentParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetParentParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetParentParty(ctx, req.(*GetParentPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_UpdateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).UpdateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_UpdateParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).UpdateParty(ctx, req.(*UpdatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_DeleteParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).DeleteParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_DeleteParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).DeleteParty(ctx, req.(*DeletePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreatePartyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreatePartyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreatePartyContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreatePartyContact(ctx, req.(*CreatePartyContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetUsersInParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersInPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetUsersInParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetUsersInParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetUsersInParties(ctx, req.(*GetUsersInPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetPartyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetPartyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetPartyContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetPartyContact(ctx, req.(*GetPartyContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_UpdatePartyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartyContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).UpdatePartyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_UpdatePartyContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).UpdatePartyContact(ctx, req.(*UpdatePartyContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_DeletePartyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartyContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).DeletePartyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_DeletePartyContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).DeletePartyContact(ctx, req.(*DeletePartyContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreatePartySocialProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartySocialProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreatePartySocialProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreatePartySocialProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreatePartySocialProfile(ctx, req.(*CreatePartySocialProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetPartySocialProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartySocialProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetPartySocialProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetPartySocialProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetPartySocialProfile(ctx, req.(*GetPartySocialProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_CreatePartyCorporateJurisdiction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyCorporateJurisdictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreatePartyCorporateJurisdiction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_CreatePartyCorporateJurisdiction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreatePartyCorporateJurisdiction(ctx, req.(*CreatePartyCorporateJurisdictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_GetPartyCorporateJurisdiction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyCorporateJurisdictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).GetPartyCorporateJurisdiction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyService_GetPartyCorporateJurisdiction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).GetPartyCorporateJurisdiction(ctx, req.(*GetPartyCorporateJurisdictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartyService_ServiceDesc is the grpc.ServiceDesc for PartyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.v1.PartyService",
	HandlerType: (*PartyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateParty",
			Handler:    _PartyService_CreateParty_Handler,
		},
		{
			MethodName: "CreateChild",
			Handler:    _PartyService_CreateChild_Handler,
		},
		{
			MethodName: "GetParties",
			Handler:    _PartyService_GetParties_Handler,
		},
		{
			MethodName: "GetParty",
			Handler:    _PartyService_GetParty_Handler,
		},
		{
			MethodName: "GetPartyByPk",
			Handler:    _PartyService_GetPartyByPk_Handler,
		},
		{
			MethodName: "GetTopLevelParties",
			Handler:    _PartyService_GetTopLevelParties_Handler,
		},
		{
			MethodName: "GetChildParties",
			Handler:    _PartyService_GetChildParties_Handler,
		},
		{
			MethodName: "GetParentParty",
			Handler:    _PartyService_GetParentParty_Handler,
		},
		{
			MethodName: "UpdateParty",
			Handler:    _PartyService_UpdateParty_Handler,
		},
		{
			MethodName: "DeleteParty",
			Handler:    _PartyService_DeleteParty_Handler,
		},
		{
			MethodName: "CreatePartyContact",
			Handler:    _PartyService_CreatePartyContact_Handler,
		},
		{
			MethodName: "GetUsersInParties",
			Handler:    _PartyService_GetUsersInParties_Handler,
		},
		{
			MethodName: "GetPartyContact",
			Handler:    _PartyService_GetPartyContact_Handler,
		},
		{
			MethodName: "UpdatePartyContact",
			Handler:    _PartyService_UpdatePartyContact_Handler,
		},
		{
			MethodName: "DeletePartyContact",
			Handler:    _PartyService_DeletePartyContact_Handler,
		},
		{
			MethodName: "CreatePartySocialProfile",
			Handler:    _PartyService_CreatePartySocialProfile_Handler,
		},
		{
			MethodName: "GetPartySocialProfile",
			Handler:    _PartyService_GetPartySocialProfile_Handler,
		},
		{
			MethodName: "CreatePartyCorporateJurisdiction",
			Handler:    _PartyService_CreatePartyCorporateJurisdiction_Handler,
		},
		{
			MethodName: "GetPartyCorporateJurisdiction",
			Handler:    _PartyService_GetPartyCorporateJurisdiction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party/v1/party.proto",
}
