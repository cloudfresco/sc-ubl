// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: payment/v1/payment.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-ubl/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentD  *PaymentD     `protobuf:"bytes,1,opt,name=payment_d,json=paymentD,proto3" json:"payment_d,omitempty"`
	PaymentT  *PaymentT     `protobuf:"bytes,2,opt,name=payment_t,json=paymentT,proto3" json:"payment_t,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	mi := &file_payment_v1_payment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{0}
}

func (x *Payment) GetPaymentD() *PaymentD {
	if x != nil {
		return x.PaymentD
	}
	return nil
}

func (x *Payment) GetPaymentT() *PaymentT {
	if x != nil {
		return x.PaymentT
	}
	return nil
}

func (x *Payment) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Payment) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type PaymentD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4         []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS           string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	PId           string  `protobuf:"bytes,4,opt,name=p_id,json=pId,proto3" json:"p_id,omitempty"`
	PaidAmount    float64 `protobuf:"fixed64,5,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty"`
	InstructionId string  `protobuf:"bytes,6,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	PaymentMeanId uint32  `protobuf:"varint,7,opt,name=payment_mean_id,json=paymentMeanId,proto3" json:"payment_mean_id,omitempty"`
}

func (x *PaymentD) Reset() {
	*x = PaymentD{}
	mi := &file_payment_v1_payment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentD) ProtoMessage() {}

func (x *PaymentD) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentD.ProtoReflect.Descriptor instead.
func (*PaymentD) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{1}
}

func (x *PaymentD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PaymentD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PaymentD) GetPId() string {
	if x != nil {
		return x.PId
	}
	return ""
}

func (x *PaymentD) GetPaidAmount() float64 {
	if x != nil {
		return x.PaidAmount
	}
	return 0
}

func (x *PaymentD) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

func (x *PaymentD) GetPaymentMeanId() uint32 {
	if x != nil {
		return x.PaymentMeanId
	}
	return 0
}

type PaymentT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=received_date,json=receivedDate,proto3" json:"received_date,omitempty"`
	PaidDate     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=paid_date,json=paidDate,proto3" json:"paid_date,omitempty"`
}

func (x *PaymentT) Reset() {
	*x = PaymentT{}
	mi := &file_payment_v1_payment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentT) ProtoMessage() {}

func (x *PaymentT) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentT.ProtoReflect.Descriptor instead.
func (*PaymentT) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{2}
}

func (x *PaymentT) GetReceivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedDate
	}
	return nil
}

func (x *PaymentT) GetPaidDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaidDate
	}
	return nil
}

type CreatePaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PId           string  `protobuf:"bytes,1,opt,name=p_id,json=pId,proto3" json:"p_id,omitempty"`
	PaidAmount    float64 `protobuf:"fixed64,2,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty"`
	ReceivedDate  string  `protobuf:"bytes,3,opt,name=received_date,json=receivedDate,proto3" json:"received_date,omitempty"`
	PaidDate      string  `protobuf:"bytes,4,opt,name=paid_date,json=paidDate,proto3" json:"paid_date,omitempty"`
	InstructionId string  `protobuf:"bytes,5,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	PaymentMeanId uint32  `protobuf:"varint,6,opt,name=payment_mean_id,json=paymentMeanId,proto3" json:"payment_mean_id,omitempty"`
	UserId        string  `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail     string  `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId     string  `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePaymentRequest) Reset() {
	*x = CreatePaymentRequest{}
	mi := &file_payment_v1_payment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentRequest) ProtoMessage() {}

func (x *CreatePaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePaymentRequest) GetPId() string {
	if x != nil {
		return x.PId
	}
	return ""
}

func (x *CreatePaymentRequest) GetPaidAmount() float64 {
	if x != nil {
		return x.PaidAmount
	}
	return 0
}

func (x *CreatePaymentRequest) GetReceivedDate() string {
	if x != nil {
		return x.ReceivedDate
	}
	return ""
}

func (x *CreatePaymentRequest) GetPaidDate() string {
	if x != nil {
		return x.PaidDate
	}
	return ""
}

func (x *CreatePaymentRequest) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

func (x *CreatePaymentRequest) GetPaymentMeanId() uint32 {
	if x != nil {
		return x.PaymentMeanId
	}
	return 0
}

func (x *CreatePaymentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePaymentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePaymentRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment *Payment `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (x *CreatePaymentResponse) Reset() {
	*x = CreatePaymentResponse{}
	mi := &file_payment_v1_payment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentResponse) ProtoMessage() {}

func (x *CreatePaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentResponse.ProtoReflect.Descriptor instead.
func (*CreatePaymentResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePaymentResponse) GetPayment() *Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

type PaymentTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentTermD *PaymentTermD  `protobuf:"bytes,1,opt,name=payment_term_d,json=paymentTermD,proto3" json:"payment_term_d,omitempty"`
	PaymentTermT *PaymentTermT  `protobuf:"bytes,2,opt,name=payment_term_t,json=paymentTermT,proto3" json:"payment_term_t,omitempty"`
	CrUpdUser    *v1.CrUpdUser  `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime    *v1.CrUpdTime  `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	PaymentMeans []*PaymentMean `protobuf:"bytes,5,rep,name=payment_means,json=paymentMeans,proto3" json:"payment_means,omitempty"`
	Payments     []*Payment     `protobuf:"bytes,6,rep,name=payments,proto3" json:"payments,omitempty"`
}

func (x *PaymentTerm) Reset() {
	*x = PaymentTerm{}
	mi := &file_payment_v1_payment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentTerm) ProtoMessage() {}

func (x *PaymentTerm) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentTerm.ProtoReflect.Descriptor instead.
func (*PaymentTerm) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{5}
}

func (x *PaymentTerm) GetPaymentTermD() *PaymentTermD {
	if x != nil {
		return x.PaymentTermD
	}
	return nil
}

func (x *PaymentTerm) GetPaymentTermT() *PaymentTermT {
	if x != nil {
		return x.PaymentTermT
	}
	return nil
}

func (x *PaymentTerm) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PaymentTerm) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *PaymentTerm) GetPaymentMeans() []*PaymentMean {
	if x != nil {
		return x.PaymentMeans
	}
	return nil
}

func (x *PaymentTerm) GetPayments() []*Payment {
	if x != nil {
		return x.Payments
	}
	return nil
}

type PaymentTermD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                     []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                       string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	PtId                      string  `protobuf:"bytes,4,opt,name=pt_id,json=ptId,proto3" json:"pt_id,omitempty"`
	PrepaidPaymentReferenceId string  `protobuf:"bytes,5,opt,name=prepaid_payment_reference_id,json=prepaidPaymentReferenceId,proto3" json:"prepaid_payment_reference_id,omitempty"`
	Note                      string  `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	ReferenceEventCode        string  `protobuf:"bytes,7,opt,name=reference_event_code,json=referenceEventCode,proto3" json:"reference_event_code,omitempty"`
	SettlementDiscountPercent float32 `protobuf:"fixed32,8,opt,name=settlement_discount_percent,json=settlementDiscountPercent,proto3" json:"settlement_discount_percent,omitempty"`
	PenaltySurchargePercent   float32 `protobuf:"fixed32,9,opt,name=penalty_surcharge_percent,json=penaltySurchargePercent,proto3" json:"penalty_surcharge_percent,omitempty"`
	PaymentPercent            float32 `protobuf:"fixed32,10,opt,name=payment_percent,json=paymentPercent,proto3" json:"payment_percent,omitempty"`
	Amount                    float64 `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	SettlementDiscountAmount  float64 `protobuf:"fixed64,12,opt,name=settlement_discount_amount,json=settlementDiscountAmount,proto3" json:"settlement_discount_amount,omitempty"`
	PenaltyAmount             float64 `protobuf:"fixed64,13,opt,name=penalty_amount,json=penaltyAmount,proto3" json:"penalty_amount,omitempty"`
	PaymentTermsDetailsURI    string  `protobuf:"bytes,14,opt,name=payment_terms_details_u_r_i,json=paymentTermsDetailsURI,proto3" json:"payment_terms_details_u_r_i,omitempty"`
	ExchangeRate              float64 `protobuf:"fixed64,15,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
}

func (x *PaymentTermD) Reset() {
	*x = PaymentTermD{}
	mi := &file_payment_v1_payment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentTermD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentTermD) ProtoMessage() {}

func (x *PaymentTermD) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentTermD.ProtoReflect.Descriptor instead.
func (*PaymentTermD) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{6}
}

func (x *PaymentTermD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentTermD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PaymentTermD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PaymentTermD) GetPtId() string {
	if x != nil {
		return x.PtId
	}
	return ""
}

func (x *PaymentTermD) GetPrepaidPaymentReferenceId() string {
	if x != nil {
		return x.PrepaidPaymentReferenceId
	}
	return ""
}

func (x *PaymentTermD) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PaymentTermD) GetReferenceEventCode() string {
	if x != nil {
		return x.ReferenceEventCode
	}
	return ""
}

func (x *PaymentTermD) GetSettlementDiscountPercent() float32 {
	if x != nil {
		return x.SettlementDiscountPercent
	}
	return 0
}

func (x *PaymentTermD) GetPenaltySurchargePercent() float32 {
	if x != nil {
		return x.PenaltySurchargePercent
	}
	return 0
}

func (x *PaymentTermD) GetPaymentPercent() float32 {
	if x != nil {
		return x.PaymentPercent
	}
	return 0
}

func (x *PaymentTermD) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentTermD) GetSettlementDiscountAmount() float64 {
	if x != nil {
		return x.SettlementDiscountAmount
	}
	return 0
}

func (x *PaymentTermD) GetPenaltyAmount() float64 {
	if x != nil {
		return x.PenaltyAmount
	}
	return 0
}

func (x *PaymentTermD) GetPaymentTermsDetailsURI() string {
	if x != nil {
		return x.PaymentTermsDetailsURI
	}
	return ""
}

func (x *PaymentTermD) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

type PaymentTermT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentDueDate            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	InstallmentDueDate        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=installment_due_date,json=installmentDueDate,proto3" json:"installment_due_date,omitempty"`
	SettlementPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=settlement_period_start_date,json=settlementPeriodStartDate,proto3" json:"settlement_period_start_date,omitempty"`
	SettlementPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=settlement_period_end_date,json=settlementPeriodEndDate,proto3" json:"settlement_period_end_date,omitempty"`
	PenaltyPeriodStartDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=penalty_period_start_date,json=penaltyPeriodStartDate,proto3" json:"penalty_period_start_date,omitempty"`
	PenaltyPeriodEndDate      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=penalty_period_end_date,json=penaltyPeriodEndDate,proto3" json:"penalty_period_end_date,omitempty"`
	ValidityPeriodStartDate   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=validity_period_start_date,json=validityPeriodStartDate,proto3" json:"validity_period_start_date,omitempty"`
	ValidityPeriodEndDate     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=validity_period_end_date,json=validityPeriodEndDate,proto3" json:"validity_period_end_date,omitempty"`
}

func (x *PaymentTermT) Reset() {
	*x = PaymentTermT{}
	mi := &file_payment_v1_payment_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentTermT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentTermT) ProtoMessage() {}

func (x *PaymentTermT) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentTermT.ProtoReflect.Descriptor instead.
func (*PaymentTermT) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{7}
}

func (x *PaymentTermT) GetPaymentDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

func (x *PaymentTermT) GetInstallmentDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InstallmentDueDate
	}
	return nil
}

func (x *PaymentTermT) GetSettlementPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SettlementPeriodStartDate
	}
	return nil
}

func (x *PaymentTermT) GetSettlementPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SettlementPeriodEndDate
	}
	return nil
}

func (x *PaymentTermT) GetPenaltyPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PenaltyPeriodStartDate
	}
	return nil
}

func (x *PaymentTermT) GetPenaltyPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PenaltyPeriodEndDate
	}
	return nil
}

func (x *PaymentTermT) GetValidityPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidityPeriodStartDate
	}
	return nil
}

func (x *PaymentTermT) GetValidityPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidityPeriodEndDate
	}
	return nil
}

type CreatePaymentTermRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PtId                      string  `protobuf:"bytes,1,opt,name=pt_id,json=ptId,proto3" json:"pt_id,omitempty"`
	PrepaidPaymentReferenceId string  `protobuf:"bytes,2,opt,name=prepaid_payment_reference_id,json=prepaidPaymentReferenceId,proto3" json:"prepaid_payment_reference_id,omitempty"`
	Note                      string  `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	ReferenceEventCode        string  `protobuf:"bytes,4,opt,name=reference_event_code,json=referenceEventCode,proto3" json:"reference_event_code,omitempty"`
	SettlementDiscountPercent float32 `protobuf:"fixed32,5,opt,name=settlement_discount_percent,json=settlementDiscountPercent,proto3" json:"settlement_discount_percent,omitempty"`
	PenaltySurchargePercent   float32 `protobuf:"fixed32,6,opt,name=penalty_surcharge_percent,json=penaltySurchargePercent,proto3" json:"penalty_surcharge_percent,omitempty"`
	PaymentPercent            float32 `protobuf:"fixed32,7,opt,name=payment_percent,json=paymentPercent,proto3" json:"payment_percent,omitempty"`
	Amount                    float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	SettlementDiscountAmount  float64 `protobuf:"fixed64,9,opt,name=settlement_discount_amount,json=settlementDiscountAmount,proto3" json:"settlement_discount_amount,omitempty"`
	PenaltyAmount             float64 `protobuf:"fixed64,10,opt,name=penalty_amount,json=penaltyAmount,proto3" json:"penalty_amount,omitempty"`
	PaymentTermsDetailsURI    string  `protobuf:"bytes,11,opt,name=payment_terms_details_u_r_i,json=paymentTermsDetailsURI,proto3" json:"payment_terms_details_u_r_i,omitempty"`
	PaymentDueDate            string  `protobuf:"bytes,12,opt,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	InstallmentDueDate        string  `protobuf:"bytes,13,opt,name=installment_due_date,json=installmentDueDate,proto3" json:"installment_due_date,omitempty"`
	SettlementPeriodStartDate string  `protobuf:"bytes,14,opt,name=settlement_period_start_date,json=settlementPeriodStartDate,proto3" json:"settlement_period_start_date,omitempty"`
	SettlementPeriodEndDate   string  `protobuf:"bytes,15,opt,name=settlement_period_end_date,json=settlementPeriodEndDate,proto3" json:"settlement_period_end_date,omitempty"`
	PenaltyPeriodStartDate    string  `protobuf:"bytes,16,opt,name=penalty_period_start_date,json=penaltyPeriodStartDate,proto3" json:"penalty_period_start_date,omitempty"`
	PenaltyPeriodEndDate      string  `protobuf:"bytes,17,opt,name=penalty_period_end_date,json=penaltyPeriodEndDate,proto3" json:"penalty_period_end_date,omitempty"`
	ExchangeRate              float64 `protobuf:"fixed64,18,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	ValidityPeriodStartDate   string  `protobuf:"bytes,19,opt,name=validity_period_start_date,json=validityPeriodStartDate,proto3" json:"validity_period_start_date,omitempty"`
	ValidityPeriodEndDate     string  `protobuf:"bytes,20,opt,name=validity_period_end_date,json=validityPeriodEndDate,proto3" json:"validity_period_end_date,omitempty"`
	UserId                    string  `protobuf:"bytes,21,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string  `protobuf:"bytes,22,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string  `protobuf:"bytes,23,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePaymentTermRequest) Reset() {
	*x = CreatePaymentTermRequest{}
	mi := &file_payment_v1_payment_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentTermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentTermRequest) ProtoMessage() {}

func (x *CreatePaymentTermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentTermRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentTermRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{8}
}

func (x *CreatePaymentTermRequest) GetPtId() string {
	if x != nil {
		return x.PtId
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetPrepaidPaymentReferenceId() string {
	if x != nil {
		return x.PrepaidPaymentReferenceId
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetReferenceEventCode() string {
	if x != nil {
		return x.ReferenceEventCode
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetSettlementDiscountPercent() float32 {
	if x != nil {
		return x.SettlementDiscountPercent
	}
	return 0
}

func (x *CreatePaymentTermRequest) GetPenaltySurchargePercent() float32 {
	if x != nil {
		return x.PenaltySurchargePercent
	}
	return 0
}

func (x *CreatePaymentTermRequest) GetPaymentPercent() float32 {
	if x != nil {
		return x.PaymentPercent
	}
	return 0
}

func (x *CreatePaymentTermRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreatePaymentTermRequest) GetSettlementDiscountAmount() float64 {
	if x != nil {
		return x.SettlementDiscountAmount
	}
	return 0
}

func (x *CreatePaymentTermRequest) GetPenaltyAmount() float64 {
	if x != nil {
		return x.PenaltyAmount
	}
	return 0
}

func (x *CreatePaymentTermRequest) GetPaymentTermsDetailsURI() string {
	if x != nil {
		return x.PaymentTermsDetailsURI
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetPaymentDueDate() string {
	if x != nil {
		return x.PaymentDueDate
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetInstallmentDueDate() string {
	if x != nil {
		return x.InstallmentDueDate
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetSettlementPeriodStartDate() string {
	if x != nil {
		return x.SettlementPeriodStartDate
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetSettlementPeriodEndDate() string {
	if x != nil {
		return x.SettlementPeriodEndDate
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetPenaltyPeriodStartDate() string {
	if x != nil {
		return x.PenaltyPeriodStartDate
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetPenaltyPeriodEndDate() string {
	if x != nil {
		return x.PenaltyPeriodEndDate
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *CreatePaymentTermRequest) GetValidityPeriodStartDate() string {
	if x != nil {
		return x.ValidityPeriodStartDate
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetValidityPeriodEndDate() string {
	if x != nil {
		return x.ValidityPeriodEndDate
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePaymentTermRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePaymentTermResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentTerm *PaymentTerm `protobuf:"bytes,1,opt,name=payment_term,json=paymentTerm,proto3" json:"payment_term,omitempty"`
}

func (x *CreatePaymentTermResponse) Reset() {
	*x = CreatePaymentTermResponse{}
	mi := &file_payment_v1_payment_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentTermResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentTermResponse) ProtoMessage() {}

func (x *CreatePaymentTermResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentTermResponse.ProtoReflect.Descriptor instead.
func (*CreatePaymentTermResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePaymentTermResponse) GetPaymentTerm() *PaymentTerm {
	if x != nil {
		return x.PaymentTerm
	}
	return nil
}

type PaymentMean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMeanD *PaymentMeanD `protobuf:"bytes,1,opt,name=payment_mean_d,json=paymentMeanD,proto3" json:"payment_mean_d,omitempty"`
	PaymentMeanT *PaymentMeanT `protobuf:"bytes,2,opt,name=payment_mean_t,json=paymentMeanT,proto3" json:"payment_mean_t,omitempty"`
	CrUpdUser    *v1.CrUpdUser `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime    *v1.CrUpdTime `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	Payments     []*Payment    `protobuf:"bytes,5,rep,name=payments,proto3" json:"payments,omitempty"`
}

func (x *PaymentMean) Reset() {
	*x = PaymentMean{}
	mi := &file_payment_v1_payment_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMean) ProtoMessage() {}

func (x *PaymentMean) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMean.ProtoReflect.Descriptor instead.
func (*PaymentMean) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{10}
}

func (x *PaymentMean) GetPaymentMeanD() *PaymentMeanD {
	if x != nil {
		return x.PaymentMeanD
	}
	return nil
}

func (x *PaymentMean) GetPaymentMeanT() *PaymentMeanT {
	if x != nil {
		return x.PaymentMeanT
	}
	return nil
}

func (x *PaymentMean) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PaymentMean) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *PaymentMean) GetPayments() []*Payment {
	if x != nil {
		return x.Payments
	}
	return nil
}

type PaymentMeanD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                   []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                     string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	PmId                    string `protobuf:"bytes,4,opt,name=pm_id,json=pmId,proto3" json:"pm_id,omitempty"`
	PaymentMeansCode        string `protobuf:"bytes,5,opt,name=payment_means_code,json=paymentMeansCode,proto3" json:"payment_means_code,omitempty"`
	PaymentChannelCode      string `protobuf:"bytes,6,opt,name=payment_channel_code,json=paymentChannelCode,proto3" json:"payment_channel_code,omitempty"`
	InstructionId           string `protobuf:"bytes,7,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	InstructionNote         string `protobuf:"bytes,8,opt,name=instruction_note,json=instructionNote,proto3" json:"instruction_note,omitempty"`
	CreditAccountId         uint32 `protobuf:"varint,9,opt,name=credit_account_id,json=creditAccountId,proto3" json:"credit_account_id,omitempty"`
	PaymentTermId           uint32 `protobuf:"varint,10,opt,name=payment_term_id,json=paymentTermId,proto3" json:"payment_term_id,omitempty"`
	PaymentMandateId        uint32 `protobuf:"varint,11,opt,name=payment_mandate_id,json=paymentMandateId,proto3" json:"payment_mandate_id,omitempty"`
	TradeFinancingId        uint32 `protobuf:"varint,12,opt,name=trade_financing_id,json=tradeFinancingId,proto3" json:"trade_financing_id,omitempty"`
	PayerFinancialAccountId uint32 `protobuf:"varint,13,opt,name=payer_financial_account_id,json=payerFinancialAccountId,proto3" json:"payer_financial_account_id,omitempty"`
	PayeeFinancialAccountId uint32 `protobuf:"varint,14,opt,name=payee_financial_account_id,json=payeeFinancialAccountId,proto3" json:"payee_financial_account_id,omitempty"`
}

func (x *PaymentMeanD) Reset() {
	*x = PaymentMeanD{}
	mi := &file_payment_v1_payment_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMeanD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMeanD) ProtoMessage() {}

func (x *PaymentMeanD) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMeanD.ProtoReflect.Descriptor instead.
func (*PaymentMeanD) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{11}
}

func (x *PaymentMeanD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentMeanD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PaymentMeanD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PaymentMeanD) GetPmId() string {
	if x != nil {
		return x.PmId
	}
	return ""
}

func (x *PaymentMeanD) GetPaymentMeansCode() string {
	if x != nil {
		return x.PaymentMeansCode
	}
	return ""
}

func (x *PaymentMeanD) GetPaymentChannelCode() string {
	if x != nil {
		return x.PaymentChannelCode
	}
	return ""
}

func (x *PaymentMeanD) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

func (x *PaymentMeanD) GetInstructionNote() string {
	if x != nil {
		return x.InstructionNote
	}
	return ""
}

func (x *PaymentMeanD) GetCreditAccountId() uint32 {
	if x != nil {
		return x.CreditAccountId
	}
	return 0
}

func (x *PaymentMeanD) GetPaymentTermId() uint32 {
	if x != nil {
		return x.PaymentTermId
	}
	return 0
}

func (x *PaymentMeanD) GetPaymentMandateId() uint32 {
	if x != nil {
		return x.PaymentMandateId
	}
	return 0
}

func (x *PaymentMeanD) GetTradeFinancingId() uint32 {
	if x != nil {
		return x.TradeFinancingId
	}
	return 0
}

func (x *PaymentMeanD) GetPayerFinancialAccountId() uint32 {
	if x != nil {
		return x.PayerFinancialAccountId
	}
	return 0
}

func (x *PaymentMeanD) GetPayeeFinancialAccountId() uint32 {
	if x != nil {
		return x.PayeeFinancialAccountId
	}
	return 0
}

type PaymentMeanT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentDueDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
}

func (x *PaymentMeanT) Reset() {
	*x = PaymentMeanT{}
	mi := &file_payment_v1_payment_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMeanT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMeanT) ProtoMessage() {}

func (x *PaymentMeanT) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMeanT.ProtoReflect.Descriptor instead.
func (*PaymentMeanT) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{12}
}

func (x *PaymentMeanT) GetPaymentDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

type CreatePaymentMeanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmId                    string `protobuf:"bytes,1,opt,name=pm_id,json=pmId,proto3" json:"pm_id,omitempty"`
	PaymentMeansCode        string `protobuf:"bytes,2,opt,name=payment_means_code,json=paymentMeansCode,proto3" json:"payment_means_code,omitempty"`
	PaymentDueDate          string `protobuf:"bytes,3,opt,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	PaymentChannelCode      string `protobuf:"bytes,4,opt,name=payment_channel_code,json=paymentChannelCode,proto3" json:"payment_channel_code,omitempty"`
	InstructionId           string `protobuf:"bytes,5,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	InstructionNote         string `protobuf:"bytes,6,opt,name=instruction_note,json=instructionNote,proto3" json:"instruction_note,omitempty"`
	CreditAccountId         uint32 `protobuf:"varint,7,opt,name=credit_account_id,json=creditAccountId,proto3" json:"credit_account_id,omitempty"`
	PaymentTermId           uint32 `protobuf:"varint,8,opt,name=payment_term_id,json=paymentTermId,proto3" json:"payment_term_id,omitempty"`
	PaymentMandateId        uint32 `protobuf:"varint,9,opt,name=payment_mandate_id,json=paymentMandateId,proto3" json:"payment_mandate_id,omitempty"`
	TradeFinancingId        uint32 `protobuf:"varint,10,opt,name=trade_financing_id,json=tradeFinancingId,proto3" json:"trade_financing_id,omitempty"`
	PayerFinancialAccountId uint32 `protobuf:"varint,11,opt,name=payer_financial_account_id,json=payerFinancialAccountId,proto3" json:"payer_financial_account_id,omitempty"`
	PayeeFinancialAccountId uint32 `protobuf:"varint,12,opt,name=payee_financial_account_id,json=payeeFinancialAccountId,proto3" json:"payee_financial_account_id,omitempty"`
	UserId                  string `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail               string `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId               string `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePaymentMeanRequest) Reset() {
	*x = CreatePaymentMeanRequest{}
	mi := &file_payment_v1_payment_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentMeanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentMeanRequest) ProtoMessage() {}

func (x *CreatePaymentMeanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentMeanRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentMeanRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{13}
}

func (x *CreatePaymentMeanRequest) GetPmId() string {
	if x != nil {
		return x.PmId
	}
	return ""
}

func (x *CreatePaymentMeanRequest) GetPaymentMeansCode() string {
	if x != nil {
		return x.PaymentMeansCode
	}
	return ""
}

func (x *CreatePaymentMeanRequest) GetPaymentDueDate() string {
	if x != nil {
		return x.PaymentDueDate
	}
	return ""
}

func (x *CreatePaymentMeanRequest) GetPaymentChannelCode() string {
	if x != nil {
		return x.PaymentChannelCode
	}
	return ""
}

func (x *CreatePaymentMeanRequest) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

func (x *CreatePaymentMeanRequest) GetInstructionNote() string {
	if x != nil {
		return x.InstructionNote
	}
	return ""
}

func (x *CreatePaymentMeanRequest) GetCreditAccountId() uint32 {
	if x != nil {
		return x.CreditAccountId
	}
	return 0
}

func (x *CreatePaymentMeanRequest) GetPaymentTermId() uint32 {
	if x != nil {
		return x.PaymentTermId
	}
	return 0
}

func (x *CreatePaymentMeanRequest) GetPaymentMandateId() uint32 {
	if x != nil {
		return x.PaymentMandateId
	}
	return 0
}

func (x *CreatePaymentMeanRequest) GetTradeFinancingId() uint32 {
	if x != nil {
		return x.TradeFinancingId
	}
	return 0
}

func (x *CreatePaymentMeanRequest) GetPayerFinancialAccountId() uint32 {
	if x != nil {
		return x.PayerFinancialAccountId
	}
	return 0
}

func (x *CreatePaymentMeanRequest) GetPayeeFinancialAccountId() uint32 {
	if x != nil {
		return x.PayeeFinancialAccountId
	}
	return 0
}

func (x *CreatePaymentMeanRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePaymentMeanRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePaymentMeanRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePaymentMeanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMean *PaymentMean `protobuf:"bytes,1,opt,name=payment_mean,json=paymentMean,proto3" json:"payment_mean,omitempty"`
}

func (x *CreatePaymentMeanResponse) Reset() {
	*x = CreatePaymentMeanResponse{}
	mi := &file_payment_v1_payment_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentMeanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentMeanResponse) ProtoMessage() {}

func (x *CreatePaymentMeanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentMeanResponse.ProtoReflect.Descriptor instead.
func (*CreatePaymentMeanResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{14}
}

func (x *CreatePaymentMeanResponse) GetPaymentMean() *PaymentMean {
	if x != nil {
		return x.PaymentMean
	}
	return nil
}

type PaymentMandate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMandateD       *PaymentMandateD        `protobuf:"bytes,1,opt,name=payment_mandate_d,json=paymentMandateD,proto3" json:"payment_mandate_d,omitempty"`
	PaymentMandateT       *PaymentMandateT        `protobuf:"bytes,2,opt,name=payment_mandate_t,json=paymentMandateT,proto3" json:"payment_mandate_t,omitempty"`
	CrUpdUser             *v1.CrUpdUser           `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime             *v1.CrUpdTime           `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	PaymentMandateClauses []*PaymentMandateClause `protobuf:"bytes,5,rep,name=payment_mandate_clauses,json=paymentMandateClauses,proto3" json:"payment_mandate_clauses,omitempty"`
}

func (x *PaymentMandate) Reset() {
	*x = PaymentMandate{}
	mi := &file_payment_v1_payment_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMandate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMandate) ProtoMessage() {}

func (x *PaymentMandate) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMandate.ProtoReflect.Descriptor instead.
func (*PaymentMandate) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{15}
}

func (x *PaymentMandate) GetPaymentMandateD() *PaymentMandateD {
	if x != nil {
		return x.PaymentMandateD
	}
	return nil
}

func (x *PaymentMandate) GetPaymentMandateT() *PaymentMandateT {
	if x != nil {
		return x.PaymentMandateT
	}
	return nil
}

func (x *PaymentMandate) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PaymentMandate) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *PaymentMandate) GetPaymentMandateClauses() []*PaymentMandateClause {
	if x != nil {
		return x.PaymentMandateClauses
	}
	return nil
}

type PaymentMandateD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                             []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                               string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	PmdId                             string  `protobuf:"bytes,4,opt,name=pmd_id,json=pmdId,proto3" json:"pmd_id,omitempty"`
	MandateTypeCode                   string  `protobuf:"bytes,5,opt,name=mandate_type_code,json=mandateTypeCode,proto3" json:"mandate_type_code,omitempty"`
	MaximumPaymentInstructionsNumeric uint64  `protobuf:"varint,6,opt,name=maximum_payment_instructions_numeric,json=maximumPaymentInstructionsNumeric,proto3" json:"maximum_payment_instructions_numeric,omitempty"`
	MaximumPaidAmount                 float64 `protobuf:"fixed64,7,opt,name=maximum_paid_amount,json=maximumPaidAmount,proto3" json:"maximum_paid_amount,omitempty"`
	SignatureId                       string  `protobuf:"bytes,8,opt,name=signature_id,json=signatureId,proto3" json:"signature_id,omitempty"`
	PayerPartyId                      uint32  `protobuf:"varint,9,opt,name=payer_party_id,json=payerPartyId,proto3" json:"payer_party_id,omitempty"`
	PayerFinancialAccountId           uint32  `protobuf:"varint,10,opt,name=payer_financial_account_id,json=payerFinancialAccountId,proto3" json:"payer_financial_account_id,omitempty"`
	Clause                            string  `protobuf:"bytes,11,opt,name=clause,proto3" json:"clause,omitempty"`
}

func (x *PaymentMandateD) Reset() {
	*x = PaymentMandateD{}
	mi := &file_payment_v1_payment_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMandateD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMandateD) ProtoMessage() {}

func (x *PaymentMandateD) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMandateD.ProtoReflect.Descriptor instead.
func (*PaymentMandateD) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{16}
}

func (x *PaymentMandateD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentMandateD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PaymentMandateD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PaymentMandateD) GetPmdId() string {
	if x != nil {
		return x.PmdId
	}
	return ""
}

func (x *PaymentMandateD) GetMandateTypeCode() string {
	if x != nil {
		return x.MandateTypeCode
	}
	return ""
}

func (x *PaymentMandateD) GetMaximumPaymentInstructionsNumeric() uint64 {
	if x != nil {
		return x.MaximumPaymentInstructionsNumeric
	}
	return 0
}

func (x *PaymentMandateD) GetMaximumPaidAmount() float64 {
	if x != nil {
		return x.MaximumPaidAmount
	}
	return 0
}

func (x *PaymentMandateD) GetSignatureId() string {
	if x != nil {
		return x.SignatureId
	}
	return ""
}

func (x *PaymentMandateD) GetPayerPartyId() uint32 {
	if x != nil {
		return x.PayerPartyId
	}
	return 0
}

func (x *PaymentMandateD) GetPayerFinancialAccountId() uint32 {
	if x != nil {
		return x.PayerFinancialAccountId
	}
	return 0
}

func (x *PaymentMandateD) GetClause() string {
	if x != nil {
		return x.Clause
	}
	return ""
}

type PaymentMandateT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidityPeriodStartDate        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=validity_period_start_date,json=validityPeriodStartDate,proto3" json:"validity_period_start_date,omitempty"`
	ValidityPeriodEndDate          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=validity_period_end_date,json=validityPeriodEndDate,proto3" json:"validity_period_end_date,omitempty"`
	PaymentReversalPeriodStartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=payment_reversal_period_start_date,json=paymentReversalPeriodStartDate,proto3" json:"payment_reversal_period_start_date,omitempty"`
	PaymentReversalPeriodEndDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=payment_reversal_period_end_date,json=paymentReversalPeriodEndDate,proto3" json:"payment_reversal_period_end_date,omitempty"`
}

func (x *PaymentMandateT) Reset() {
	*x = PaymentMandateT{}
	mi := &file_payment_v1_payment_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMandateT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMandateT) ProtoMessage() {}

func (x *PaymentMandateT) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMandateT.ProtoReflect.Descriptor instead.
func (*PaymentMandateT) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{17}
}

func (x *PaymentMandateT) GetValidityPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidityPeriodStartDate
	}
	return nil
}

func (x *PaymentMandateT) GetValidityPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidityPeriodEndDate
	}
	return nil
}

func (x *PaymentMandateT) GetPaymentReversalPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentReversalPeriodStartDate
	}
	return nil
}

func (x *PaymentMandateT) GetPaymentReversalPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentReversalPeriodEndDate
	}
	return nil
}

type CreatePaymentMandateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmdId                             string  `protobuf:"bytes,1,opt,name=pmd_id,json=pmdId,proto3" json:"pmd_id,omitempty"`
	MandateTypeCode                   string  `protobuf:"bytes,2,opt,name=mandate_type_code,json=mandateTypeCode,proto3" json:"mandate_type_code,omitempty"`
	MaximumPaymentInstructionsNumeric uint64  `protobuf:"varint,3,opt,name=maximum_payment_instructions_numeric,json=maximumPaymentInstructionsNumeric,proto3" json:"maximum_payment_instructions_numeric,omitempty"`
	MaximumPaidAmount                 float64 `protobuf:"fixed64,4,opt,name=maximum_paid_amount,json=maximumPaidAmount,proto3" json:"maximum_paid_amount,omitempty"`
	SignatureId                       string  `protobuf:"bytes,5,opt,name=signature_id,json=signatureId,proto3" json:"signature_id,omitempty"`
	PayerPartyId                      uint32  `protobuf:"varint,6,opt,name=payer_party_id,json=payerPartyId,proto3" json:"payer_party_id,omitempty"`
	PayerFinancialAccountId           uint32  `protobuf:"varint,7,opt,name=payer_financial_account_id,json=payerFinancialAccountId,proto3" json:"payer_financial_account_id,omitempty"`
	ValidityPeriodStartDate           string  `protobuf:"bytes,8,opt,name=validity_period_start_date,json=validityPeriodStartDate,proto3" json:"validity_period_start_date,omitempty"`
	ValidityPeriodEndDate             string  `protobuf:"bytes,9,opt,name=validity_period_end_date,json=validityPeriodEndDate,proto3" json:"validity_period_end_date,omitempty"`
	PaymentReversalPeriodStartDate    string  `protobuf:"bytes,10,opt,name=payment_reversal_period_start_date,json=paymentReversalPeriodStartDate,proto3" json:"payment_reversal_period_start_date,omitempty"`
	PaymentReversalPeriodEndDate      string  `protobuf:"bytes,11,opt,name=payment_reversal_period_end_date,json=paymentReversalPeriodEndDate,proto3" json:"payment_reversal_period_end_date,omitempty"`
	Clause                            string  `protobuf:"bytes,12,opt,name=clause,proto3" json:"clause,omitempty"`
	UserId                            string  `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                         string  `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                         string  `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePaymentMandateRequest) Reset() {
	*x = CreatePaymentMandateRequest{}
	mi := &file_payment_v1_payment_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentMandateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentMandateRequest) ProtoMessage() {}

func (x *CreatePaymentMandateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentMandateRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentMandateRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{18}
}

func (x *CreatePaymentMandateRequest) GetPmdId() string {
	if x != nil {
		return x.PmdId
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetMandateTypeCode() string {
	if x != nil {
		return x.MandateTypeCode
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetMaximumPaymentInstructionsNumeric() uint64 {
	if x != nil {
		return x.MaximumPaymentInstructionsNumeric
	}
	return 0
}

func (x *CreatePaymentMandateRequest) GetMaximumPaidAmount() float64 {
	if x != nil {
		return x.MaximumPaidAmount
	}
	return 0
}

func (x *CreatePaymentMandateRequest) GetSignatureId() string {
	if x != nil {
		return x.SignatureId
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetPayerPartyId() uint32 {
	if x != nil {
		return x.PayerPartyId
	}
	return 0
}

func (x *CreatePaymentMandateRequest) GetPayerFinancialAccountId() uint32 {
	if x != nil {
		return x.PayerFinancialAccountId
	}
	return 0
}

func (x *CreatePaymentMandateRequest) GetValidityPeriodStartDate() string {
	if x != nil {
		return x.ValidityPeriodStartDate
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetValidityPeriodEndDate() string {
	if x != nil {
		return x.ValidityPeriodEndDate
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetPaymentReversalPeriodStartDate() string {
	if x != nil {
		return x.PaymentReversalPeriodStartDate
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetPaymentReversalPeriodEndDate() string {
	if x != nil {
		return x.PaymentReversalPeriodEndDate
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetClause() string {
	if x != nil {
		return x.Clause
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePaymentMandateRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePaymentMandateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMandate *PaymentMandate `protobuf:"bytes,1,opt,name=payment_mandate,json=paymentMandate,proto3" json:"payment_mandate,omitempty"`
}

func (x *CreatePaymentMandateResponse) Reset() {
	*x = CreatePaymentMandateResponse{}
	mi := &file_payment_v1_payment_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentMandateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentMandateResponse) ProtoMessage() {}

func (x *CreatePaymentMandateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentMandateResponse.ProtoReflect.Descriptor instead.
func (*CreatePaymentMandateResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{19}
}

func (x *CreatePaymentMandateResponse) GetPaymentMandate() *PaymentMandate {
	if x != nil {
		return x.PaymentMandate
	}
	return nil
}

type PaymentMandateClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           uint32                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PmClId                       string                         `protobuf:"bytes,2,opt,name=pm_cl_id,json=pmClId,proto3" json:"pm_cl_id,omitempty"`
	PaymentMandateId             uint32                         `protobuf:"varint,3,opt,name=payment_mandate_id,json=paymentMandateId,proto3" json:"payment_mandate_id,omitempty"`
	PaymentMandateClauseContents []*PaymentMandateClauseContent `protobuf:"bytes,4,rep,name=payment_mandate_clause_contents,json=paymentMandateClauseContents,proto3" json:"payment_mandate_clause_contents,omitempty"`
}

func (x *PaymentMandateClause) Reset() {
	*x = PaymentMandateClause{}
	mi := &file_payment_v1_payment_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMandateClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMandateClause) ProtoMessage() {}

func (x *PaymentMandateClause) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMandateClause.ProtoReflect.Descriptor instead.
func (*PaymentMandateClause) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{20}
}

func (x *PaymentMandateClause) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentMandateClause) GetPmClId() string {
	if x != nil {
		return x.PmClId
	}
	return ""
}

func (x *PaymentMandateClause) GetPaymentMandateId() uint32 {
	if x != nil {
		return x.PaymentMandateId
	}
	return 0
}

func (x *PaymentMandateClause) GetPaymentMandateClauseContents() []*PaymentMandateClauseContent {
	if x != nil {
		return x.PaymentMandateClauseContents
	}
	return nil
}

type CreatePaymentMandateClauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmClId           string `protobuf:"bytes,1,opt,name=pm_cl_id,json=pmClId,proto3" json:"pm_cl_id,omitempty"`
	PaymentMandateId uint32 `protobuf:"varint,2,opt,name=payment_mandate_id,json=paymentMandateId,proto3" json:"payment_mandate_id,omitempty"`
	UserId           string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail        string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId        string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePaymentMandateClauseRequest) Reset() {
	*x = CreatePaymentMandateClauseRequest{}
	mi := &file_payment_v1_payment_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentMandateClauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentMandateClauseRequest) ProtoMessage() {}

func (x *CreatePaymentMandateClauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentMandateClauseRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentMandateClauseRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{21}
}

func (x *CreatePaymentMandateClauseRequest) GetPmClId() string {
	if x != nil {
		return x.PmClId
	}
	return ""
}

func (x *CreatePaymentMandateClauseRequest) GetPaymentMandateId() uint32 {
	if x != nil {
		return x.PaymentMandateId
	}
	return 0
}

func (x *CreatePaymentMandateClauseRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePaymentMandateClauseRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePaymentMandateClauseRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePaymentMandateClauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMandateClause *PaymentMandateClause `protobuf:"bytes,1,opt,name=payment_mandate_clause,json=paymentMandateClause,proto3" json:"payment_mandate_clause,omitempty"`
}

func (x *CreatePaymentMandateClauseResponse) Reset() {
	*x = CreatePaymentMandateClauseResponse{}
	mi := &file_payment_v1_payment_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentMandateClauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentMandateClauseResponse) ProtoMessage() {}

func (x *CreatePaymentMandateClauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentMandateClauseResponse.ProtoReflect.Descriptor instead.
func (*CreatePaymentMandateClauseResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{22}
}

func (x *CreatePaymentMandateClauseResponse) GetPaymentMandateClause() *PaymentMandateClause {
	if x != nil {
		return x.PaymentMandateClause
	}
	return nil
}

type PaymentMandateClauseContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMandateClauseContentD *PaymentMandateClauseContentD `protobuf:"bytes,1,opt,name=payment_mandate_clause_content_d,json=paymentMandateClauseContentD,proto3" json:"payment_mandate_clause_content_d,omitempty"`
	CrUpdUser                    *v1.CrUpdUser                 `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                    *v1.CrUpdTime                 `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *PaymentMandateClauseContent) Reset() {
	*x = PaymentMandateClauseContent{}
	mi := &file_payment_v1_payment_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMandateClauseContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMandateClauseContent) ProtoMessage() {}

func (x *PaymentMandateClauseContent) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMandateClauseContent.ProtoReflect.Descriptor instead.
func (*PaymentMandateClauseContent) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{23}
}

func (x *PaymentMandateClauseContent) GetPaymentMandateClauseContentD() *PaymentMandateClauseContentD {
	if x != nil {
		return x.PaymentMandateClauseContentD
	}
	return nil
}

func (x *PaymentMandateClauseContent) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PaymentMandateClauseContent) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type PaymentMandateClauseContentD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content                string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	PaymentMandateClauseId uint32 `protobuf:"varint,3,opt,name=payment_mandate_clause_id,json=paymentMandateClauseId,proto3" json:"payment_mandate_clause_id,omitempty"`
}

func (x *PaymentMandateClauseContentD) Reset() {
	*x = PaymentMandateClauseContentD{}
	mi := &file_payment_v1_payment_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMandateClauseContentD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMandateClauseContentD) ProtoMessage() {}

func (x *PaymentMandateClauseContentD) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMandateClauseContentD.ProtoReflect.Descriptor instead.
func (*PaymentMandateClauseContentD) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{24}
}

func (x *PaymentMandateClauseContentD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentMandateClauseContentD) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PaymentMandateClauseContentD) GetPaymentMandateClauseId() uint32 {
	if x != nil {
		return x.PaymentMandateClauseId
	}
	return 0
}

type CreatePaymentMandateClauseContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content                string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	PaymentMandateClauseId uint32 `protobuf:"varint,2,opt,name=payment_mandate_clause_id,json=paymentMandateClauseId,proto3" json:"payment_mandate_clause_id,omitempty"`
	UserId                 string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreatePaymentMandateClauseContentRequest) Reset() {
	*x = CreatePaymentMandateClauseContentRequest{}
	mi := &file_payment_v1_payment_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentMandateClauseContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentMandateClauseContentRequest) ProtoMessage() {}

func (x *CreatePaymentMandateClauseContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentMandateClauseContentRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentMandateClauseContentRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{25}
}

func (x *CreatePaymentMandateClauseContentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreatePaymentMandateClauseContentRequest) GetPaymentMandateClauseId() uint32 {
	if x != nil {
		return x.PaymentMandateClauseId
	}
	return 0
}

func (x *CreatePaymentMandateClauseContentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePaymentMandateClauseContentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePaymentMandateClauseContentRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreatePaymentMandateClauseContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMandateClauseContent *PaymentMandateClauseContent `protobuf:"bytes,1,opt,name=payment_mandate_clause_content,json=paymentMandateClauseContent,proto3" json:"payment_mandate_clause_content,omitempty"`
}

func (x *CreatePaymentMandateClauseContentResponse) Reset() {
	*x = CreatePaymentMandateClauseContentResponse{}
	mi := &file_payment_v1_payment_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePaymentMandateClauseContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentMandateClauseContentResponse) ProtoMessage() {}

func (x *CreatePaymentMandateClauseContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentMandateClauseContentResponse.ProtoReflect.Descriptor instead.
func (*CreatePaymentMandateClauseContentResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{26}
}

func (x *CreatePaymentMandateClauseContentResponse) GetPaymentMandateClauseContent() *PaymentMandateClauseContent {
	if x != nil {
		return x.PaymentMandateClauseContent
	}
	return nil
}

var File_payment_v1_payment_proto protoreflect.FileDescriptor

var file_payment_v1_payment_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdb, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x31,
	0x0a, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc6, 0x01,
	0x0a, 0x08, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x53, 0x12, 0x11, 0x0a, 0x04, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x69,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xb2, 0x02,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x11, 0x0a, 0x04, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x46, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe8, 0x02, 0x0a, 0x0b, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x52, 0x0c, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x52, 0x0c, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55,
	0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x61, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe7, 0x04, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04,
	0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12,
	0x13, 0x0a, 0x05, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x19, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x5f, 0x72, 0x5f, 0x69, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x52, 0x49, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22,
	0xb0, 0x05, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x54,
	0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x1c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x57, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x17, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x51, 0x0a, 0x17, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a,
	0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xd3, 0x08, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x19, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x5f, 0x72, 0x5f, 0x69, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x52, 0x49, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x72, 0x6d, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x22, 0xaa, 0x02, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61,
	0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x61,
	0x6e, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x61, 0x6e, 0x44, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e,
	0x44, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x61,
	0x6e, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x61, 0x6e, 0x54, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e,
	0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb8,
	0x04, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x70, 0x61, 0x79, 0x65, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x70, 0x61, 0x79, 0x65, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x0c, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x54, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x8c, 0x05, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05,
	0x70, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6d, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x61,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x70, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x61,
	0x79, 0x65, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x70, 0x61, 0x79, 0x65, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x57,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x22, 0xe8, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x52, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x15, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x73, 0x22, 0xac, 0x03, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04,
	0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x6d, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x24, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x21, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x70, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x22, 0x8b, 0x03, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x12, 0x57, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53,
	0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x20, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xe0, 0x05, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x6d, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x24, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x21, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x70, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x4a, 0x0a, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x63, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x08, 0x70, 0x6d, 0x5f, 0x63, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6d, 0x43, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x1c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x08, 0x70, 0x6d, 0x5f, 0x63, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6d, 0x43, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x1b,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x20, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x52,
	0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x49, 0x64, 0x22,
	0xd6, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x32, 0xa5, 0x05, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x61, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x69, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x75, 0x62, 0x6c, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_payment_v1_payment_proto_rawDescOnce sync.Once
	file_payment_v1_payment_proto_rawDescData = file_payment_v1_payment_proto_rawDesc
)

func file_payment_v1_payment_proto_rawDescGZIP() []byte {
	file_payment_v1_payment_proto_rawDescOnce.Do(func() {
		file_payment_v1_payment_proto_rawDescData = protoimpl.X.CompressGZIP(file_payment_v1_payment_proto_rawDescData)
	})
	return file_payment_v1_payment_proto_rawDescData
}

var file_payment_v1_payment_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_payment_v1_payment_proto_goTypes = []any{
	(*Payment)(nil),                                   // 0: payment.v1.Payment
	(*PaymentD)(nil),                                  // 1: payment.v1.PaymentD
	(*PaymentT)(nil),                                  // 2: payment.v1.PaymentT
	(*CreatePaymentRequest)(nil),                      // 3: payment.v1.CreatePaymentRequest
	(*CreatePaymentResponse)(nil),                     // 4: payment.v1.CreatePaymentResponse
	(*PaymentTerm)(nil),                               // 5: payment.v1.PaymentTerm
	(*PaymentTermD)(nil),                              // 6: payment.v1.PaymentTermD
	(*PaymentTermT)(nil),                              // 7: payment.v1.PaymentTermT
	(*CreatePaymentTermRequest)(nil),                  // 8: payment.v1.CreatePaymentTermRequest
	(*CreatePaymentTermResponse)(nil),                 // 9: payment.v1.CreatePaymentTermResponse
	(*PaymentMean)(nil),                               // 10: payment.v1.PaymentMean
	(*PaymentMeanD)(nil),                              // 11: payment.v1.PaymentMeanD
	(*PaymentMeanT)(nil),                              // 12: payment.v1.PaymentMeanT
	(*CreatePaymentMeanRequest)(nil),                  // 13: payment.v1.CreatePaymentMeanRequest
	(*CreatePaymentMeanResponse)(nil),                 // 14: payment.v1.CreatePaymentMeanResponse
	(*PaymentMandate)(nil),                            // 15: payment.v1.PaymentMandate
	(*PaymentMandateD)(nil),                           // 16: payment.v1.PaymentMandateD
	(*PaymentMandateT)(nil),                           // 17: payment.v1.PaymentMandateT
	(*CreatePaymentMandateRequest)(nil),               // 18: payment.v1.CreatePaymentMandateRequest
	(*CreatePaymentMandateResponse)(nil),              // 19: payment.v1.CreatePaymentMandateResponse
	(*PaymentMandateClause)(nil),                      // 20: payment.v1.PaymentMandateClause
	(*CreatePaymentMandateClauseRequest)(nil),         // 21: payment.v1.CreatePaymentMandateClauseRequest
	(*CreatePaymentMandateClauseResponse)(nil),        // 22: payment.v1.CreatePaymentMandateClauseResponse
	(*PaymentMandateClauseContent)(nil),               // 23: payment.v1.PaymentMandateClauseContent
	(*PaymentMandateClauseContentD)(nil),              // 24: payment.v1.PaymentMandateClauseContentD
	(*CreatePaymentMandateClauseContentRequest)(nil),  // 25: payment.v1.CreatePaymentMandateClauseContentRequest
	(*CreatePaymentMandateClauseContentResponse)(nil), // 26: payment.v1.CreatePaymentMandateClauseContentResponse
	(*v1.CrUpdUser)(nil),                              // 27: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                              // 28: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                     // 29: google.protobuf.Timestamp
}
var file_payment_v1_payment_proto_depIdxs = []int32{
	1,  // 0: payment.v1.Payment.payment_d:type_name -> payment.v1.PaymentD
	2,  // 1: payment.v1.Payment.payment_t:type_name -> payment.v1.PaymentT
	27, // 2: payment.v1.Payment.cr_upd_user:type_name -> common.v1.CrUpdUser
	28, // 3: payment.v1.Payment.cr_upd_time:type_name -> common.v1.CrUpdTime
	29, // 4: payment.v1.PaymentT.received_date:type_name -> google.protobuf.Timestamp
	29, // 5: payment.v1.PaymentT.paid_date:type_name -> google.protobuf.Timestamp
	0,  // 6: payment.v1.CreatePaymentResponse.payment:type_name -> payment.v1.Payment
	6,  // 7: payment.v1.PaymentTerm.payment_term_d:type_name -> payment.v1.PaymentTermD
	7,  // 8: payment.v1.PaymentTerm.payment_term_t:type_name -> payment.v1.PaymentTermT
	27, // 9: payment.v1.PaymentTerm.cr_upd_user:type_name -> common.v1.CrUpdUser
	28, // 10: payment.v1.PaymentTerm.cr_upd_time:type_name -> common.v1.CrUpdTime
	10, // 11: payment.v1.PaymentTerm.payment_means:type_name -> payment.v1.PaymentMean
	0,  // 12: payment.v1.PaymentTerm.payments:type_name -> payment.v1.Payment
	29, // 13: payment.v1.PaymentTermT.payment_due_date:type_name -> google.protobuf.Timestamp
	29, // 14: payment.v1.PaymentTermT.installment_due_date:type_name -> google.protobuf.Timestamp
	29, // 15: payment.v1.PaymentTermT.settlement_period_start_date:type_name -> google.protobuf.Timestamp
	29, // 16: payment.v1.PaymentTermT.settlement_period_end_date:type_name -> google.protobuf.Timestamp
	29, // 17: payment.v1.PaymentTermT.penalty_period_start_date:type_name -> google.protobuf.Timestamp
	29, // 18: payment.v1.PaymentTermT.penalty_period_end_date:type_name -> google.protobuf.Timestamp
	29, // 19: payment.v1.PaymentTermT.validity_period_start_date:type_name -> google.protobuf.Timestamp
	29, // 20: payment.v1.PaymentTermT.validity_period_end_date:type_name -> google.protobuf.Timestamp
	5,  // 21: payment.v1.CreatePaymentTermResponse.payment_term:type_name -> payment.v1.PaymentTerm
	11, // 22: payment.v1.PaymentMean.payment_mean_d:type_name -> payment.v1.PaymentMeanD
	12, // 23: payment.v1.PaymentMean.payment_mean_t:type_name -> payment.v1.PaymentMeanT
	27, // 24: payment.v1.PaymentMean.cr_upd_user:type_name -> common.v1.CrUpdUser
	28, // 25: payment.v1.PaymentMean.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 26: payment.v1.PaymentMean.payments:type_name -> payment.v1.Payment
	29, // 27: payment.v1.PaymentMeanT.payment_due_date:type_name -> google.protobuf.Timestamp
	10, // 28: payment.v1.CreatePaymentMeanResponse.payment_mean:type_name -> payment.v1.PaymentMean
	16, // 29: payment.v1.PaymentMandate.payment_mandate_d:type_name -> payment.v1.PaymentMandateD
	17, // 30: payment.v1.PaymentMandate.payment_mandate_t:type_name -> payment.v1.PaymentMandateT
	27, // 31: payment.v1.PaymentMandate.cr_upd_user:type_name -> common.v1.CrUpdUser
	28, // 32: payment.v1.PaymentMandate.cr_upd_time:type_name -> common.v1.CrUpdTime
	20, // 33: payment.v1.PaymentMandate.payment_mandate_clauses:type_name -> payment.v1.PaymentMandateClause
	29, // 34: payment.v1.PaymentMandateT.validity_period_start_date:type_name -> google.protobuf.Timestamp
	29, // 35: payment.v1.PaymentMandateT.validity_period_end_date:type_name -> google.protobuf.Timestamp
	29, // 36: payment.v1.PaymentMandateT.payment_reversal_period_start_date:type_name -> google.protobuf.Timestamp
	29, // 37: payment.v1.PaymentMandateT.payment_reversal_period_end_date:type_name -> google.protobuf.Timestamp
	15, // 38: payment.v1.CreatePaymentMandateResponse.payment_mandate:type_name -> payment.v1.PaymentMandate
	23, // 39: payment.v1.PaymentMandateClause.payment_mandate_clause_contents:type_name -> payment.v1.PaymentMandateClauseContent
	20, // 40: payment.v1.CreatePaymentMandateClauseResponse.payment_mandate_clause:type_name -> payment.v1.PaymentMandateClause
	24, // 41: payment.v1.PaymentMandateClauseContent.payment_mandate_clause_content_d:type_name -> payment.v1.PaymentMandateClauseContentD
	27, // 42: payment.v1.PaymentMandateClauseContent.cr_upd_user:type_name -> common.v1.CrUpdUser
	28, // 43: payment.v1.PaymentMandateClauseContent.cr_upd_time:type_name -> common.v1.CrUpdTime
	23, // 44: payment.v1.CreatePaymentMandateClauseContentResponse.payment_mandate_clause_content:type_name -> payment.v1.PaymentMandateClauseContent
	3,  // 45: payment.v1.PaymentService.CreatePayment:input_type -> payment.v1.CreatePaymentRequest
	8,  // 46: payment.v1.PaymentService.CreatePaymentTerm:input_type -> payment.v1.CreatePaymentTermRequest
	13, // 47: payment.v1.PaymentService.CreatePaymentMean:input_type -> payment.v1.CreatePaymentMeanRequest
	18, // 48: payment.v1.PaymentService.CreatePaymentMandate:input_type -> payment.v1.CreatePaymentMandateRequest
	21, // 49: payment.v1.PaymentService.CreatePaymentMandateClause:input_type -> payment.v1.CreatePaymentMandateClauseRequest
	25, // 50: payment.v1.PaymentService.CreatePaymentMandateClauseContent:input_type -> payment.v1.CreatePaymentMandateClauseContentRequest
	4,  // 51: payment.v1.PaymentService.CreatePayment:output_type -> payment.v1.CreatePaymentResponse
	9,  // 52: payment.v1.PaymentService.CreatePaymentTerm:output_type -> payment.v1.CreatePaymentTermResponse
	14, // 53: payment.v1.PaymentService.CreatePaymentMean:output_type -> payment.v1.CreatePaymentMeanResponse
	19, // 54: payment.v1.PaymentService.CreatePaymentMandate:output_type -> payment.v1.CreatePaymentMandateResponse
	22, // 55: payment.v1.PaymentService.CreatePaymentMandateClause:output_type -> payment.v1.CreatePaymentMandateClauseResponse
	26, // 56: payment.v1.PaymentService.CreatePaymentMandateClauseContent:output_type -> payment.v1.CreatePaymentMandateClauseContentResponse
	51, // [51:57] is the sub-list for method output_type
	45, // [45:51] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_payment_v1_payment_proto_init() }
func file_payment_v1_payment_proto_init() {
	if File_payment_v1_payment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payment_v1_payment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_payment_v1_payment_proto_goTypes,
		DependencyIndexes: file_payment_v1_payment_proto_depIdxs,
		MessageInfos:      file_payment_v1_payment_proto_msgTypes,
	}.Build()
	File_payment_v1_payment_proto = out.File
	file_payment_v1_payment_proto_rawDesc = nil
	file_payment_v1_payment_proto_goTypes = nil
	file_payment_v1_payment_proto_depIdxs = nil
}
