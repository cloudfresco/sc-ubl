// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment/v1/payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Payment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PaymentMultiError, or nil if none found.
func (m *Payment) ValidateAll() error {
	return m.validate(true)
}

func (m *Payment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "PaymentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "PaymentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "PaymentD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "PaymentT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "PaymentT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "PaymentT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentMultiError(errors)
	}

	return nil
}

// PaymentMultiError is an error wrapping multiple validation errors returned
// by Payment.ValidateAll() if the designated constraints aren't met.
type PaymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMultiError) AllErrors() []error { return m }

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on PaymentD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentDMultiError, or nil
// if none found.
func (m *PaymentD) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PId

	// no validation rules for PaidAmount

	// no validation rules for InstructionId

	// no validation rules for PaymentMeanId

	if len(errors) > 0 {
		return PaymentDMultiError(errors)
	}

	return nil
}

// PaymentDMultiError is an error wrapping multiple validation errors returned
// by PaymentD.ValidateAll() if the designated constraints aren't met.
type PaymentDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentDMultiError) AllErrors() []error { return m }

// PaymentDValidationError is the validation error returned by
// PaymentD.Validate if the designated constraints aren't met.
type PaymentDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentDValidationError) ErrorName() string { return "PaymentDValidationError" }

// Error satisfies the builtin error interface
func (e PaymentDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentDValidationError{}

// Validate checks the field values on PaymentT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentTMultiError, or nil
// if none found.
func (m *PaymentT) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceivedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTValidationError{
					field:  "ReceivedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTValidationError{
					field:  "ReceivedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTValidationError{
				field:  "ReceivedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaidDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTValidationError{
					field:  "PaidDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTValidationError{
					field:  "PaidDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaidDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTValidationError{
				field:  "PaidDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentTMultiError(errors)
	}

	return nil
}

// PaymentTMultiError is an error wrapping multiple validation errors returned
// by PaymentT.ValidateAll() if the designated constraints aren't met.
type PaymentTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentTMultiError) AllErrors() []error { return m }

// PaymentTValidationError is the validation error returned by
// PaymentT.Validate if the designated constraints aren't met.
type PaymentTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentTValidationError) ErrorName() string { return "PaymentTValidationError" }

// Error satisfies the builtin error interface
func (e PaymentTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentTValidationError{}

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentRequestMultiError, or nil if none found.
func (m *CreatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PId

	// no validation rules for PaidAmount

	// no validation rules for ReceivedDate

	// no validation rules for PaidDate

	// no validation rules for InstructionId

	// no validation rules for PaymentMeanId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePaymentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentResponseMultiError, or nil if none found.
func (m *CreatePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentResponseValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on PaymentTerm with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentTerm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentTerm with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentTermMultiError, or
// nil if none found.
func (m *PaymentTerm) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentTerm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentTermD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermValidationError{
					field:  "PaymentTermD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermValidationError{
					field:  "PaymentTermD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentTermD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermValidationError{
				field:  "PaymentTermD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentTermT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermValidationError{
					field:  "PaymentTermT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermValidationError{
					field:  "PaymentTermT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentTermT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermValidationError{
				field:  "PaymentTermT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPaymentMeans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PaymentTermValidationError{
						field:  fmt.Sprintf("PaymentMeans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PaymentTermValidationError{
						field:  fmt.Sprintf("PaymentMeans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentTermValidationError{
					field:  fmt.Sprintf("PaymentMeans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPayments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PaymentTermValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PaymentTermValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentTermValidationError{
					field:  fmt.Sprintf("Payments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PaymentTermMultiError(errors)
	}

	return nil
}

// PaymentTermMultiError is an error wrapping multiple validation errors
// returned by PaymentTerm.ValidateAll() if the designated constraints aren't met.
type PaymentTermMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentTermMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentTermMultiError) AllErrors() []error { return m }

// PaymentTermValidationError is the validation error returned by
// PaymentTerm.Validate if the designated constraints aren't met.
type PaymentTermValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentTermValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentTermValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentTermValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentTermValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentTermValidationError) ErrorName() string { return "PaymentTermValidationError" }

// Error satisfies the builtin error interface
func (e PaymentTermValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentTerm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentTermValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentTermValidationError{}

// Validate checks the field values on PaymentTermD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentTermD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentTermD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentTermDMultiError, or
// nil if none found.
func (m *PaymentTermD) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentTermD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PtId

	// no validation rules for PrepaidPaymentReferenceId

	// no validation rules for Note

	// no validation rules for ReferenceEventCode

	// no validation rules for SettlementDiscountPercent

	// no validation rules for PenaltySurchargePercent

	// no validation rules for PaymentPercent

	// no validation rules for Amount

	// no validation rules for SettlementDiscountAmount

	// no validation rules for PenaltyAmount

	// no validation rules for PaymentTermsDetailsURI

	// no validation rules for ExchangeRate

	if len(errors) > 0 {
		return PaymentTermDMultiError(errors)
	}

	return nil
}

// PaymentTermDMultiError is an error wrapping multiple validation errors
// returned by PaymentTermD.ValidateAll() if the designated constraints aren't met.
type PaymentTermDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentTermDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentTermDMultiError) AllErrors() []error { return m }

// PaymentTermDValidationError is the validation error returned by
// PaymentTermD.Validate if the designated constraints aren't met.
type PaymentTermDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentTermDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentTermDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentTermDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentTermDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentTermDValidationError) ErrorName() string { return "PaymentTermDValidationError" }

// Error satisfies the builtin error interface
func (e PaymentTermDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentTermD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentTermDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentTermDValidationError{}

// Validate checks the field values on PaymentTermT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentTermT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentTermT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentTermTMultiError, or
// nil if none found.
func (m *PaymentTermT) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentTermT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentDueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "PaymentDueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "PaymentDueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermTValidationError{
				field:  "PaymentDueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInstallmentDueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "InstallmentDueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "InstallmentDueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstallmentDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermTValidationError{
				field:  "InstallmentDueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettlementPeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "SettlementPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "SettlementPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettlementPeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermTValidationError{
				field:  "SettlementPeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettlementPeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "SettlementPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "SettlementPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettlementPeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermTValidationError{
				field:  "SettlementPeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPenaltyPeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "PenaltyPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "PenaltyPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPenaltyPeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermTValidationError{
				field:  "PenaltyPeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPenaltyPeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "PenaltyPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "PenaltyPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPenaltyPeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermTValidationError{
				field:  "PenaltyPeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidityPeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "ValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "ValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidityPeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermTValidationError{
				field:  "ValidityPeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidityPeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "ValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTermTValidationError{
					field:  "ValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidityPeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTermTValidationError{
				field:  "ValidityPeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentTermTMultiError(errors)
	}

	return nil
}

// PaymentTermTMultiError is an error wrapping multiple validation errors
// returned by PaymentTermT.ValidateAll() if the designated constraints aren't met.
type PaymentTermTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentTermTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentTermTMultiError) AllErrors() []error { return m }

// PaymentTermTValidationError is the validation error returned by
// PaymentTermT.Validate if the designated constraints aren't met.
type PaymentTermTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentTermTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentTermTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentTermTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentTermTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentTermTValidationError) ErrorName() string { return "PaymentTermTValidationError" }

// Error satisfies the builtin error interface
func (e PaymentTermTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentTermT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentTermTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentTermTValidationError{}

// Validate checks the field values on CreatePaymentTermRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentTermRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentTermRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentTermRequestMultiError, or nil if none found.
func (m *CreatePaymentTermRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentTermRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PtId

	// no validation rules for PrepaidPaymentReferenceId

	// no validation rules for Note

	// no validation rules for ReferenceEventCode

	// no validation rules for SettlementDiscountPercent

	// no validation rules for PenaltySurchargePercent

	// no validation rules for PaymentPercent

	// no validation rules for Amount

	// no validation rules for SettlementDiscountAmount

	// no validation rules for PenaltyAmount

	// no validation rules for PaymentTermsDetailsURI

	// no validation rules for PaymentDueDate

	// no validation rules for InstallmentDueDate

	// no validation rules for SettlementPeriodStartDate

	// no validation rules for SettlementPeriodEndDate

	// no validation rules for PenaltyPeriodStartDate

	// no validation rules for PenaltyPeriodEndDate

	// no validation rules for ExchangeRate

	// no validation rules for ValidityPeriodStartDate

	// no validation rules for ValidityPeriodEndDate

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePaymentTermRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentTermRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentTermRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentTermRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentTermRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentTermRequestMultiError) AllErrors() []error { return m }

// CreatePaymentTermRequestValidationError is the validation error returned by
// CreatePaymentTermRequest.Validate if the designated constraints aren't met.
type CreatePaymentTermRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentTermRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentTermRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentTermRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentTermRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentTermRequestValidationError) ErrorName() string {
	return "CreatePaymentTermRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentTermRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentTermRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentTermRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentTermRequestValidationError{}

// Validate checks the field values on CreatePaymentTermResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentTermResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentTermResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentTermResponseMultiError, or nil if none found.
func (m *CreatePaymentTermResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentTermResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentTerm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentTermResponseValidationError{
					field:  "PaymentTerm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentTermResponseValidationError{
					field:  "PaymentTerm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentTerm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentTermResponseValidationError{
				field:  "PaymentTerm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentTermResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentTermResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentTermResponse.ValidateAll() if the
// designated constraints aren't met.
type CreatePaymentTermResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentTermResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentTermResponseMultiError) AllErrors() []error { return m }

// CreatePaymentTermResponseValidationError is the validation error returned by
// CreatePaymentTermResponse.Validate if the designated constraints aren't met.
type CreatePaymentTermResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentTermResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentTermResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentTermResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentTermResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentTermResponseValidationError) ErrorName() string {
	return "CreatePaymentTermResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentTermResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentTermResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentTermResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentTermResponseValidationError{}

// Validate checks the field values on PaymentMean with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentMean) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMean with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentMeanMultiError, or
// nil if none found.
func (m *PaymentMean) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMean) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMeanD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMeanValidationError{
					field:  "PaymentMeanD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMeanValidationError{
					field:  "PaymentMeanD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMeanD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMeanValidationError{
				field:  "PaymentMeanD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentMeanT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMeanValidationError{
					field:  "PaymentMeanT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMeanValidationError{
					field:  "PaymentMeanT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMeanT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMeanValidationError{
				field:  "PaymentMeanT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMeanValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMeanValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMeanValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMeanValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMeanValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMeanValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPayments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PaymentMeanValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PaymentMeanValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentMeanValidationError{
					field:  fmt.Sprintf("Payments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PaymentMeanMultiError(errors)
	}

	return nil
}

// PaymentMeanMultiError is an error wrapping multiple validation errors
// returned by PaymentMean.ValidateAll() if the designated constraints aren't met.
type PaymentMeanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMeanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMeanMultiError) AllErrors() []error { return m }

// PaymentMeanValidationError is the validation error returned by
// PaymentMean.Validate if the designated constraints aren't met.
type PaymentMeanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMeanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMeanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMeanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMeanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMeanValidationError) ErrorName() string { return "PaymentMeanValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMeanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMean.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMeanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMeanValidationError{}

// Validate checks the field values on PaymentMeanD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentMeanD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMeanD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentMeanDMultiError, or
// nil if none found.
func (m *PaymentMeanD) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMeanD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PmId

	// no validation rules for PaymentMeansCode

	// no validation rules for PaymentChannelCode

	// no validation rules for InstructionId

	// no validation rules for InstructionNote

	// no validation rules for CreditAccountId

	// no validation rules for PaymentTermId

	// no validation rules for PaymentMandateId

	// no validation rules for TradeFinancingId

	// no validation rules for PayerFinancialAccountId

	// no validation rules for PayeeFinancialAccountId

	if len(errors) > 0 {
		return PaymentMeanDMultiError(errors)
	}

	return nil
}

// PaymentMeanDMultiError is an error wrapping multiple validation errors
// returned by PaymentMeanD.ValidateAll() if the designated constraints aren't met.
type PaymentMeanDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMeanDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMeanDMultiError) AllErrors() []error { return m }

// PaymentMeanDValidationError is the validation error returned by
// PaymentMeanD.Validate if the designated constraints aren't met.
type PaymentMeanDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMeanDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMeanDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMeanDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMeanDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMeanDValidationError) ErrorName() string { return "PaymentMeanDValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMeanDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMeanD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMeanDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMeanDValidationError{}

// Validate checks the field values on PaymentMeanT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentMeanT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMeanT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentMeanTMultiError, or
// nil if none found.
func (m *PaymentMeanT) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMeanT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentDueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMeanTValidationError{
					field:  "PaymentDueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMeanTValidationError{
					field:  "PaymentDueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMeanTValidationError{
				field:  "PaymentDueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentMeanTMultiError(errors)
	}

	return nil
}

// PaymentMeanTMultiError is an error wrapping multiple validation errors
// returned by PaymentMeanT.ValidateAll() if the designated constraints aren't met.
type PaymentMeanTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMeanTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMeanTMultiError) AllErrors() []error { return m }

// PaymentMeanTValidationError is the validation error returned by
// PaymentMeanT.Validate if the designated constraints aren't met.
type PaymentMeanTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMeanTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMeanTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMeanTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMeanTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMeanTValidationError) ErrorName() string { return "PaymentMeanTValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMeanTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMeanT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMeanTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMeanTValidationError{}

// Validate checks the field values on CreatePaymentMeanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentMeanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMeanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentMeanRequestMultiError, or nil if none found.
func (m *CreatePaymentMeanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMeanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmId

	// no validation rules for PaymentMeansCode

	// no validation rules for PaymentDueDate

	// no validation rules for PaymentChannelCode

	// no validation rules for InstructionId

	// no validation rules for InstructionNote

	// no validation rules for CreditAccountId

	// no validation rules for PaymentTermId

	// no validation rules for PaymentMandateId

	// no validation rules for TradeFinancingId

	// no validation rules for PayerFinancialAccountId

	// no validation rules for PayeeFinancialAccountId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePaymentMeanRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentMeanRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentMeanRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentMeanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMeanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMeanRequestMultiError) AllErrors() []error { return m }

// CreatePaymentMeanRequestValidationError is the validation error returned by
// CreatePaymentMeanRequest.Validate if the designated constraints aren't met.
type CreatePaymentMeanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMeanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMeanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMeanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMeanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMeanRequestValidationError) ErrorName() string {
	return "CreatePaymentMeanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMeanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMeanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMeanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMeanRequestValidationError{}

// Validate checks the field values on CreatePaymentMeanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentMeanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMeanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentMeanResponseMultiError, or nil if none found.
func (m *CreatePaymentMeanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMeanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMean()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentMeanResponseValidationError{
					field:  "PaymentMean",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentMeanResponseValidationError{
					field:  "PaymentMean",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMean()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentMeanResponseValidationError{
				field:  "PaymentMean",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentMeanResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentMeanResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentMeanResponse.ValidateAll() if the
// designated constraints aren't met.
type CreatePaymentMeanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMeanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMeanResponseMultiError) AllErrors() []error { return m }

// CreatePaymentMeanResponseValidationError is the validation error returned by
// CreatePaymentMeanResponse.Validate if the designated constraints aren't met.
type CreatePaymentMeanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMeanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMeanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMeanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMeanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMeanResponseValidationError) ErrorName() string {
	return "CreatePaymentMeanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMeanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMeanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMeanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMeanResponseValidationError{}

// Validate checks the field values on PaymentMandate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentMandate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMandate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentMandateMultiError,
// or nil if none found.
func (m *PaymentMandate) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMandate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMandateD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateValidationError{
					field:  "PaymentMandateD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateValidationError{
					field:  "PaymentMandateD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMandateD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateValidationError{
				field:  "PaymentMandateD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentMandateT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateValidationError{
					field:  "PaymentMandateT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateValidationError{
					field:  "PaymentMandateT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMandateT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateValidationError{
				field:  "PaymentMandateT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPaymentMandateClauses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PaymentMandateValidationError{
						field:  fmt.Sprintf("PaymentMandateClauses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PaymentMandateValidationError{
						field:  fmt.Sprintf("PaymentMandateClauses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentMandateValidationError{
					field:  fmt.Sprintf("PaymentMandateClauses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PaymentMandateMultiError(errors)
	}

	return nil
}

// PaymentMandateMultiError is an error wrapping multiple validation errors
// returned by PaymentMandate.ValidateAll() if the designated constraints
// aren't met.
type PaymentMandateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMandateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMandateMultiError) AllErrors() []error { return m }

// PaymentMandateValidationError is the validation error returned by
// PaymentMandate.Validate if the designated constraints aren't met.
type PaymentMandateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMandateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMandateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMandateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMandateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMandateValidationError) ErrorName() string { return "PaymentMandateValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMandateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMandate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMandateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMandateValidationError{}

// Validate checks the field values on PaymentMandateD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentMandateD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMandateD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMandateDMultiError, or nil if none found.
func (m *PaymentMandateD) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMandateD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PmdId

	// no validation rules for MandateTypeCode

	// no validation rules for MaximumPaymentInstructionsNumeric

	// no validation rules for MaximumPaidAmount

	// no validation rules for SignatureId

	// no validation rules for PayerPartyId

	// no validation rules for PayerFinancialAccountId

	// no validation rules for Clause

	if len(errors) > 0 {
		return PaymentMandateDMultiError(errors)
	}

	return nil
}

// PaymentMandateDMultiError is an error wrapping multiple validation errors
// returned by PaymentMandateD.ValidateAll() if the designated constraints
// aren't met.
type PaymentMandateDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMandateDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMandateDMultiError) AllErrors() []error { return m }

// PaymentMandateDValidationError is the validation error returned by
// PaymentMandateD.Validate if the designated constraints aren't met.
type PaymentMandateDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMandateDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMandateDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMandateDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMandateDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMandateDValidationError) ErrorName() string { return "PaymentMandateDValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMandateDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMandateD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMandateDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMandateDValidationError{}

// Validate checks the field values on PaymentMandateT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentMandateT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMandateT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMandateTMultiError, or nil if none found.
func (m *PaymentMandateT) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMandateT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValidityPeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateTValidationError{
					field:  "ValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateTValidationError{
					field:  "ValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidityPeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateTValidationError{
				field:  "ValidityPeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidityPeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateTValidationError{
					field:  "ValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateTValidationError{
					field:  "ValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidityPeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateTValidationError{
				field:  "ValidityPeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentReversalPeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateTValidationError{
					field:  "PaymentReversalPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateTValidationError{
					field:  "PaymentReversalPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentReversalPeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateTValidationError{
				field:  "PaymentReversalPeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentReversalPeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateTValidationError{
					field:  "PaymentReversalPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateTValidationError{
					field:  "PaymentReversalPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentReversalPeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateTValidationError{
				field:  "PaymentReversalPeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentMandateTMultiError(errors)
	}

	return nil
}

// PaymentMandateTMultiError is an error wrapping multiple validation errors
// returned by PaymentMandateT.ValidateAll() if the designated constraints
// aren't met.
type PaymentMandateTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMandateTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMandateTMultiError) AllErrors() []error { return m }

// PaymentMandateTValidationError is the validation error returned by
// PaymentMandateT.Validate if the designated constraints aren't met.
type PaymentMandateTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMandateTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMandateTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMandateTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMandateTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMandateTValidationError) ErrorName() string { return "PaymentMandateTValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMandateTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMandateT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMandateTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMandateTValidationError{}

// Validate checks the field values on CreatePaymentMandateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentMandateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMandateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentMandateRequestMultiError, or nil if none found.
func (m *CreatePaymentMandateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMandateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmdId

	// no validation rules for MandateTypeCode

	// no validation rules for MaximumPaymentInstructionsNumeric

	// no validation rules for MaximumPaidAmount

	// no validation rules for SignatureId

	// no validation rules for PayerPartyId

	// no validation rules for PayerFinancialAccountId

	// no validation rules for ValidityPeriodStartDate

	// no validation rules for ValidityPeriodEndDate

	// no validation rules for PaymentReversalPeriodStartDate

	// no validation rules for PaymentReversalPeriodEndDate

	// no validation rules for Clause

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePaymentMandateRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentMandateRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentMandateRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentMandateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMandateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMandateRequestMultiError) AllErrors() []error { return m }

// CreatePaymentMandateRequestValidationError is the validation error returned
// by CreatePaymentMandateRequest.Validate if the designated constraints
// aren't met.
type CreatePaymentMandateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMandateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMandateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMandateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMandateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMandateRequestValidationError) ErrorName() string {
	return "CreatePaymentMandateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMandateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMandateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMandateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMandateRequestValidationError{}

// Validate checks the field values on CreatePaymentMandateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentMandateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMandateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentMandateResponseMultiError, or nil if none found.
func (m *CreatePaymentMandateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMandateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMandate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentMandateResponseValidationError{
					field:  "PaymentMandate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentMandateResponseValidationError{
					field:  "PaymentMandate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMandate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentMandateResponseValidationError{
				field:  "PaymentMandate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentMandateResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentMandateResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentMandateResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentMandateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMandateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMandateResponseMultiError) AllErrors() []error { return m }

// CreatePaymentMandateResponseValidationError is the validation error returned
// by CreatePaymentMandateResponse.Validate if the designated constraints
// aren't met.
type CreatePaymentMandateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMandateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMandateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMandateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMandateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMandateResponseValidationError) ErrorName() string {
	return "CreatePaymentMandateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMandateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMandateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMandateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMandateResponseValidationError{}

// Validate checks the field values on PaymentMandateClause with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentMandateClause) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMandateClause with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMandateClauseMultiError, or nil if none found.
func (m *PaymentMandateClause) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMandateClause) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PmClId

	// no validation rules for PaymentMandateId

	for idx, item := range m.GetPaymentMandateClauseContents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PaymentMandateClauseValidationError{
						field:  fmt.Sprintf("PaymentMandateClauseContents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PaymentMandateClauseValidationError{
						field:  fmt.Sprintf("PaymentMandateClauseContents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentMandateClauseValidationError{
					field:  fmt.Sprintf("PaymentMandateClauseContents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PaymentMandateClauseMultiError(errors)
	}

	return nil
}

// PaymentMandateClauseMultiError is an error wrapping multiple validation
// errors returned by PaymentMandateClause.ValidateAll() if the designated
// constraints aren't met.
type PaymentMandateClauseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMandateClauseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMandateClauseMultiError) AllErrors() []error { return m }

// PaymentMandateClauseValidationError is the validation error returned by
// PaymentMandateClause.Validate if the designated constraints aren't met.
type PaymentMandateClauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMandateClauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMandateClauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMandateClauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMandateClauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMandateClauseValidationError) ErrorName() string {
	return "PaymentMandateClauseValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMandateClauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMandateClause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMandateClauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMandateClauseValidationError{}

// Validate checks the field values on CreatePaymentMandateClauseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePaymentMandateClauseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMandateClauseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePaymentMandateClauseRequestMultiError, or nil if none found.
func (m *CreatePaymentMandateClauseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMandateClauseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmClId

	// no validation rules for PaymentMandateId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePaymentMandateClauseRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentMandateClauseRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreatePaymentMandateClauseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentMandateClauseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMandateClauseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMandateClauseRequestMultiError) AllErrors() []error { return m }

// CreatePaymentMandateClauseRequestValidationError is the validation error
// returned by CreatePaymentMandateClauseRequest.Validate if the designated
// constraints aren't met.
type CreatePaymentMandateClauseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMandateClauseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMandateClauseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMandateClauseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMandateClauseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMandateClauseRequestValidationError) ErrorName() string {
	return "CreatePaymentMandateClauseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMandateClauseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMandateClauseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMandateClauseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMandateClauseRequestValidationError{}

// Validate checks the field values on CreatePaymentMandateClauseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePaymentMandateClauseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMandateClauseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePaymentMandateClauseResponseMultiError, or nil if none found.
func (m *CreatePaymentMandateClauseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMandateClauseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMandateClause()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentMandateClauseResponseValidationError{
					field:  "PaymentMandateClause",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentMandateClauseResponseValidationError{
					field:  "PaymentMandateClause",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMandateClause()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentMandateClauseResponseValidationError{
				field:  "PaymentMandateClause",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentMandateClauseResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentMandateClauseResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreatePaymentMandateClauseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentMandateClauseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMandateClauseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMandateClauseResponseMultiError) AllErrors() []error { return m }

// CreatePaymentMandateClauseResponseValidationError is the validation error
// returned by CreatePaymentMandateClauseResponse.Validate if the designated
// constraints aren't met.
type CreatePaymentMandateClauseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMandateClauseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMandateClauseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMandateClauseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMandateClauseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMandateClauseResponseValidationError) ErrorName() string {
	return "CreatePaymentMandateClauseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMandateClauseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMandateClauseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMandateClauseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMandateClauseResponseValidationError{}

// Validate checks the field values on PaymentMandateClauseContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentMandateClauseContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMandateClauseContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMandateClauseContentMultiError, or nil if none found.
func (m *PaymentMandateClauseContent) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMandateClauseContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMandateClauseContentD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateClauseContentValidationError{
					field:  "PaymentMandateClauseContentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateClauseContentValidationError{
					field:  "PaymentMandateClauseContentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMandateClauseContentD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateClauseContentValidationError{
				field:  "PaymentMandateClauseContentD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateClauseContentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateClauseContentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateClauseContentValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMandateClauseContentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMandateClauseContentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMandateClauseContentValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentMandateClauseContentMultiError(errors)
	}

	return nil
}

// PaymentMandateClauseContentMultiError is an error wrapping multiple
// validation errors returned by PaymentMandateClauseContent.ValidateAll() if
// the designated constraints aren't met.
type PaymentMandateClauseContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMandateClauseContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMandateClauseContentMultiError) AllErrors() []error { return m }

// PaymentMandateClauseContentValidationError is the validation error returned
// by PaymentMandateClauseContent.Validate if the designated constraints
// aren't met.
type PaymentMandateClauseContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMandateClauseContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMandateClauseContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMandateClauseContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMandateClauseContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMandateClauseContentValidationError) ErrorName() string {
	return "PaymentMandateClauseContentValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMandateClauseContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMandateClauseContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMandateClauseContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMandateClauseContentValidationError{}

// Validate checks the field values on PaymentMandateClauseContentD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentMandateClauseContentD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMandateClauseContentD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMandateClauseContentDMultiError, or nil if none found.
func (m *PaymentMandateClauseContentD) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMandateClauseContentD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Content

	// no validation rules for PaymentMandateClauseId

	if len(errors) > 0 {
		return PaymentMandateClauseContentDMultiError(errors)
	}

	return nil
}

// PaymentMandateClauseContentDMultiError is an error wrapping multiple
// validation errors returned by PaymentMandateClauseContentD.ValidateAll() if
// the designated constraints aren't met.
type PaymentMandateClauseContentDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMandateClauseContentDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMandateClauseContentDMultiError) AllErrors() []error { return m }

// PaymentMandateClauseContentDValidationError is the validation error returned
// by PaymentMandateClauseContentD.Validate if the designated constraints
// aren't met.
type PaymentMandateClauseContentDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMandateClauseContentDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMandateClauseContentDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMandateClauseContentDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMandateClauseContentDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMandateClauseContentDValidationError) ErrorName() string {
	return "PaymentMandateClauseContentDValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMandateClauseContentDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMandateClauseContentD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMandateClauseContentDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMandateClauseContentDValidationError{}

// Validate checks the field values on CreatePaymentMandateClauseContentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreatePaymentMandateClauseContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreatePaymentMandateClauseContentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreatePaymentMandateClauseContentRequestMultiError, or nil if none found.
func (m *CreatePaymentMandateClauseContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMandateClauseContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for PaymentMandateClauseId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePaymentMandateClauseContentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentMandateClauseContentRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreatePaymentMandateClauseContentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentMandateClauseContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMandateClauseContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMandateClauseContentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentMandateClauseContentRequestValidationError is the validation
// error returned by CreatePaymentMandateClauseContentRequest.Validate if the
// designated constraints aren't met.
type CreatePaymentMandateClauseContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMandateClauseContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMandateClauseContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMandateClauseContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMandateClauseContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMandateClauseContentRequestValidationError) ErrorName() string {
	return "CreatePaymentMandateClauseContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMandateClauseContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMandateClauseContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMandateClauseContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMandateClauseContentRequestValidationError{}

// Validate checks the field values on
// CreatePaymentMandateClauseContentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentMandateClauseContentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreatePaymentMandateClauseContentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreatePaymentMandateClauseContentResponseMultiError, or nil if none found.
func (m *CreatePaymentMandateClauseContentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMandateClauseContentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMandateClauseContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentMandateClauseContentResponseValidationError{
					field:  "PaymentMandateClauseContent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentMandateClauseContentResponseValidationError{
					field:  "PaymentMandateClauseContent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMandateClauseContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentMandateClauseContentResponseValidationError{
				field:  "PaymentMandateClauseContent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentMandateClauseContentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentMandateClauseContentResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreatePaymentMandateClauseContentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentMandateClauseContentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMandateClauseContentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMandateClauseContentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentMandateClauseContentResponseValidationError is the validation
// error returned by CreatePaymentMandateClauseContentResponse.Validate if the
// designated constraints aren't met.
type CreatePaymentMandateClauseContentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMandateClauseContentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMandateClauseContentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMandateClauseContentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMandateClauseContentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMandateClauseContentResponseValidationError) ErrorName() string {
	return "CreatePaymentMandateClauseContentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMandateClauseContentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMandateClauseContentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMandateClauseContentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMandateClauseContentResponseValidationError{}
