// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: payment/v1/payment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_CreatePayment_FullMethodName                     = "/payment.v1.PaymentService/CreatePayment"
	PaymentService_CreatePaymentTerm_FullMethodName                 = "/payment.v1.PaymentService/CreatePaymentTerm"
	PaymentService_CreatePaymentMean_FullMethodName                 = "/payment.v1.PaymentService/CreatePaymentMean"
	PaymentService_CreatePaymentMandate_FullMethodName              = "/payment.v1.PaymentService/CreatePaymentMandate"
	PaymentService_CreatePaymentMandateClause_FullMethodName        = "/payment.v1.PaymentService/CreatePaymentMandateClause"
	PaymentService_CreatePaymentMandateClauseContent_FullMethodName = "/payment.v1.PaymentService/CreatePaymentMandateClauseContent"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The PaymentService service definition.
type PaymentServiceClient interface {
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	CreatePaymentTerm(ctx context.Context, in *CreatePaymentTermRequest, opts ...grpc.CallOption) (*CreatePaymentTermResponse, error)
	CreatePaymentMean(ctx context.Context, in *CreatePaymentMeanRequest, opts ...grpc.CallOption) (*CreatePaymentMeanResponse, error)
	CreatePaymentMandate(ctx context.Context, in *CreatePaymentMandateRequest, opts ...grpc.CallOption) (*CreatePaymentMandateResponse, error)
	CreatePaymentMandateClause(ctx context.Context, in *CreatePaymentMandateClauseRequest, opts ...grpc.CallOption) (*CreatePaymentMandateClauseResponse, error)
	CreatePaymentMandateClauseContent(ctx context.Context, in *CreatePaymentMandateClauseContentRequest, opts ...grpc.CallOption) (*CreatePaymentMandateClauseContentResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreatePaymentTerm(ctx context.Context, in *CreatePaymentTermRequest, opts ...grpc.CallOption) (*CreatePaymentTermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentTermResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreatePaymentTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreatePaymentMean(ctx context.Context, in *CreatePaymentMeanRequest, opts ...grpc.CallOption) (*CreatePaymentMeanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentMeanResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreatePaymentMean_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreatePaymentMandate(ctx context.Context, in *CreatePaymentMandateRequest, opts ...grpc.CallOption) (*CreatePaymentMandateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentMandateResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreatePaymentMandate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreatePaymentMandateClause(ctx context.Context, in *CreatePaymentMandateClauseRequest, opts ...grpc.CallOption) (*CreatePaymentMandateClauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentMandateClauseResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreatePaymentMandateClause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreatePaymentMandateClauseContent(ctx context.Context, in *CreatePaymentMandateClauseContentRequest, opts ...grpc.CallOption) (*CreatePaymentMandateClauseContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentMandateClauseContentResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreatePaymentMandateClauseContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// The PaymentService service definition.
type PaymentServiceServer interface {
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	CreatePaymentTerm(context.Context, *CreatePaymentTermRequest) (*CreatePaymentTermResponse, error)
	CreatePaymentMean(context.Context, *CreatePaymentMeanRequest) (*CreatePaymentMeanResponse, error)
	CreatePaymentMandate(context.Context, *CreatePaymentMandateRequest) (*CreatePaymentMandateResponse, error)
	CreatePaymentMandateClause(context.Context, *CreatePaymentMandateClauseRequest) (*CreatePaymentMandateClauseResponse, error)
	CreatePaymentMandateClauseContent(context.Context, *CreatePaymentMandateClauseContentRequest) (*CreatePaymentMandateClauseContentResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentServiceServer) CreatePaymentTerm(context.Context, *CreatePaymentTermRequest) (*CreatePaymentTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentTerm not implemented")
}
func (UnimplementedPaymentServiceServer) CreatePaymentMean(context.Context, *CreatePaymentMeanRequest) (*CreatePaymentMeanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMean not implemented")
}
func (UnimplementedPaymentServiceServer) CreatePaymentMandate(context.Context, *CreatePaymentMandateRequest) (*CreatePaymentMandateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMandate not implemented")
}
func (UnimplementedPaymentServiceServer) CreatePaymentMandateClause(context.Context, *CreatePaymentMandateClauseRequest) (*CreatePaymentMandateClauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMandateClause not implemented")
}
func (UnimplementedPaymentServiceServer) CreatePaymentMandateClauseContent(context.Context, *CreatePaymentMandateClauseContentRequest) (*CreatePaymentMandateClauseContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMandateClauseContent not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreatePaymentTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePaymentTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePaymentTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePaymentTerm(ctx, req.(*CreatePaymentTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreatePaymentMean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentMeanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePaymentMean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePaymentMean_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePaymentMean(ctx, req.(*CreatePaymentMeanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreatePaymentMandate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentMandateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePaymentMandate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePaymentMandate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePaymentMandate(ctx, req.(*CreatePaymentMandateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreatePaymentMandateClause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentMandateClauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePaymentMandateClause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePaymentMandateClause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePaymentMandateClause(ctx, req.(*CreatePaymentMandateClauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreatePaymentMandateClauseContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentMandateClauseContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePaymentMandateClauseContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePaymentMandateClauseContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePaymentMandateClauseContent(ctx, req.(*CreatePaymentMandateClauseContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentService_CreatePayment_Handler,
		},
		{
			MethodName: "CreatePaymentTerm",
			Handler:    _PaymentService_CreatePaymentTerm_Handler,
		},
		{
			MethodName: "CreatePaymentMean",
			Handler:    _PaymentService_CreatePaymentMean_Handler,
		},
		{
			MethodName: "CreatePaymentMandate",
			Handler:    _PaymentService_CreatePaymentMandate_Handler,
		},
		{
			MethodName: "CreatePaymentMandateClause",
			Handler:    _PaymentService_CreatePaymentMandateClause_Handler,
		},
		{
			MethodName: "CreatePaymentMandateClauseContent",
			Handler:    _PaymentService_CreatePaymentMandateClauseContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment.proto",
}
